mergeKernel: found originalAlloc   %A = alloca double*, align 8
mergeKernel: found originalAlloc user  %ldHost = load double*, double** %A
mergeKernel: found originalAlloc user  %47 = load double*, double** %A, align 8, !dbg !1198
mergeKernel: found originalAlloc user  %22 = load double*, double** %A, align 8, !dbg !1164
mergeKernel: found originalAlloc user  %14 = load double*, double** %A, align 8, !dbg !1146
mergeKernel: found originalAlloc user  store double* %8, double** %A, align 8, !dbg !1129
mergeKernel: found originalAlloc store:  store double* %8, double** %A, align 8, !dbg !1129
mergeKernel: found originalAlloc cast:  %8 = bitcast i8* %call6 to double*, !dbg !1135
mergeKernel: found originalAlloc ci:  %call6 = call noalias i8* @malloc(i64 %mul5) #12, !dbg !1134
mergeKernel: found originalAlloc   %B = alloca double*, align 8
mergeKernel: found originalAlloc user  %ldHost1 = load double*, double** %B
mergeKernel: found originalAlloc user  %49 = load double*, double** %B, align 8, !dbg !1203
mergeKernel: found originalAlloc user  %46 = load double*, double** %B, align 8, !dbg !1199
mergeKernel: found originalAlloc user  %37 = load double*, double** %B, align 8, !dbg !1186
mergeKernel: found originalAlloc user  %28 = load double*, double** %B, align 8, !dbg !1174
mergeKernel: found originalAlloc user  %15 = load double*, double** %B, align 8, !dbg !1149
mergeKernel: found originalAlloc user  store double* %11, double** %B, align 8, !dbg !1139
mergeKernel: found originalAlloc store:  store double* %11, double** %B, align 8, !dbg !1139
mergeKernel: found originalAlloc cast:  %11 = bitcast i8* %call10 to double*, !dbg !1145
mergeKernel: found originalAlloc ci:  %call10 = call noalias i8* @malloc(i64 %mul9) #12, !dbg !1144
mergeKernel: found originalAlloc   %B = alloca double*, align 8
mergeKernel: found originalAlloc user  %ldHost2 = load double*, double** %B
mergeKernel: found originalAlloc user  %ldHost1 = load double*, double** %B
mergeKernel: found originalAlloc user  %49 = load double*, double** %B, align 8, !dbg !1205
mergeKernel: found originalAlloc user  %46 = load double*, double** %B, align 8, !dbg !1201
mergeKernel: found originalAlloc user  %37 = load double*, double** %B, align 8, !dbg !1188
mergeKernel: found originalAlloc user  %28 = load double*, double** %B, align 8, !dbg !1176
mergeKernel: found originalAlloc user  %15 = load double*, double** %B, align 8, !dbg !1151
mergeKernel: found originalAlloc user  store double* %11, double** %B, align 8, !dbg !1139
mergeKernel: found originalAlloc store:  store double* %11, double** %B, align 8, !dbg !1139
mergeKernel: found originalAlloc cast:  %11 = bitcast i8* %call10 to double*, !dbg !1147
mergeKernel: found originalAlloc ci:  %call10 = call noalias i8* @malloc(i64 %mul9) #12, !dbg !1145, !tulip.target.mapdata.to !1146
CudaFE: found cudaConfigureCall
mergeKernel: kernelBB: 
kcall.configok:                                   ; preds = %entry
  %13 = load i32, i32* %n.addr, align 4, !dbg !1128
  %14 = load i32, i32* %m.addr, align 4, !dbg !1129
  %15 = load double, double* %alpha.addr, align 8, !dbg !1130
  %16 = load double*, double** %B.addr, align 8, !dbg !1131
  %17 = load double*, double** %A.addr, align 8, !dbg !1132
  call void @fasten.ll_CudaFE__Z15kernel_contractiidPdS_(i32 %13, i32 %14, double %15, double* %16, double* %17), !dbg !1127
  br label %kcall.end, !dbg !1127

mergeKernel: kernel call:   call void @fasten.ll_CudaFE__Z15kernel_contractiidPdS_(i32 %13, i32 %14, double %15, double* %16, double* %17), !dbg !1127
mergeKernel: kernel call:   call void @fasten.ll_CudaFE__Z15kernel_contractiidPdS_(i32 %13, i32 %14, double %15, double* %16, double* %17), !dbg !1127
MergeKernel: blocks per grid:
mergeKernel: Dim 1 :   %call = call i32 @_ZL10num_blocksii(i32 %0, i32 256), !dbg !1124
mergeKernel: Dim 2 : i32 1
mergeKernel: Dim 3 : i32 1
MergeKernel: threads per block:
mergeKernel: Dim 1 : i32 256
mergeKernel: Dim 2 : i32 1
mergeKernel: Dim 3 : i32 1
mergeKernel: found kernelName: _Z15kernel_contractiidPdS_
MergeKernel: found deviceKernel: 
; Function Attrs: convergent noinline nounwind
define dso_local void @_Z15kernel_contractiidPdS_(i32 %n, i32 %m, double %alpha, double* %B, double* %A) #0 !dbg !1107 {
entry:
  %n.addr = alloca i32, align 4
  %m.addr = alloca i32, align 4
  %alpha.addr = alloca double, align 8
  %B.addr = alloca double*, align 8
  %A.addr = alloca double*, align 8
  %j = alloca i32, align 4
  %i = alloca i32, align 4
  %k = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !1110, metadata !DIExpression()), !dbg !1111
  store i32 %m, i32* %m.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %m.addr, metadata !1112, metadata !DIExpression()), !dbg !1113
  store double %alpha, double* %alpha.addr, align 8
  call void @llvm.dbg.declare(metadata double* %alpha.addr, metadata !1114, metadata !DIExpression()), !dbg !1115
  store double* %B, double** %B.addr, align 8
  call void @llvm.dbg.declare(metadata double** %B.addr, metadata !1116, metadata !DIExpression()), !dbg !1117
  store double* %A, double** %A.addr, align 8
  call void @llvm.dbg.declare(metadata double** %A.addr, metadata !1118, metadata !DIExpression()), !dbg !1119
  call void @llvm.dbg.declare(metadata i32* %j, metadata !1120, metadata !DIExpression()), !dbg !1121
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ntid.x() #12, !dbg !1122, !range !1175
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #12, !dbg !1176, !range !1204
  %mul = mul i32 %0, %1, !dbg !1205
  %2 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x() #12, !dbg !1206, !range !1234
  %add = add i32 %mul, %2, !dbg !1235
  store i32 %add, i32* %j, align 4, !dbg !1121
  %3 = load i32, i32* %j, align 4, !dbg !1236
  %4 = load i32, i32* %n.addr, align 4, !dbg !1238
  %cmp = icmp slt i32 %3, %4, !dbg !1239
  br i1 %cmp, label %if.then, label %if.end, !dbg !1240

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i32* %i, metadata !1241, metadata !DIExpression()), !dbg !1244
  store i32 0, i32* %i, align 4, !dbg !1244
  br label %for.cond, !dbg !1245

for.cond:                                         ; preds = %for.inc20, %if.then
  %5 = load i32, i32* %i, align 4, !dbg !1246
  %6 = load i32, i32* %m.addr, align 4, !dbg !1248
  %cmp3 = icmp slt i32 %5, %6, !dbg !1249
  br i1 %cmp3, label %for.body, label %for.end22, !dbg !1250

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata i32* %k, metadata !1251, metadata !DIExpression()), !dbg !1253
  %7 = load i32, i32* %i, align 4, !dbg !1254
  %add4 = add nsw i32 %7, 1, !dbg !1255
  store i32 %add4, i32* %k, align 4, !dbg !1253
  br label %for.cond5, !dbg !1256

for.cond5:                                        ; preds = %for.inc, %for.body
  %8 = load i32, i32* %k, align 4, !dbg !1257
  %9 = load i32, i32* %m.addr, align 4, !dbg !1259
  %cmp6 = icmp slt i32 %8, %9, !dbg !1260
  br i1 %cmp6, label %for.body7, label %for.end, !dbg !1261

for.body7:                                        ; preds = %for.cond5
  %10 = load double*, double** %A.addr, align 8, !dbg !1262
  %11 = load i32, i32* %k, align 4, !dbg !1263
  %12 = load i32, i32* %m.addr, align 4, !dbg !1264
  %mul8 = mul nsw i32 %11, %12, !dbg !1265
  %13 = load i32, i32* %i, align 4, !dbg !1266
  %add9 = add nsw i32 %mul8, %13, !dbg !1267
  %idxprom = sext i32 %add9 to i64, !dbg !1262
  %arrayidx = getelementptr inbounds double, double* %10, i64 %idxprom, !dbg !1262
  %14 = load double, double* %arrayidx, align 8, !dbg !1262
  %15 = load double*, double** %B.addr, align 8, !dbg !1268
  %16 = load i32, i32* %k, align 4, !dbg !1269
  %17 = load i32, i32* %n.addr, align 4, !dbg !1270
  %mul10 = mul nsw i32 %16, %17, !dbg !1271
  %18 = load i32, i32* %j, align 4, !dbg !1272
  %add11 = add nsw i32 %mul10, %18, !dbg !1273
  %idxprom12 = sext i32 %add11 to i64, !dbg !1268
  %arrayidx13 = getelementptr inbounds double, double* %15, i64 %idxprom12, !dbg !1268
  %19 = load double, double* %arrayidx13, align 8, !dbg !1268
  %mul14 = fmul contract double %14, %19, !dbg !1274
  %20 = load double*, double** %B.addr, align 8, !dbg !1275
  %21 = load i32, i32* %i, align 4, !dbg !1276
  %22 = load i32, i32* %n.addr, align 4, !dbg !1277
  %mul15 = mul nsw i32 %21, %22, !dbg !1278
  %23 = load i32, i32* %j, align 4, !dbg !1279
  %add16 = add nsw i32 %mul15, %23, !dbg !1280
  %idxprom17 = sext i32 %add16 to i64, !dbg !1275
  %arrayidx18 = getelementptr inbounds double, double* %20, i64 %idxprom17, !dbg !1275
  %24 = load double, double* %arrayidx18, align 8, !dbg !1281
  %add19 = fadd contract double %24, %mul14, !dbg !1281
  store double %add19, double* %arrayidx18, align 8, !dbg !1281
  br label %for.inc, !dbg !1275

for.inc:                                          ; preds = %for.body7
  %25 = load i32, i32* %k, align 4, !dbg !1282
  %inc = add nsw i32 %25, 1, !dbg !1282
  store i32 %inc, i32* %k, align 4, !dbg !1282
  br label %for.cond5, !dbg !1283, !llvm.loop !1284

for.end:                                          ; preds = %for.cond5
  br label %for.inc20, !dbg !1285

for.inc20:                                        ; preds = %for.end
  %26 = load i32, i32* %i, align 4, !dbg !1286
  %inc21 = add nsw i32 %26, 1, !dbg !1286
  store i32 %inc21, i32* %i, align 4, !dbg !1286
  br label %for.cond, !dbg !1287, !llvm.loop !1288

for.end22:                                        ; preds = %for.cond
  br label %if.end, !dbg !1290

if.end:                                           ; preds = %for.end22, %entry
  ret void, !dbg !1291
}

MergeKernel: created new Function: 
declare void @_Z15kernel_contractiidPdS_.1(i32, i32, double, double*, double*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)


; Function Attrs: convergent noinline nounwind
define dso_local void @_Z15kernel_contractiidPdS_.1(i32 %n, i32 %m, double %alpha, double* %B, double* %A, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32) #0 {
entry:
  %n.addr = alloca i32, align 4
  %m.addr = alloca i32, align 4
  %alpha.addr = alloca double, align 8
  %B.addr = alloca double*, align 8
  %A.addr = alloca double*, align 8
  %j = alloca i32, align 4
  %i = alloca i32, align 4
  %k = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !1107, metadata !DIExpression()), !dbg !1111
  store i32 %m, i32* %m.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %m.addr, metadata !1112, metadata !DIExpression()), !dbg !1113
  store double %alpha, double* %alpha.addr, align 8
  call void @llvm.dbg.declare(metadata double* %alpha.addr, metadata !1114, metadata !DIExpression()), !dbg !1115
  store double* %B, double** %B.addr, align 8
  call void @llvm.dbg.declare(metadata double** %B.addr, metadata !1116, metadata !DIExpression()), !dbg !1117
  store double* %A, double** %A.addr, align 8
  call void @llvm.dbg.declare(metadata double** %A.addr, metadata !1118, metadata !DIExpression()), !dbg !1119
  call void @llvm.dbg.declare(metadata i32* %j, metadata !1120, metadata !DIExpression()), !dbg !1121
  %12 = call i32 @llvm.nvvm.read.ptx.sreg.ntid.x() #12, !dbg !1122, !range !1175
  %13 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #12, !dbg !1176, !range !1204
  %mul = mul i32 %12, %13, !dbg !1205
  %14 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x() #12, !dbg !1206, !range !1234
  %add = add i32 %mul, %14, !dbg !1235
  store i32 %add, i32* %j, align 4, !dbg !1121
  %15 = load i32, i32* %j, align 4, !dbg !1236
  %16 = load i32, i32* %n.addr, align 4, !dbg !1238
  %cmp = icmp slt i32 %15, %16, !dbg !1239
  br i1 %cmp, label %if.then, label %if.end, !dbg !1240

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i32* %i, metadata !1241, metadata !DIExpression()), !dbg !1244
  store i32 0, i32* %i, align 4, !dbg !1244
  br label %for.cond, !dbg !1245

for.cond:                                         ; preds = %for.inc20, %if.then
  %17 = load i32, i32* %i, align 4, !dbg !1246
  %18 = load i32, i32* %m.addr, align 4, !dbg !1248
  %cmp3 = icmp slt i32 %17, %18, !dbg !1249
  br i1 %cmp3, label %for.body, label %for.end22, !dbg !1250

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata i32* %k, metadata !1251, metadata !DIExpression()), !dbg !1253
  %19 = load i32, i32* %i, align 4, !dbg !1254
  %add4 = add nsw i32 %19, 1, !dbg !1255
  store i32 %add4, i32* %k, align 4, !dbg !1253
  br label %for.cond5, !dbg !1256

for.cond5:                                        ; preds = %for.inc, %for.body
  %20 = load i32, i32* %k, align 4, !dbg !1257
  %21 = load i32, i32* %m.addr, align 4, !dbg !1259
  %cmp6 = icmp slt i32 %20, %21, !dbg !1260
  br i1 %cmp6, label %for.body7, label %for.end, !dbg !1261

for.body7:                                        ; preds = %for.cond5
  %22 = load double*, double** %A.addr, align 8, !dbg !1262
  %23 = load i32, i32* %k, align 4, !dbg !1263
  %24 = load i32, i32* %m.addr, align 4, !dbg !1264
  %mul8 = mul nsw i32 %23, %24, !dbg !1265
  %25 = load i32, i32* %i, align 4, !dbg !1266
  %add9 = add nsw i32 %mul8, %25, !dbg !1267
  %idxprom = sext i32 %add9 to i64, !dbg !1262
  %arrayidx = getelementptr inbounds double, double* %22, i64 %idxprom, !dbg !1262
  %26 = load double, double* %arrayidx, align 8, !dbg !1262
  %27 = load double*, double** %B.addr, align 8, !dbg !1268
  %28 = load i32, i32* %k, align 4, !dbg !1269
  %29 = load i32, i32* %n.addr, align 4, !dbg !1270
  %mul10 = mul nsw i32 %28, %29, !dbg !1271
  %30 = load i32, i32* %j, align 4, !dbg !1272
  %add11 = add nsw i32 %mul10, %30, !dbg !1273
  %idxprom12 = sext i32 %add11 to i64, !dbg !1268
  %arrayidx13 = getelementptr inbounds double, double* %27, i64 %idxprom12, !dbg !1268
  %31 = load double, double* %arrayidx13, align 8, !dbg !1268
  %mul14 = fmul contract double %26, %31, !dbg !1274
  %32 = load double*, double** %B.addr, align 8, !dbg !1275
  %33 = load i32, i32* %i, align 4, !dbg !1276
  %34 = load i32, i32* %n.addr, align 4, !dbg !1277
  %mul15 = mul nsw i32 %33, %34, !dbg !1278
  %35 = load i32, i32* %j, align 4, !dbg !1279
  %add16 = add nsw i32 %mul15, %35, !dbg !1280
  %idxprom17 = sext i32 %add16 to i64, !dbg !1275
  %arrayidx18 = getelementptr inbounds double, double* %32, i64 %idxprom17, !dbg !1275
  %36 = load double, double* %arrayidx18, align 8, !dbg !1281
  %add19 = fadd contract double %36, %mul14, !dbg !1281
  store double %add19, double* %arrayidx18, align 8, !dbg !1281
  br label %for.inc, !dbg !1275

for.inc:                                          ; preds = %for.body7
  %37 = load i32, i32* %k, align 4, !dbg !1282
  %inc = add nsw i32 %37, 1, !dbg !1282
  store i32 %inc, i32* %k, align 4, !dbg !1282
  br label %for.cond5, !dbg !1283, !llvm.loop !1284

for.end:                                          ; preds = %for.cond5
  br label %for.inc20, !dbg !1285

for.inc20:                                        ; preds = %for.end
  %38 = load i32, i32* %i, align 4, !dbg !1286
  %inc21 = add nsw i32 %38, 1, !dbg !1286
  store i32 %inc21, i32* %i, align 4, !dbg !1286
  br label %for.cond, !dbg !1287, !llvm.loop !1288

for.end22:                                        ; preds = %for.cond
  br label %if.end, !dbg !1290

if.end:                                           ; preds = %for.end22, %entry
  ret void, !dbg !1291
}

mergeKernel: cudaCall2remove:   %0 = call i32 @llvm.nvvm.read.ptx.sreg.ntid.x() #12, !dbg !1122, !range !1175
mergeKernel: what does I belong to?entrymergeKernel: cudaCall2remove:   %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #12, !dbg !1122, !range !1159
mergeKernel: what does I belong to?entrymergeKernel: cudaCall2remove:   %0 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x() #12, !dbg !1123, !range !1160
mergeKernel: what does I belong to?entryCudaFE: found cudaConfigureCall
mergeKernel: kernelBB: 
kcall.configok9:                                  ; preds = %kcall.end
  %38 = load i32, i32* %n.addr, align 4, !dbg !1171
  %39 = load i32, i32* %m.addr, align 4, !dbg !1172
  %40 = load double, double* %alpha.addr, align 8, !dbg !1173
  %41 = load double*, double** %B.addr, align 8, !dbg !1174
  %42 = load double*, double** %A.addr, align 8, !dbg !1175
  call void @fasten.ll_CudaFE__Z12kernel_alphaiidPdS_(i32 %38, i32 %39, double %40, double* %41, double* %42), !dbg !1170
  br label %kcall.end10, !dbg !1170

mergeKernel: kernel call:   call void @fasten.ll_CudaFE__Z12kernel_alphaiidPdS_(i32 %38, i32 %39, double %40, double* %41, double* %42), !dbg !1170
mergeKernel: kernel call:   call void @fasten.ll_CudaFE__Z12kernel_alphaiidPdS_(i32 %38, i32 %39, double %40, double* %41, double* %42), !dbg !1170
MergeKernel: blocks per grid:
MergeKernel: threads per block:
mergeKernel: found kernelName: _Z12kernel_alphaiidPdS_
MergeKernel: found deviceKernel: 
; Function Attrs: convergent noinline nounwind
define dso_local void @_Z12kernel_alphaiidPdS_(i32 %n, i32 %m, double %alpha, double* %B, double* %A) #0 !dbg !1292 {
entry:
  %n.addr = alloca i32, align 4
  %m.addr = alloca i32, align 4
  %alpha.addr = alloca double, align 8
  %B.addr = alloca double*, align 8
  %A.addr = alloca double*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !1293, metadata !DIExpression()), !dbg !1294
  store i32 %m, i32* %m.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %m.addr, metadata !1295, metadata !DIExpression()), !dbg !1296
  store double %alpha, double* %alpha.addr, align 8
  call void @llvm.dbg.declare(metadata double* %alpha.addr, metadata !1297, metadata !DIExpression()), !dbg !1298
  store double* %B, double** %B.addr, align 8
  call void @llvm.dbg.declare(metadata double** %B.addr, metadata !1299, metadata !DIExpression()), !dbg !1300
  store double* %A, double** %A.addr, align 8
  call void @llvm.dbg.declare(metadata double** %A.addr, metadata !1301, metadata !DIExpression()), !dbg !1302
  call void @llvm.dbg.declare(metadata i32* %i, metadata !1303, metadata !DIExpression()), !dbg !1304
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ntid.x() #12, !dbg !1305, !range !1175
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #12, !dbg !1307, !range !1204
  %mul = mul i32 %0, %1, !dbg !1309
  %2 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x() #12, !dbg !1310, !range !1234
  %add = add i32 %mul, %2, !dbg !1312
  store i32 %add, i32* %i, align 4, !dbg !1304
  call void @llvm.dbg.declare(metadata i32* %j, metadata !1313, metadata !DIExpression()), !dbg !1314
  %3 = call i32 @llvm.nvvm.read.ptx.sreg.ntid.y() #12, !dbg !1315, !range !1175
  %4 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y() #12, !dbg !1318, !range !1204
  %mul5 = mul i32 %3, %4, !dbg !1321
  %5 = call i32 @llvm.nvvm.read.ptx.sreg.tid.y() #12, !dbg !1322, !range !1234
  %add7 = add i32 %mul5, %5, !dbg !1325
  store i32 %add7, i32* %j, align 4, !dbg !1314
  %6 = load i32, i32* %i, align 4, !dbg !1326
  %7 = load i32, i32* %m.addr, align 4, !dbg !1328
  %cmp = icmp slt i32 %6, %7, !dbg !1329
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !1330

land.lhs.true:                                    ; preds = %entry
  %8 = load i32, i32* %j, align 4, !dbg !1331
  %9 = load i32, i32* %n.addr, align 4, !dbg !1332
  %cmp8 = icmp slt i32 %8, %9, !dbg !1333
  br i1 %cmp8, label %if.then, label %if.end, !dbg !1334

if.then:                                          ; preds = %land.lhs.true
  %10 = load double, double* %alpha.addr, align 8, !dbg !1335
  %11 = load double*, double** %B.addr, align 8, !dbg !1336
  %12 = load i32, i32* %i, align 4, !dbg !1337
  %13 = load i32, i32* %n.addr, align 4, !dbg !1338
  %mul9 = mul nsw i32 %12, %13, !dbg !1339
  %14 = load i32, i32* %j, align 4, !dbg !1340
  %add10 = add nsw i32 %mul9, %14, !dbg !1341
  %idxprom = sext i32 %add10 to i64, !dbg !1336
  %arrayidx = getelementptr inbounds double, double* %11, i64 %idxprom, !dbg !1336
  %15 = load double, double* %arrayidx, align 8, !dbg !1342
  %mul11 = fmul contract double %15, %10, !dbg !1342
  store double %mul11, double* %arrayidx, align 8, !dbg !1342
  br label %if.end, !dbg !1336

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  ret void, !dbg !1343
}

MergeKernel: created new Function: 
declare void @_Z12kernel_alphaiidPdS_.2(i32, i32, double, double*, double*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)


; Function Attrs: convergent noinline nounwind
define dso_local void @_Z12kernel_alphaiidPdS_.2(i32 %n, i32 %m, double %alpha, double* %B, double* %A, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32) #0 {
entry:
  %n.addr = alloca i32, align 4
  %m.addr = alloca i32, align 4
  %alpha.addr = alloca double, align 8
  %B.addr = alloca double*, align 8
  %A.addr = alloca double*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !1292, metadata !DIExpression()), !dbg !1294
  store i32 %m, i32* %m.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %m.addr, metadata !1295, metadata !DIExpression()), !dbg !1296
  store double %alpha, double* %alpha.addr, align 8
  call void @llvm.dbg.declare(metadata double* %alpha.addr, metadata !1297, metadata !DIExpression()), !dbg !1298
  store double* %B, double** %B.addr, align 8
  call void @llvm.dbg.declare(metadata double** %B.addr, metadata !1299, metadata !DIExpression()), !dbg !1300
  store double* %A, double** %A.addr, align 8
  call void @llvm.dbg.declare(metadata double** %A.addr, metadata !1301, metadata !DIExpression()), !dbg !1302
  call void @llvm.dbg.declare(metadata i32* %i, metadata !1303, metadata !DIExpression()), !dbg !1304
  %12 = call i32 @llvm.nvvm.read.ptx.sreg.ntid.x() #12, !dbg !1305, !range !1175
  %13 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #12, !dbg !1307, !range !1204
  %mul = mul i32 %12, %13, !dbg !1309
  %14 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x() #12, !dbg !1310, !range !1234
  %add = add i32 %mul, %14, !dbg !1312
  store i32 %add, i32* %i, align 4, !dbg !1304
  call void @llvm.dbg.declare(metadata i32* %j, metadata !1313, metadata !DIExpression()), !dbg !1314
  %15 = call i32 @llvm.nvvm.read.ptx.sreg.ntid.y() #12, !dbg !1315, !range !1175
  %16 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y() #12, !dbg !1318, !range !1204
  %mul5 = mul i32 %15, %16, !dbg !1321
  %17 = call i32 @llvm.nvvm.read.ptx.sreg.tid.y() #12, !dbg !1322, !range !1234
  %add7 = add i32 %mul5, %17, !dbg !1325
  store i32 %add7, i32* %j, align 4, !dbg !1314
  %18 = load i32, i32* %i, align 4, !dbg !1326
  %19 = load i32, i32* %m.addr, align 4, !dbg !1328
  %cmp = icmp slt i32 %18, %19, !dbg !1329
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !1330

land.lhs.true:                                    ; preds = %entry
  %20 = load i32, i32* %j, align 4, !dbg !1331
  %21 = load i32, i32* %n.addr, align 4, !dbg !1332
  %cmp8 = icmp slt i32 %20, %21, !dbg !1333
  br i1 %cmp8, label %if.then, label %if.end, !dbg !1334

if.then:                                          ; preds = %land.lhs.true
  %22 = load double, double* %alpha.addr, align 8, !dbg !1335
  %23 = load double*, double** %B.addr, align 8, !dbg !1336
  %24 = load i32, i32* %i, align 4, !dbg !1337
  %25 = load i32, i32* %n.addr, align 4, !dbg !1338
  %mul9 = mul nsw i32 %24, %25, !dbg !1339
  %26 = load i32, i32* %j, align 4, !dbg !1340
  %add10 = add nsw i32 %mul9, %26, !dbg !1341
  %idxprom = sext i32 %add10 to i64, !dbg !1336
  %arrayidx = getelementptr inbounds double, double* %23, i64 %idxprom, !dbg !1336
  %27 = load double, double* %arrayidx, align 8, !dbg !1342
  %mul11 = fmul contract double %27, %22, !dbg !1342
  store double %mul11, double* %arrayidx, align 8, !dbg !1342
  br label %if.end, !dbg !1336

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  ret void, !dbg !1343
}

mergeKernel: cudaCall2remove:   %0 = call i32 @llvm.nvvm.read.ptx.sreg.ntid.x() #12, !dbg !1122, !range !1175
mergeKernel: what does I belong to?entrymergeKernel: cudaCall2remove:   %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #12, !dbg !1122, !range !1159
mergeKernel: what does I belong to?entrymergeKernel: cudaCall2remove:   %0 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x() #12, !dbg !1123, !range !1160
mergeKernel: what does I belong to?entrymergeKernel: cudaCall2remove:   %0 = call i32 @llvm.nvvm.read.ptx.sreg.ntid.y() #12, !dbg !1126, !range !1179
mergeKernel: what does I belong to?entrymergeKernel: cudaCall2remove:   %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y() #12, !dbg !1126, !range !1163
mergeKernel: what does I belong to?entrymergeKernel: cudaCall2remove:   %0 = call i32 @llvm.nvvm.read.ptx.sreg.tid.y() #12, !dbg !1127, !range !1164
mergeKernel: what does I belong to?entrymergeKernel: create metadata  br i1 %exitCheck.1, label %kcall.configok, label %latch.0, !tulip.doall.loop.block !1128
mergeKernel: create metadata  br i1 %exitCheck.0, label %header.1, label %kcall.end, !tulip.doall.loop.grid !1128
SUSAN: original arg   %13 = load i32, i32* %n.addr, align 4, !dbg !1129
SUSAN: original arg   %14 = load i32, i32* %m.addr, align 4, !dbg !1130
SUSAN: original arg   %15 = load double, double* %alpha.addr, align 8, !dbg !1131
SUSAN: original arg   %16 = load double*, double** %B.addr, align 8, !dbg !1132
SUSAN: original arg   %17 = load double*, double** %A.addr, align 8, !dbg !1133
SUSAN: itnum:   %call = call i32 @_ZL10num_blocksii(i32 %0, i32 256), !dbg !1124
SUSAN: itnum: i32 1
SUSAN: itnum: i32 1
SUSAN: itnum: i32 256
SUSAN: itnum: i32 1
SUSAN: itnum: i32 1
mergeKernel: indvar   %indvar.0 = phi i32 [ 0, %entry ], [ %indvar.next.0, %latch.0 ]
mergeKernel: indvar i32 0
mergeKernel: indvar i32 0
mergeKernel: indvar   %indvar.1 = phi i32 [ 0, %header.0 ], [ %indvar.next.1, %latch.1 ]
mergeKernel: indvar i32 0
mergeKernel: indvar i32 0
void (i32, i32, double, double*, double*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)
mergeKernel: new function kernel Args:   %13 = load i32, i32* %n.addr, align 4, !dbg !1129
mergeKernel: new function kernel Args:   %14 = load i32, i32* %m.addr, align 4, !dbg !1130
mergeKernel: new function kernel Args:   %15 = load double, double* %alpha.addr, align 8, !dbg !1131
mergeKernel: new function kernel Args:   %16 = load double*, double** %B.addr, align 8, !dbg !1132
mergeKernel: new function kernel Args:   %17 = load double*, double** %A.addr, align 8, !dbg !1133
mergeKernel: new function kernel Args:   %call = call i32 @_ZL10num_blocksii(i32 %0, i32 256), !dbg !1124
mergeKernel: new function kernel Args: i32 1
mergeKernel: new function kernel Args: i32 1
mergeKernel: new function kernel Args: i32 256
mergeKernel: new function kernel Args: i32 1
mergeKernel: new function kernel Args: i32 1
mergeKernel: new function kernel Args:   %indvar.0 = phi i32 [ 0, %entry ], [ %indvar.next.0, %latch.0 ]
mergeKernel: new function kernel Args: i32 0
mergeKernel: new function kernel Args: i32 0
mergeKernel: new function kernel Args:   %indvar.1 = phi i32 [ 0, %header.0 ], [ %indvar.next.1, %latch.1 ]
mergeKernel: new function kernel Args: i32 0
mergeKernel: new function kernel Args: i32 0
mergeKernel: create metadata  br i1 %exitCheck.2, label %header.3, label %latch.112, !tulip.doall.loop.block.collapse !1128
mergeKernel: create metadata  br i1 %exitCheck.018, label %header.111, label %kcall.end10, !tulip.doall.loop.grid.collapse !1128
SUSAN: original arg   %38 = load i32, i32* %n.addr, align 4, !dbg !1172
SUSAN: original arg   %39 = load i32, i32* %m.addr, align 4, !dbg !1173
SUSAN: original arg   %40 = load double, double* %alpha.addr, align 8, !dbg !1174
SUSAN: original arg   %41 = load double*, double** %B.addr, align 8, !dbg !1175
SUSAN: original arg   %42 = load double*, double** %A.addr, align 8, !dbg !1176
SUSAN: itnum:   %call3 = call i32 @_ZL10num_blocksii(i32 %18, i32 %19), !dbg !1164
SUSAN: itnum:   %call4 = call i32 @_ZL10num_blocksii(i32 %20, i32 %21), !dbg !1167
SUSAN: itnum: i32 1
SUSAN: itnum: i32 8
SUSAN: itnum: i32 32
SUSAN: itnum: i32 1
mergeKernel: indvar   %indvar.017 = phi i32 [ 0, %kcall.end ], [ %indvar.next.019, %latch.013 ]
mergeKernel: indvar   %indvar.114 = phi i32 [ 0, %header.010 ], [ %indvar.next.116, %latch.112 ]
mergeKernel: indvar i32 0
mergeKernel: indvar   %indvar.2 = phi i32 [ 0, %header.111 ], [ %indvar.next.2, %latch.2 ]
mergeKernel: indvar   %indvar.3 = phi i32 [ 0, %header.2 ], [ %indvar.next.3, %latch.3 ]
mergeKernel: indvar i32 0
void (i32, i32, double, double*, double*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)
mergeKernel: new function kernel Args:   %38 = load i32, i32* %n.addr, align 4, !dbg !1172
mergeKernel: new function kernel Args:   %39 = load i32, i32* %m.addr, align 4, !dbg !1173
mergeKernel: new function kernel Args:   %40 = load double, double* %alpha.addr, align 8, !dbg !1174
mergeKernel: new function kernel Args:   %41 = load double*, double** %B.addr, align 8, !dbg !1175
mergeKernel: new function kernel Args:   %42 = load double*, double** %A.addr, align 8, !dbg !1176
mergeKernel: new function kernel Args:   %call3 = call i32 @_ZL10num_blocksii(i32 %18, i32 %19), !dbg !1164
mergeKernel: new function kernel Args:   %call4 = call i32 @_ZL10num_blocksii(i32 %20, i32 %21), !dbg !1167
mergeKernel: new function kernel Args: i32 1
mergeKernel: new function kernel Args: i32 8
mergeKernel: new function kernel Args: i32 32
mergeKernel: new function kernel Args: i32 1
mergeKernel: new function kernel Args:   %indvar.017 = phi i32 [ 0, %kcall.end ], [ %indvar.next.019, %latch.013 ]
mergeKernel: new function kernel Args:   %indvar.114 = phi i32 [ 0, %header.010 ], [ %indvar.next.116, %latch.112 ]
mergeKernel: new function kernel Args: i32 0
mergeKernel: new function kernel Args:   %indvar.2 = phi i32 [ 0, %header.111 ], [ %indvar.next.2, %latch.2 ]
mergeKernel: new function kernel Args:   %indvar.3 = phi i32 [ 0, %header.2 ], [ %indvar.next.3, %latch.3 ]
mergeKernel: new function kernel Args: i32 0
