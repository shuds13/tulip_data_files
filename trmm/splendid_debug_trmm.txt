CBackend: iterating function 1759: llvm.dbg.declare
CBackend: iterating function 1759: llvm.nvvm.read.ptx.sreg.ntid.x
CBackend: iterating function 1759: llvm.nvvm.read.ptx.sreg.ctaid.x
CBackend: iterating function 1759: llvm.nvvm.read.ptx.sreg.tid.x
CBackend: iterating function 1759: llvm.nvvm.read.ptx.sreg.ntid.y
CBackend: iterating function 1759: llvm.nvvm.read.ptx.sreg.ctaid.y
CBackend: iterating function 1759: llvm.nvvm.read.ptx.sreg.tid.y
CBackend: iterating function 1759: cudaSetupArgument
CBackend: iterating function 1759: cudaLaunch
CBackend: iterating function 1759: main
CBackend: printing function 1770main
=========LOOP PROFILES=========
SUSAN: opnd0  %call4 = call i32 @atoi(i8* %2) #10, !dbg !1120
SUSAN: opnd1i32 1
SUSAN: BB:
entry:
  %alpha = alloca double, align 8
  call void @llvm.dbg.value(metadata i32 %argc, metadata !1110, metadata !DIExpression()), !dbg !1111
  call void @llvm.dbg.value(metadata i8** %argv, metadata !1112, metadata !DIExpression()), !dbg !1111
  %arrayidx = getelementptr inbounds i8*, i8** %argv, i64 2, !dbg !1113
  %0 = load i8*, i8** %arrayidx, align 8, !dbg !1113
  %call = call i32 @atoi(i8* %0) #10, !dbg !1114
  call void @llvm.dbg.value(metadata i32 %call, metadata !1115, metadata !DIExpression()), !dbg !1111
  %arrayidx1 = getelementptr inbounds i8*, i8** %argv, i64 3, !dbg !1116
  %1 = load i8*, i8** %arrayidx1, align 8, !dbg !1116
  %call2 = call i32 @atoi(i8* %1) #10, !dbg !1117
  call void @llvm.dbg.value(metadata i32 %call2, metadata !1118, metadata !DIExpression()), !dbg !1111
  %arrayidx3 = getelementptr inbounds i8*, i8** %argv, i64 1, !dbg !1119
  %2 = load i8*, i8** %arrayidx3, align 8, !dbg !1119
  %call4 = call i32 @atoi(i8* %2) #10, !dbg !1120
  call void @llvm.dbg.value(metadata i32 %call4, metadata !1121, metadata !DIExpression()), !dbg !1111
  call void @llvm.dbg.declare(metadata double* %alpha, metadata !1122, metadata !DIExpression()), !dbg !1123
  %mul = mul nsw i32 %call, %call2, !dbg !1124
  %conv = sext i32 %mul to i64, !dbg !1125
  %mul5 = mul i64 %conv, 8, !dbg !1126, !tulip.target.datasize !1127
  %call6 = call noalias i8* @malloc(i64 %mul5) #11, !dbg !1128, !tulip.target.mapdata.to !1129
  %3 = bitcast i8* %call6 to double*, !dbg !1130
  call void @llvm.dbg.value(metadata double* %3, metadata !1131, metadata !DIExpression()), !dbg !1111
  %mul7 = mul nsw i32 %call2, %call, !dbg !1132
  %conv8 = sext i32 %mul7 to i64, !dbg !1133
  %mul9 = mul i64 %conv8, 8, !dbg !1134, !tulip.target.datasize !1135
  %call10 = call noalias i8* @malloc(i64 %mul9) #11, !dbg !1136, !tulip.target.mapdata.to !1137, !tulip.target.mapdata.from !1139
  %4 = bitcast i8* %call10 to double*, !dbg !1140
  call void @llvm.dbg.value(metadata double* %4, metadata !1141, metadata !DIExpression()), !dbg !1111
  call void @_ZL10init_arrayiiPdS_S_(i32 %call, i32 %call2, double* %alpha, double* %3, double* %4), !dbg !1142
  %5 = bitcast double* %3 to i8*, !dbg !1143
  %6 = bitcast double* %3 to i8*, !dbg !1144
  %mul19 = mul nsw i32 %call, %call2, !dbg !1145
  %conv20 = sext i32 %mul19 to i64, !dbg !1146
  %mul21 = mul i64 %conv20, 8, !dbg !1147
  %call22 = call i32 @cudaMemcpy(i8* %5, i8* %6, i64 %mul21, i32 1), !dbg !1148, !tulip.target.start.of.map !1149
  %7 = load double, double* %alpha, align 8, !dbg !1150
  call void @_ZL6kerneliidPdS_(i32 %call, i32 %call2, double %7, double* %4, double* %3), !dbg !1151
  %8 = bitcast double* %4 to i8*, !dbg !1152
  %9 = bitcast double* %4 to i8*, !dbg !1153
  %mul27 = mul nsw i32 %call2, %call, !dbg !1154
  %conv28 = sext i32 %mul27 to i64, !dbg !1155
  %mul29 = mul i64 %conv28, 8, !dbg !1156
  %call30 = call i32 @cudaMemcpy(i8* %8, i8* %9, i64 %mul29, i32 2), !dbg !1157, !tulip.target.end.of.map !1149
  %cmp = icmp eq i32 %call4, 1, !dbg !1158
  br i1 %cmp, label %if.then, label %if.end, !dbg !1160

SUSAN: BB:
if.then:                                          ; preds = %entry
  call void @_ZL11print_arrayiiPd(i32 %call2, i32 %call, double* %4), !dbg !1161
  br label %if.end, !dbg !1161

SUSAN: BB:
if.end:                                           ; preds = %if.then, %entry
  %10 = bitcast double* %3 to i8*, !dbg !1162
  call void @free(i8* %10) #11, !dbg !1163
  %11 = bitcast double* %4 to i8*, !dbg !1164
  call void @free(i8* %11) #11, !dbg !1165
  ret i32 0, !dbg !1166

SUSAN: entry block is an if-else region! entry
creating if-else region for entryBB: entry
1
1
SUSAN: marking both branches
SUSAN: entry block is a linear region! if.then
CBERegion: including if.then in a linear region
CBERegion: nextBB 
if.then:                                          ; preds = %entry
  call void @_ZL11print_arrayiiPd(i32 %call2, i32 %call, double* %4), !dbg !1161
  br label %if.end, !dbg !1161

SUSAN: currbb 562: if.end
CBERegion: nextEntryBB 121: if.end
=================SUSAN: END OF marking region : entry==================
SUSAN: nextRegionEntryBB if.end
SUSAN: entry block is a linear region! if.end
global: @.str = private unnamed_addr constant [8 x i8] c"%0.2lf \00", align 1
type: [8 x i8]
global: @.str.1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
type: [2 x i8]
SUSAN: CI at 1400:   call void @llvm.dbg.value(metadata i32 %argc, metadata !1110, metadata !DIExpression()), !dbg !1111
SUSAN: CI at 1400:   call void @llvm.dbg.value(metadata i8** %argv, metadata !1112, metadata !DIExpression()), !dbg !1111
SUSAN: CI at 1400:   %call = call i32 @atoi(i8* %0) #10, !dbg !1114
SUSAN: CI at 1400:   call void @llvm.dbg.value(metadata i32 %call, metadata !1115, metadata !DIExpression()), !dbg !1111
SUSAN: CI at 1400:   %call2 = call i32 @atoi(i8* %1) #10, !dbg !1117
SUSAN: CI at 1400:   call void @llvm.dbg.value(metadata i32 %call2, metadata !1118, metadata !DIExpression()), !dbg !1111
SUSAN: CI at 1400:   %call4 = call i32 @atoi(i8* %2) #10, !dbg !1120
SUSAN: CI at 1400:   call void @llvm.dbg.value(metadata i32 %call4, metadata !1121, metadata !DIExpression()), !dbg !1111
SUSAN: CI at 1400:   call void @llvm.dbg.declare(metadata double* %alpha, metadata !1122, metadata !DIExpression()), !dbg !1123
SUSAN: CI at 1400:   %call6 = call noalias i8* @malloc(i64 %mul5) #11, !dbg !1128, !tulip.target.mapdata.to !1129
SUSAN: found malloc 1403:   %call6 = call noalias i8* @malloc(i64 %mul5) #11, !dbg !1128, !tulip.target.mapdata.to !1129
SUSAN: CI at 1400:   call void @llvm.dbg.value(metadata double* %3, metadata !1131, metadata !DIExpression()), !dbg !1111
SUSAN: CI at 1400:   %call10 = call noalias i8* @malloc(i64 %mul9) #11, !dbg !1136, !tulip.target.mapdata.to !1137, !tulip.target.mapdata.from !1139
SUSAN: found malloc 1403:   %call10 = call noalias i8* @malloc(i64 %mul9) #11, !dbg !1136, !tulip.target.mapdata.to !1137, !tulip.target.mapdata.from !1139
SUSAN: CI at 1400:   call void @llvm.dbg.value(metadata double* %4, metadata !1141, metadata !DIExpression()), !dbg !1111
SUSAN: CI at 1400:   call void @_ZL10init_arrayiiPdS_S_(i32 %call, i32 %call2, double* %alpha, double* %3, double* %4), !dbg !1142
SUSAN: CI at 1400:   %call22 = call i32 @cudaMemcpy(i8* %5, i8* %6, i64 %mul21, i32 1), !dbg !1148, !tulip.target.start.of.map !1149
SUSAN: CI at 1400:   call void @_ZL6kerneliidPdS_(i32 %call, i32 %call2, double %7, double* %4, double* %3), !dbg !1151
SUSAN: CI at 1400:   %call30 = call i32 @cudaMemcpy(i8* %8, i8* %9, i64 %mul29, i32 2), !dbg !1157, !tulip.target.end.of.map !1149
SUSAN: CI at 1400:   call void @_ZL11print_arrayiiPd(i32 %call2, i32 %call, double* %4), !dbg !1161
SUSAN: CI at 1400:   call void @free(i8* %10) #11, !dbg !1163
SUSAN: CI at 1400:   call void @free(i8* %11) #11, !dbg !1165
========== IV MAP==========
currInst :  %arrayidx = getelementptr inbounds i8*, i8** %argv, i64 2, !dbg !1113
currInst :  %0 = load i8*, i8** %arrayidx, align 8, !dbg !1113
currInst :  %call = call i32 @atoi(i8* %0) #10, !dbg !1114
currInst :  %0 = load i8*, i8** %arrayidx, align 8, !dbg !1113
currInst :  %call = call i32 @atoi(i8* %0) #10, !dbg !1114
currInst :  %arrayidx1 = getelementptr inbounds i8*, i8** %argv, i64 3, !dbg !1116
currInst :  %1 = load i8*, i8** %arrayidx1, align 8, !dbg !1116
currInst :  %call2 = call i32 @atoi(i8* %1) #10, !dbg !1117
currInst :  %1 = load i8*, i8** %arrayidx1, align 8, !dbg !1116
currInst :  %call2 = call i32 @atoi(i8* %1) #10, !dbg !1117
currInst :  %arrayidx3 = getelementptr inbounds i8*, i8** %argv, i64 1, !dbg !1119
currInst :  %2 = load i8*, i8** %arrayidx3, align 8, !dbg !1119
currInst :  %call4 = call i32 @atoi(i8* %2) #10, !dbg !1120
currInst :  %2 = load i8*, i8** %arrayidx3, align 8, !dbg !1119
currInst :  %call4 = call i32 @atoi(i8* %2) #10, !dbg !1120
currInst :  %mul = mul nsw i32 %call, %call2, !dbg !1124
currInst :  %conv = sext i32 %mul to i64, !dbg !1125
currInst :  %mul5 = mul i64 %conv, 8, !dbg !1126, !tulip.target.datasize !1127
currInst :  %call6 = call noalias i8* @malloc(i64 %mul5) #11, !dbg !1128, !tulip.target.mapdata.to !1129
currInst :  %conv = sext i32 %mul to i64, !dbg !1125
currInst :  %mul5 = mul i64 %conv, 8, !dbg !1126, !tulip.target.datasize !1127
currInst :  %call6 = call noalias i8* @malloc(i64 %mul5) #11, !dbg !1128, !tulip.target.mapdata.to !1129
currInst :  %mul5 = mul i64 %conv, 8, !dbg !1126, !tulip.target.datasize !1127
currInst :  %call6 = call noalias i8* @malloc(i64 %mul5) #11, !dbg !1128, !tulip.target.mapdata.to !1129
currInst :  %3 = bitcast i8* %call6 to double*, !dbg !1130
currInst :  call void @_ZL10init_arrayiiPdS_S_(i32 %call, i32 %call2, double* %alpha, double* %3, double* %4), !dbg !1142
currInst :  %mul7 = mul nsw i32 %call2, %call, !dbg !1132
currInst :  %conv8 = sext i32 %mul7 to i64, !dbg !1133
currInst :  %mul9 = mul i64 %conv8, 8, !dbg !1134, !tulip.target.datasize !1135
currInst :  %call10 = call noalias i8* @malloc(i64 %mul9) #11, !dbg !1136, !tulip.target.mapdata.to !1137, !tulip.target.mapdata.from !1139
currInst :  %conv8 = sext i32 %mul7 to i64, !dbg !1133
currInst :  %mul9 = mul i64 %conv8, 8, !dbg !1134, !tulip.target.datasize !1135
currInst :  %call10 = call noalias i8* @malloc(i64 %mul9) #11, !dbg !1136, !tulip.target.mapdata.to !1137, !tulip.target.mapdata.from !1139
currInst :  %mul9 = mul i64 %conv8, 8, !dbg !1134, !tulip.target.datasize !1135
currInst :  %call10 = call noalias i8* @malloc(i64 %mul9) #11, !dbg !1136, !tulip.target.mapdata.to !1137, !tulip.target.mapdata.from !1139
currInst :  %4 = bitcast i8* %call10 to double*, !dbg !1140
currInst :  %9 = bitcast double* %4 to i8*, !dbg !1153
currInst :  call void @_ZL6kerneliidPdS_(i32 %call, i32 %call2, double %7, double* %4, double* %3), !dbg !1151
currInst :  %5 = bitcast double* %3 to i8*, !dbg !1143
currInst :  %call22 = call i32 @cudaMemcpy(i8* %5, i8* %6, i64 %mul21, i32 1), !dbg !1148, !tulip.target.start.of.map !1149
currInst :  %6 = bitcast double* %3 to i8*, !dbg !1144
currInst :  %call22 = call i32 @cudaMemcpy(i8* %5, i8* %6, i64 %mul21, i32 1), !dbg !1148, !tulip.target.start.of.map !1149
currInst :  %mul19 = mul nsw i32 %call, %call2, !dbg !1145
currInst :  %conv20 = sext i32 %mul19 to i64, !dbg !1146
currInst :  %mul21 = mul i64 %conv20, 8, !dbg !1147
currInst :  %call22 = call i32 @cudaMemcpy(i8* %5, i8* %6, i64 %mul21, i32 1), !dbg !1148, !tulip.target.start.of.map !1149
currInst :  %conv20 = sext i32 %mul19 to i64, !dbg !1146
currInst :  %mul21 = mul i64 %conv20, 8, !dbg !1147
currInst :  %call22 = call i32 @cudaMemcpy(i8* %5, i8* %6, i64 %mul21, i32 1), !dbg !1148, !tulip.target.start.of.map !1149
currInst :  %mul21 = mul i64 %conv20, 8, !dbg !1147
currInst :  %call22 = call i32 @cudaMemcpy(i8* %5, i8* %6, i64 %mul21, i32 1), !dbg !1148, !tulip.target.start.of.map !1149
currInst :  %7 = load double, double* %alpha, align 8, !dbg !1150
currInst :  call void @_ZL6kerneliidPdS_(i32 %call, i32 %call2, double %7, double* %4, double* %3), !dbg !1151
currInst :  %8 = bitcast double* %4 to i8*, !dbg !1152
currInst :  %call30 = call i32 @cudaMemcpy(i8* %8, i8* %9, i64 %mul29, i32 2), !dbg !1157, !tulip.target.end.of.map !1149
currInst :  %9 = bitcast double* %4 to i8*, !dbg !1153
currInst :  %call30 = call i32 @cudaMemcpy(i8* %8, i8* %9, i64 %mul29, i32 2), !dbg !1157, !tulip.target.end.of.map !1149
currInst :  %mul27 = mul nsw i32 %call2, %call, !dbg !1154
currInst :  %conv28 = sext i32 %mul27 to i64, !dbg !1155
currInst :  %mul29 = mul i64 %conv28, 8, !dbg !1156
currInst :  %call30 = call i32 @cudaMemcpy(i8* %8, i8* %9, i64 %mul29, i32 2), !dbg !1157, !tulip.target.end.of.map !1149
currInst :  %conv28 = sext i32 %mul27 to i64, !dbg !1155
currInst :  %mul29 = mul i64 %conv28, 8, !dbg !1156
currInst :  %call30 = call i32 @cudaMemcpy(i8* %8, i8* %9, i64 %mul29, i32 2), !dbg !1157, !tulip.target.end.of.map !1149
currInst :  %mul29 = mul i64 %conv28, 8, !dbg !1156
currInst :  %call30 = call i32 @cudaMemcpy(i8* %8, i8* %9, i64 %mul29, i32 2), !dbg !1157, !tulip.target.end.of.map !1149
currInst :  %cmp = icmp eq i32 %call4, 1, !dbg !1158
currInst :  br i1 %cmp, label %if.then, label %if.end, !dbg !1160
currInst :  %10 = bitcast double* %3 to i8*, !dbg !1162
currInst :  call void @free(i8* %10) #11, !dbg !1163
currInst :  %11 = bitcast double* %4 to i8*, !dbg !1164
currInst :  call void @free(i8* %11) #11, !dbg !1165
SUSAN: found double mallocs! 
malloc:  %call6 = call noalias i8* @malloc(i64 %mul5) #11, !dbg !1128, !tulip.target.mapdata.to !1129
castInst:   %3 = bitcast i8* %call6 to double*, !dbg !1130
SUSAN: found double mallocs! 
malloc:  %call10 = call noalias i8* @malloc(i64 %mul9) #11, !dbg !1136, !tulip.target.mapdata.to !1137, !tulip.target.mapdata.from !1139
castInst:   %4 = bitcast i8* %call10 to double*, !dbg !1140
SUSAN: getting value name for: 
; Function Attrs: noinline norecurse uwtable
define dso_local i32 @main(i32 %argc, i8** %argv) #2 !dbg !1107 {
entry:
  %alpha = alloca double, align 8
  call void @llvm.dbg.value(metadata i32 %argc, metadata !1110, metadata !DIExpression()), !dbg !1111
  call void @llvm.dbg.value(metadata i8** %argv, metadata !1112, metadata !DIExpression()), !dbg !1111
  %arrayidx = getelementptr inbounds i8*, i8** %argv, i64 2, !dbg !1113
  %0 = load i8*, i8** %arrayidx, align 8, !dbg !1113
  %call = call i32 @atoi(i8* %0) #10, !dbg !1114
  call void @llvm.dbg.value(metadata i32 %call, metadata !1115, metadata !DIExpression()), !dbg !1111
  %arrayidx1 = getelementptr inbounds i8*, i8** %argv, i64 3, !dbg !1116
  %1 = load i8*, i8** %arrayidx1, align 8, !dbg !1116
  %call2 = call i32 @atoi(i8* %1) #10, !dbg !1117
  call void @llvm.dbg.value(metadata i32 %call2, metadata !1118, metadata !DIExpression()), !dbg !1111
  %arrayidx3 = getelementptr inbounds i8*, i8** %argv, i64 1, !dbg !1119
  %2 = load i8*, i8** %arrayidx3, align 8, !dbg !1119
  %call4 = call i32 @atoi(i8* %2) #10, !dbg !1120
  call void @llvm.dbg.value(metadata i32 %call4, metadata !1121, metadata !DIExpression()), !dbg !1111
  call void @llvm.dbg.declare(metadata double* %alpha, metadata !1122, metadata !DIExpression()), !dbg !1123
  %mul = mul nsw i32 %call, %call2, !dbg !1124
  %conv = sext i32 %mul to i64, !dbg !1125
  %mul5 = mul i64 %conv, 8, !dbg !1126, !tulip.target.datasize !1127
  %call6 = call noalias i8* @malloc(i64 %mul5) #11, !dbg !1128, !tulip.target.mapdata.to !1129
  %3 = bitcast i8* %call6 to double*, !dbg !1130
  call void @llvm.dbg.value(metadata double* %3, metadata !1131, metadata !DIExpression()), !dbg !1111
  %mul7 = mul nsw i32 %call2, %call, !dbg !1132
  %conv8 = sext i32 %mul7 to i64, !dbg !1133
  %mul9 = mul i64 %conv8, 8, !dbg !1134, !tulip.target.datasize !1135
  %call10 = call noalias i8* @malloc(i64 %mul9) #11, !dbg !1136, !tulip.target.mapdata.to !1137, !tulip.target.mapdata.from !1139
  %4 = bitcast i8* %call10 to double*, !dbg !1140
  call void @llvm.dbg.value(metadata double* %4, metadata !1141, metadata !DIExpression()), !dbg !1111
  call void @_ZL10init_arrayiiPdS_S_(i32 %call, i32 %call2, double* %alpha, double* %3, double* %4), !dbg !1142
  %5 = bitcast double* %3 to i8*, !dbg !1143
  %6 = bitcast double* %3 to i8*, !dbg !1144
  %mul19 = mul nsw i32 %call, %call2, !dbg !1145
  %conv20 = sext i32 %mul19 to i64, !dbg !1146
  %mul21 = mul i64 %conv20, 8, !dbg !1147
  %call22 = call i32 @cudaMemcpy(i8* %5, i8* %6, i64 %mul21, i32 1), !dbg !1148, !tulip.target.start.of.map !1149
  %7 = load double, double* %alpha, align 8, !dbg !1150
  call void @_ZL6kerneliidPdS_(i32 %call, i32 %call2, double %7, double* %4, double* %3), !dbg !1151
  %8 = bitcast double* %4 to i8*, !dbg !1152
  %9 = bitcast double* %4 to i8*, !dbg !1153
  %mul27 = mul nsw i32 %call2, %call, !dbg !1154
  %conv28 = sext i32 %mul27 to i64, !dbg !1155
  %mul29 = mul i64 %conv28, 8, !dbg !1156
  %call30 = call i32 @cudaMemcpy(i8* %8, i8* %9, i64 %mul29, i32 2), !dbg !1157, !tulip.target.end.of.map !1149
  %cmp = icmp eq i32 %call4, 1, !dbg !1158
  br i1 %cmp, label %if.then, label %if.end, !dbg !1160

if.then:                                          ; preds = %entry
  call void @_ZL11print_arrayiiPd(i32 %call2, i32 %call, double* %4), !dbg !1161
  br label %if.end, !dbg !1161

if.end:                                           ; preds = %if.then, %entry
  %10 = bitcast double* %3 to i8*, !dbg !1162
  call void @free(i8* %10) #11, !dbg !1163
  %11 = bitcast double* %4 to i8*, !dbg !1164
  call void @free(i8* %11) #11, !dbg !1165
  ret i32 0, !dbg !1166
}

SUSAN: found argument 6346: i32 %argc
CBackend: varname: argc
  call void @llvm.dbg.value(metadata i32 %argc, metadata !1110, metadata !DIExpression()), !dbg !1111
SUSAN: found argument 6346: i8** %argv
CBackend: varname: argv
  call void @llvm.dbg.value(metadata i8** %argv, metadata !1112, metadata !DIExpression()), !dbg !1111
=========================SUSAN: IR NAMING BEFORE=====================
  %alpha = alloca double, align 8 -> alpha
i32 %argc -> argc
i8** %argv -> argv
  %call = call i32 @atoi(i8* %0) #10, !dbg !1114 -> n
  %call2 = call i32 @atoi(i8* %1) #10, !dbg !1117 -> m
  %call4 = call i32 @atoi(i8* %2) #10, !dbg !1120 -> dump_code
  %call6 = call noalias i8* @malloc(i64 %mul5) #11, !dbg !1128, !tulip.target.mapdata.to !1129 -> A
  %call10 = call noalias i8* @malloc(i64 %mul9) #11, !dbg !1136, !tulip.target.mapdata.to !1137, !tulip.target.mapdata.from !1139 -> B
SUSAN: inst:  call void @_ZL6kerneliidPdS_(i32 %call, i32 %call2, double %7, double* %4, double* %3), !dbg !1151
A:  %call6 = call noalias i8* @malloc(i64 %mul5) #11, !dbg !1128, !tulip.target.mapdata.to !1129
B:  %call10 = call noalias i8* @malloc(i64 %mul9) #11, !dbg !1136, !tulip.target.mapdata.to !1137, !tulip.target.mapdata.from !1139
alpha:  %alpha = alloca double, align 8
dump_code:  %call4 = call i32 @atoi(i8* %2) #10, !dbg !1120
m:  %call2 = call i32 @atoi(i8* %1) #10, !dbg !1117
n:  %call = call i32 @atoi(i8* %0) #10, !dbg !1114
SUSAN: inst:  %call22 = call i32 @cudaMemcpy(i8* %5, i8* %6, i64 %mul21, i32 1), !dbg !1148, !tulip.target.start.of.map !1149
A:  %call6 = call noalias i8* @malloc(i64 %mul5) #11, !dbg !1128, !tulip.target.mapdata.to !1129
B:  %call10 = call noalias i8* @malloc(i64 %mul9) #11, !dbg !1136, !tulip.target.mapdata.to !1137, !tulip.target.mapdata.from !1139
alpha:  %alpha = alloca double, align 8
dump_code:  %call4 = call i32 @atoi(i8* %2) #10, !dbg !1120
m:  %call2 = call i32 @atoi(i8* %1) #10, !dbg !1117
n:  %call = call i32 @atoi(i8* %0) #10, !dbg !1114
SUSAN: inst:  %alpha = alloca double, align 8
alpha:  %alpha = alloca double, align 8
SUSAN: inst:  call void @_ZL10init_arrayiiPdS_S_(i32 %call, i32 %call2, double* %alpha, double* %3, double* %4), !dbg !1142
A:  %call6 = call noalias i8* @malloc(i64 %mul5) #11, !dbg !1128, !tulip.target.mapdata.to !1129
B:  %call10 = call noalias i8* @malloc(i64 %mul9) #11, !dbg !1136, !tulip.target.mapdata.to !1137, !tulip.target.mapdata.from !1139
alpha:  %alpha = alloca double, align 8
dump_code:  %call4 = call i32 @atoi(i8* %2) #10, !dbg !1120
m:  %call2 = call i32 @atoi(i8* %1) #10, !dbg !1117
n:  %call = call i32 @atoi(i8* %0) #10, !dbg !1114
SUSAN: inst:  call void @llvm.dbg.value(metadata i32 %argc, metadata !1110, metadata !DIExpression()), !dbg !1111
alpha:  %alpha = alloca double, align 8
SUSAN: inst:  call void @llvm.dbg.value(metadata i8** %argv, metadata !1112, metadata !DIExpression()), !dbg !1111
alpha:  %alpha = alloca double, align 8
SUSAN: inst:  %arrayidx = getelementptr inbounds i8*, i8** %argv, i64 2, !dbg !1113
alpha:  %alpha = alloca double, align 8
SUSAN: inst:  %0 = load i8*, i8** %arrayidx, align 8, !dbg !1113
alpha:  %alpha = alloca double, align 8
SUSAN: inst:  %call = call i32 @atoi(i8* %0) #10, !dbg !1114
alpha:  %alpha = alloca double, align 8
n:  %call = call i32 @atoi(i8* %0) #10, !dbg !1114
SUSAN: inst:  call void @llvm.dbg.value(metadata i32 %call, metadata !1115, metadata !DIExpression()), !dbg !1111
alpha:  %alpha = alloca double, align 8
n:  %call = call i32 @atoi(i8* %0) #10, !dbg !1114
SUSAN: inst:  %arrayidx1 = getelementptr inbounds i8*, i8** %argv, i64 3, !dbg !1116
alpha:  %alpha = alloca double, align 8
n:  %call = call i32 @atoi(i8* %0) #10, !dbg !1114
SUSAN: inst:  %1 = load i8*, i8** %arrayidx1, align 8, !dbg !1116
alpha:  %alpha = alloca double, align 8
n:  %call = call i32 @atoi(i8* %0) #10, !dbg !1114
SUSAN: inst:  %call2 = call i32 @atoi(i8* %1) #10, !dbg !1117
alpha:  %alpha = alloca double, align 8
m:  %call2 = call i32 @atoi(i8* %1) #10, !dbg !1117
n:  %call = call i32 @atoi(i8* %0) #10, !dbg !1114
SUSAN: inst:  call void @llvm.dbg.value(metadata i32 %call2, metadata !1118, metadata !DIExpression()), !dbg !1111
alpha:  %alpha = alloca double, align 8
m:  %call2 = call i32 @atoi(i8* %1) #10, !dbg !1117
n:  %call = call i32 @atoi(i8* %0) #10, !dbg !1114
SUSAN: inst:  %arrayidx3 = getelementptr inbounds i8*, i8** %argv, i64 1, !dbg !1119
alpha:  %alpha = alloca double, align 8
m:  %call2 = call i32 @atoi(i8* %1) #10, !dbg !1117
n:  %call = call i32 @atoi(i8* %0) #10, !dbg !1114
SUSAN: inst:  %2 = load i8*, i8** %arrayidx3, align 8, !dbg !1119
alpha:  %alpha = alloca double, align 8
m:  %call2 = call i32 @atoi(i8* %1) #10, !dbg !1117
n:  %call = call i32 @atoi(i8* %0) #10, !dbg !1114
SUSAN: inst:  %call4 = call i32 @atoi(i8* %2) #10, !dbg !1120
alpha:  %alpha = alloca double, align 8
dump_code:  %call4 = call i32 @atoi(i8* %2) #10, !dbg !1120
m:  %call2 = call i32 @atoi(i8* %1) #10, !dbg !1117
n:  %call = call i32 @atoi(i8* %0) #10, !dbg !1114
SUSAN: inst:  call void @llvm.dbg.value(metadata i32 %call4, metadata !1121, metadata !DIExpression()), !dbg !1111
alpha:  %alpha = alloca double, align 8
dump_code:  %call4 = call i32 @atoi(i8* %2) #10, !dbg !1120
m:  %call2 = call i32 @atoi(i8* %1) #10, !dbg !1117
n:  %call = call i32 @atoi(i8* %0) #10, !dbg !1114
SUSAN: inst:  call void @llvm.dbg.declare(metadata double* %alpha, metadata !1122, metadata !DIExpression()), !dbg !1123
alpha:  %alpha = alloca double, align 8
dump_code:  %call4 = call i32 @atoi(i8* %2) #10, !dbg !1120
m:  %call2 = call i32 @atoi(i8* %1) #10, !dbg !1117
n:  %call = call i32 @atoi(i8* %0) #10, !dbg !1114
SUSAN: inst:  %mul = mul nsw i32 %call, %call2, !dbg !1124
alpha:  %alpha = alloca double, align 8
dump_code:  %call4 = call i32 @atoi(i8* %2) #10, !dbg !1120
m:  %call2 = call i32 @atoi(i8* %1) #10, !dbg !1117
n:  %call = call i32 @atoi(i8* %0) #10, !dbg !1114
SUSAN: inst:  %conv = sext i32 %mul to i64, !dbg !1125
alpha:  %alpha = alloca double, align 8
dump_code:  %call4 = call i32 @atoi(i8* %2) #10, !dbg !1120
m:  %call2 = call i32 @atoi(i8* %1) #10, !dbg !1117
n:  %call = call i32 @atoi(i8* %0) #10, !dbg !1114
SUSAN: inst:  %mul5 = mul i64 %conv, 8, !dbg !1126, !tulip.target.datasize !1127
alpha:  %alpha = alloca double, align 8
dump_code:  %call4 = call i32 @atoi(i8* %2) #10, !dbg !1120
m:  %call2 = call i32 @atoi(i8* %1) #10, !dbg !1117
n:  %call = call i32 @atoi(i8* %0) #10, !dbg !1114
SUSAN: inst:  %call6 = call noalias i8* @malloc(i64 %mul5) #11, !dbg !1128, !tulip.target.mapdata.to !1129
A:  %call6 = call noalias i8* @malloc(i64 %mul5) #11, !dbg !1128, !tulip.target.mapdata.to !1129
alpha:  %alpha = alloca double, align 8
dump_code:  %call4 = call i32 @atoi(i8* %2) #10, !dbg !1120
m:  %call2 = call i32 @atoi(i8* %1) #10, !dbg !1117
n:  %call = call i32 @atoi(i8* %0) #10, !dbg !1114
SUSAN: inst:  %3 = bitcast i8* %call6 to double*, !dbg !1130
A:  %call6 = call noalias i8* @malloc(i64 %mul5) #11, !dbg !1128, !tulip.target.mapdata.to !1129
alpha:  %alpha = alloca double, align 8
dump_code:  %call4 = call i32 @atoi(i8* %2) #10, !dbg !1120
m:  %call2 = call i32 @atoi(i8* %1) #10, !dbg !1117
n:  %call = call i32 @atoi(i8* %0) #10, !dbg !1114
SUSAN: inst:  call void @llvm.dbg.value(metadata double* %3, metadata !1131, metadata !DIExpression()), !dbg !1111
A:  %call6 = call noalias i8* @malloc(i64 %mul5) #11, !dbg !1128, !tulip.target.mapdata.to !1129
alpha:  %alpha = alloca double, align 8
dump_code:  %call4 = call i32 @atoi(i8* %2) #10, !dbg !1120
m:  %call2 = call i32 @atoi(i8* %1) #10, !dbg !1117
n:  %call = call i32 @atoi(i8* %0) #10, !dbg !1114
SUSAN: inst:  %mul7 = mul nsw i32 %call2, %call, !dbg !1132
A:  %call6 = call noalias i8* @malloc(i64 %mul5) #11, !dbg !1128, !tulip.target.mapdata.to !1129
alpha:  %alpha = alloca double, align 8
dump_code:  %call4 = call i32 @atoi(i8* %2) #10, !dbg !1120
m:  %call2 = call i32 @atoi(i8* %1) #10, !dbg !1117
n:  %call = call i32 @atoi(i8* %0) #10, !dbg !1114
SUSAN: inst:  %conv8 = sext i32 %mul7 to i64, !dbg !1133
A:  %call6 = call noalias i8* @malloc(i64 %mul5) #11, !dbg !1128, !tulip.target.mapdata.to !1129
alpha:  %alpha = alloca double, align 8
dump_code:  %call4 = call i32 @atoi(i8* %2) #10, !dbg !1120
m:  %call2 = call i32 @atoi(i8* %1) #10, !dbg !1117
n:  %call = call i32 @atoi(i8* %0) #10, !dbg !1114
SUSAN: inst:  %mul9 = mul i64 %conv8, 8, !dbg !1134, !tulip.target.datasize !1135
A:  %call6 = call noalias i8* @malloc(i64 %mul5) #11, !dbg !1128, !tulip.target.mapdata.to !1129
alpha:  %alpha = alloca double, align 8
dump_code:  %call4 = call i32 @atoi(i8* %2) #10, !dbg !1120
m:  %call2 = call i32 @atoi(i8* %1) #10, !dbg !1117
n:  %call = call i32 @atoi(i8* %0) #10, !dbg !1114
SUSAN: inst:  %call10 = call noalias i8* @malloc(i64 %mul9) #11, !dbg !1136, !tulip.target.mapdata.to !1137, !tulip.target.mapdata.from !1139
A:  %call6 = call noalias i8* @malloc(i64 %mul5) #11, !dbg !1128, !tulip.target.mapdata.to !1129
B:  %call10 = call noalias i8* @malloc(i64 %mul9) #11, !dbg !1136, !tulip.target.mapdata.to !1137, !tulip.target.mapdata.from !1139
alpha:  %alpha = alloca double, align 8
dump_code:  %call4 = call i32 @atoi(i8* %2) #10, !dbg !1120
m:  %call2 = call i32 @atoi(i8* %1) #10, !dbg !1117
n:  %call = call i32 @atoi(i8* %0) #10, !dbg !1114
SUSAN: inst:  %4 = bitcast i8* %call10 to double*, !dbg !1140
A:  %call6 = call noalias i8* @malloc(i64 %mul5) #11, !dbg !1128, !tulip.target.mapdata.to !1129
B:  %call10 = call noalias i8* @malloc(i64 %mul9) #11, !dbg !1136, !tulip.target.mapdata.to !1137, !tulip.target.mapdata.from !1139
alpha:  %alpha = alloca double, align 8
dump_code:  %call4 = call i32 @atoi(i8* %2) #10, !dbg !1120
m:  %call2 = call i32 @atoi(i8* %1) #10, !dbg !1117
n:  %call = call i32 @atoi(i8* %0) #10, !dbg !1114
SUSAN: inst:  call void @llvm.dbg.value(metadata double* %4, metadata !1141, metadata !DIExpression()), !dbg !1111
A:  %call6 = call noalias i8* @malloc(i64 %mul5) #11, !dbg !1128, !tulip.target.mapdata.to !1129
B:  %call10 = call noalias i8* @malloc(i64 %mul9) #11, !dbg !1136, !tulip.target.mapdata.to !1137, !tulip.target.mapdata.from !1139
alpha:  %alpha = alloca double, align 8
dump_code:  %call4 = call i32 @atoi(i8* %2) #10, !dbg !1120
m:  %call2 = call i32 @atoi(i8* %1) #10, !dbg !1117
n:  %call = call i32 @atoi(i8* %0) #10, !dbg !1114
SUSAN: inst:  %5 = bitcast double* %3 to i8*, !dbg !1143
A:  %call6 = call noalias i8* @malloc(i64 %mul5) #11, !dbg !1128, !tulip.target.mapdata.to !1129
B:  %call10 = call noalias i8* @malloc(i64 %mul9) #11, !dbg !1136, !tulip.target.mapdata.to !1137, !tulip.target.mapdata.from !1139
alpha:  %alpha = alloca double, align 8
dump_code:  %call4 = call i32 @atoi(i8* %2) #10, !dbg !1120
m:  %call2 = call i32 @atoi(i8* %1) #10, !dbg !1117
n:  %call = call i32 @atoi(i8* %0) #10, !dbg !1114
SUSAN: inst:  %6 = bitcast double* %3 to i8*, !dbg !1144
A:  %call6 = call noalias i8* @malloc(i64 %mul5) #11, !dbg !1128, !tulip.target.mapdata.to !1129
B:  %call10 = call noalias i8* @malloc(i64 %mul9) #11, !dbg !1136, !tulip.target.mapdata.to !1137, !tulip.target.mapdata.from !1139
alpha:  %alpha = alloca double, align 8
dump_code:  %call4 = call i32 @atoi(i8* %2) #10, !dbg !1120
m:  %call2 = call i32 @atoi(i8* %1) #10, !dbg !1117
n:  %call = call i32 @atoi(i8* %0) #10, !dbg !1114
SUSAN: inst:  %mul19 = mul nsw i32 %call, %call2, !dbg !1145
A:  %call6 = call noalias i8* @malloc(i64 %mul5) #11, !dbg !1128, !tulip.target.mapdata.to !1129
B:  %call10 = call noalias i8* @malloc(i64 %mul9) #11, !dbg !1136, !tulip.target.mapdata.to !1137, !tulip.target.mapdata.from !1139
alpha:  %alpha = alloca double, align 8
dump_code:  %call4 = call i32 @atoi(i8* %2) #10, !dbg !1120
m:  %call2 = call i32 @atoi(i8* %1) #10, !dbg !1117
n:  %call = call i32 @atoi(i8* %0) #10, !dbg !1114
SUSAN: inst:  %conv20 = sext i32 %mul19 to i64, !dbg !1146
A:  %call6 = call noalias i8* @malloc(i64 %mul5) #11, !dbg !1128, !tulip.target.mapdata.to !1129
B:  %call10 = call noalias i8* @malloc(i64 %mul9) #11, !dbg !1136, !tulip.target.mapdata.to !1137, !tulip.target.mapdata.from !1139
alpha:  %alpha = alloca double, align 8
dump_code:  %call4 = call i32 @atoi(i8* %2) #10, !dbg !1120
m:  %call2 = call i32 @atoi(i8* %1) #10, !dbg !1117
n:  %call = call i32 @atoi(i8* %0) #10, !dbg !1114
SUSAN: inst:  %mul21 = mul i64 %conv20, 8, !dbg !1147
A:  %call6 = call noalias i8* @malloc(i64 %mul5) #11, !dbg !1128, !tulip.target.mapdata.to !1129
B:  %call10 = call noalias i8* @malloc(i64 %mul9) #11, !dbg !1136, !tulip.target.mapdata.to !1137, !tulip.target.mapdata.from !1139
alpha:  %alpha = alloca double, align 8
dump_code:  %call4 = call i32 @atoi(i8* %2) #10, !dbg !1120
m:  %call2 = call i32 @atoi(i8* %1) #10, !dbg !1117
n:  %call = call i32 @atoi(i8* %0) #10, !dbg !1114
SUSAN: inst:  %7 = load double, double* %alpha, align 8, !dbg !1150
A:  %call6 = call noalias i8* @malloc(i64 %mul5) #11, !dbg !1128, !tulip.target.mapdata.to !1129
B:  %call10 = call noalias i8* @malloc(i64 %mul9) #11, !dbg !1136, !tulip.target.mapdata.to !1137, !tulip.target.mapdata.from !1139
alpha:  %alpha = alloca double, align 8
dump_code:  %call4 = call i32 @atoi(i8* %2) #10, !dbg !1120
m:  %call2 = call i32 @atoi(i8* %1) #10, !dbg !1117
n:  %call = call i32 @atoi(i8* %0) #10, !dbg !1114
SUSAN: inst:  %8 = bitcast double* %4 to i8*, !dbg !1152
A:  %call6 = call noalias i8* @malloc(i64 %mul5) #11, !dbg !1128, !tulip.target.mapdata.to !1129
B:  %call10 = call noalias i8* @malloc(i64 %mul9) #11, !dbg !1136, !tulip.target.mapdata.to !1137, !tulip.target.mapdata.from !1139
alpha:  %alpha = alloca double, align 8
dump_code:  %call4 = call i32 @atoi(i8* %2) #10, !dbg !1120
m:  %call2 = call i32 @atoi(i8* %1) #10, !dbg !1117
n:  %call = call i32 @atoi(i8* %0) #10, !dbg !1114
SUSAN: inst:  %9 = bitcast double* %4 to i8*, !dbg !1153
A:  %call6 = call noalias i8* @malloc(i64 %mul5) #11, !dbg !1128, !tulip.target.mapdata.to !1129
B:  %call10 = call noalias i8* @malloc(i64 %mul9) #11, !dbg !1136, !tulip.target.mapdata.to !1137, !tulip.target.mapdata.from !1139
alpha:  %alpha = alloca double, align 8
dump_code:  %call4 = call i32 @atoi(i8* %2) #10, !dbg !1120
m:  %call2 = call i32 @atoi(i8* %1) #10, !dbg !1117
n:  %call = call i32 @atoi(i8* %0) #10, !dbg !1114
SUSAN: inst:  %mul27 = mul nsw i32 %call2, %call, !dbg !1154
A:  %call6 = call noalias i8* @malloc(i64 %mul5) #11, !dbg !1128, !tulip.target.mapdata.to !1129
B:  %call10 = call noalias i8* @malloc(i64 %mul9) #11, !dbg !1136, !tulip.target.mapdata.to !1137, !tulip.target.mapdata.from !1139
alpha:  %alpha = alloca double, align 8
dump_code:  %call4 = call i32 @atoi(i8* %2) #10, !dbg !1120
m:  %call2 = call i32 @atoi(i8* %1) #10, !dbg !1117
n:  %call = call i32 @atoi(i8* %0) #10, !dbg !1114
SUSAN: inst:  %conv28 = sext i32 %mul27 to i64, !dbg !1155
A:  %call6 = call noalias i8* @malloc(i64 %mul5) #11, !dbg !1128, !tulip.target.mapdata.to !1129
B:  %call10 = call noalias i8* @malloc(i64 %mul9) #11, !dbg !1136, !tulip.target.mapdata.to !1137, !tulip.target.mapdata.from !1139
alpha:  %alpha = alloca double, align 8
dump_code:  %call4 = call i32 @atoi(i8* %2) #10, !dbg !1120
m:  %call2 = call i32 @atoi(i8* %1) #10, !dbg !1117
n:  %call = call i32 @atoi(i8* %0) #10, !dbg !1114
SUSAN: inst:  %mul29 = mul i64 %conv28, 8, !dbg !1156
A:  %call6 = call noalias i8* @malloc(i64 %mul5) #11, !dbg !1128, !tulip.target.mapdata.to !1129
B:  %call10 = call noalias i8* @malloc(i64 %mul9) #11, !dbg !1136, !tulip.target.mapdata.to !1137, !tulip.target.mapdata.from !1139
alpha:  %alpha = alloca double, align 8
dump_code:  %call4 = call i32 @atoi(i8* %2) #10, !dbg !1120
m:  %call2 = call i32 @atoi(i8* %1) #10, !dbg !1117
n:  %call = call i32 @atoi(i8* %0) #10, !dbg !1114
SUSAN: inst:  %call30 = call i32 @cudaMemcpy(i8* %8, i8* %9, i64 %mul29, i32 2), !dbg !1157, !tulip.target.end.of.map !1149
A:  %call6 = call noalias i8* @malloc(i64 %mul5) #11, !dbg !1128, !tulip.target.mapdata.to !1129
B:  %call10 = call noalias i8* @malloc(i64 %mul9) #11, !dbg !1136, !tulip.target.mapdata.to !1137, !tulip.target.mapdata.from !1139
alpha:  %alpha = alloca double, align 8
dump_code:  %call4 = call i32 @atoi(i8* %2) #10, !dbg !1120
m:  %call2 = call i32 @atoi(i8* %1) #10, !dbg !1117
n:  %call = call i32 @atoi(i8* %0) #10, !dbg !1114
SUSAN: inst:  %cmp = icmp eq i32 %call4, 1, !dbg !1158
A:  %call6 = call noalias i8* @malloc(i64 %mul5) #11, !dbg !1128, !tulip.target.mapdata.to !1129
B:  %call10 = call noalias i8* @malloc(i64 %mul9) #11, !dbg !1136, !tulip.target.mapdata.to !1137, !tulip.target.mapdata.from !1139
alpha:  %alpha = alloca double, align 8
dump_code:  %call4 = call i32 @atoi(i8* %2) #10, !dbg !1120
m:  %call2 = call i32 @atoi(i8* %1) #10, !dbg !1117
n:  %call = call i32 @atoi(i8* %0) #10, !dbg !1114
SUSAN: inst:  br i1 %cmp, label %if.then, label %if.end, !dbg !1160
A:  %call6 = call noalias i8* @malloc(i64 %mul5) #11, !dbg !1128, !tulip.target.mapdata.to !1129
B:  %call10 = call noalias i8* @malloc(i64 %mul9) #11, !dbg !1136, !tulip.target.mapdata.to !1137, !tulip.target.mapdata.from !1139
alpha:  %alpha = alloca double, align 8
dump_code:  %call4 = call i32 @atoi(i8* %2) #10, !dbg !1120
m:  %call2 = call i32 @atoi(i8* %1) #10, !dbg !1117
n:  %call = call i32 @atoi(i8* %0) #10, !dbg !1114
SUSAN: inst:  call void @_ZL11print_arrayiiPd(i32 %call2, i32 %call, double* %4), !dbg !1161
A:  %call6 = call noalias i8* @malloc(i64 %mul5) #11, !dbg !1128, !tulip.target.mapdata.to !1129
B:  %call10 = call noalias i8* @malloc(i64 %mul9) #11, !dbg !1136, !tulip.target.mapdata.to !1137, !tulip.target.mapdata.from !1139
alpha:  %alpha = alloca double, align 8
dump_code:  %call4 = call i32 @atoi(i8* %2) #10, !dbg !1120
m:  %call2 = call i32 @atoi(i8* %1) #10, !dbg !1117
n:  %call = call i32 @atoi(i8* %0) #10, !dbg !1114
SUSAN: inst:  br label %if.end, !dbg !1161
A:  %call6 = call noalias i8* @malloc(i64 %mul5) #11, !dbg !1128, !tulip.target.mapdata.to !1129
B:  %call10 = call noalias i8* @malloc(i64 %mul9) #11, !dbg !1136, !tulip.target.mapdata.to !1137, !tulip.target.mapdata.from !1139
alpha:  %alpha = alloca double, align 8
dump_code:  %call4 = call i32 @atoi(i8* %2) #10, !dbg !1120
m:  %call2 = call i32 @atoi(i8* %1) #10, !dbg !1117
n:  %call = call i32 @atoi(i8* %0) #10, !dbg !1114
SUSAN: inst:  %10 = bitcast double* %3 to i8*, !dbg !1162
A:  %call6 = call noalias i8* @malloc(i64 %mul5) #11, !dbg !1128, !tulip.target.mapdata.to !1129
B:  %call10 = call noalias i8* @malloc(i64 %mul9) #11, !dbg !1136, !tulip.target.mapdata.to !1137, !tulip.target.mapdata.from !1139
alpha:  %alpha = alloca double, align 8
dump_code:  %call4 = call i32 @atoi(i8* %2) #10, !dbg !1120
m:  %call2 = call i32 @atoi(i8* %1) #10, !dbg !1117
n:  %call = call i32 @atoi(i8* %0) #10, !dbg !1114
SUSAN: inst:  call void @free(i8* %10) #11, !dbg !1163
A:  %call6 = call noalias i8* @malloc(i64 %mul5) #11, !dbg !1128, !tulip.target.mapdata.to !1129
B:  %call10 = call noalias i8* @malloc(i64 %mul9) #11, !dbg !1136, !tulip.target.mapdata.to !1137, !tulip.target.mapdata.from !1139
alpha:  %alpha = alloca double, align 8
dump_code:  %call4 = call i32 @atoi(i8* %2) #10, !dbg !1120
m:  %call2 = call i32 @atoi(i8* %1) #10, !dbg !1117
n:  %call = call i32 @atoi(i8* %0) #10, !dbg !1114
SUSAN: inst:  %11 = bitcast double* %4 to i8*, !dbg !1164
A:  %call6 = call noalias i8* @malloc(i64 %mul5) #11, !dbg !1128, !tulip.target.mapdata.to !1129
B:  %call10 = call noalias i8* @malloc(i64 %mul9) #11, !dbg !1136, !tulip.target.mapdata.to !1137, !tulip.target.mapdata.from !1139
alpha:  %alpha = alloca double, align 8
dump_code:  %call4 = call i32 @atoi(i8* %2) #10, !dbg !1120
m:  %call2 = call i32 @atoi(i8* %1) #10, !dbg !1117
n:  %call = call i32 @atoi(i8* %0) #10, !dbg !1114
SUSAN: inst:  call void @free(i8* %11) #11, !dbg !1165
A:  %call6 = call noalias i8* @malloc(i64 %mul5) #11, !dbg !1128, !tulip.target.mapdata.to !1129
B:  %call10 = call noalias i8* @malloc(i64 %mul9) #11, !dbg !1136, !tulip.target.mapdata.to !1137, !tulip.target.mapdata.from !1139
alpha:  %alpha = alloca double, align 8
dump_code:  %call4 = call i32 @atoi(i8* %2) #10, !dbg !1120
m:  %call2 = call i32 @atoi(i8* %1) #10, !dbg !1117
n:  %call = call i32 @atoi(i8* %0) #10, !dbg !1114
SUSAN: inst:  ret i32 0, !dbg !1166
A:  %call6 = call noalias i8* @malloc(i64 %mul5) #11, !dbg !1128, !tulip.target.mapdata.to !1129
B:  %call10 = call noalias i8* @malloc(i64 %mul9) #11, !dbg !1136, !tulip.target.mapdata.to !1137, !tulip.target.mapdata.from !1139
alpha:  %alpha = alloca double, align 8
dump_code:  %call4 = call i32 @atoi(i8* %2) #10, !dbg !1120
m:  %call2 = call i32 @atoi(i8* %1) #10, !dbg !1117
n:  %call = call i32 @atoi(i8* %0) #10, !dbg !1114
=========================SUSAN: IR NAMING=====================
  %alpha = alloca double, align 8 -> alpha
i32 %argc -> argc
i8** %argv -> argv
  %call = call i32 @atoi(i8* %0) #10, !dbg !1114 -> n
  %call2 = call i32 @atoi(i8* %1) #10, !dbg !1117 -> m
  %call4 = call i32 @atoi(i8* %2) #10, !dbg !1120 -> dump_code
  %call6 = call noalias i8* @malloc(i64 %mul5) #11, !dbg !1128, !tulip.target.mapdata.to !1129 -> A
  %call10 = call noalias i8* @malloc(i64 %mul9) #11, !dbg !1136, !tulip.target.mapdata.to !1137, !tulip.target.mapdata.from !1139 -> B
SUSAN: getting value name for:   %alpha = alloca double, align 8
inst from IRNaming:   %alpha = alloca double, align 8
original name : alpha
returning name: alpha
SUSAN: declaring 3252:   %alpha = alloca double, align 8
SUSAN: getting value name for:   %alpha = alloca double, align 8
inst from IRNaming:   %alpha = alloca double, align 8
original name : alpha
returning name: alpha
SUSAN: declaring with reconstructed name 3286: alpha
SUSAN: declaring varName 5264: alpha
SUSAN: printing type at 5885: double
SUSAN: getting value name for:   %call = call i32 @atoi(i8* %0) #10, !dbg !1114
inst from IRNaming:   %call = call i32 @atoi(i8* %0) #10, !dbg !1114
original name : n
returning name: n
SUSAN: declaring varName 5298: n
SUSAN: declared locals:
alpha
SUSAN: declaring 3252:   %call = call i32 @atoi(i8* %0) #10, !dbg !1114
SUSAN: getting value name for:   %call = call i32 @atoi(i8* %0) #10, !dbg !1114
inst from IRNaming:   %call = call i32 @atoi(i8* %0) #10, !dbg !1114
original name : n
returning name: n
SUSAN: declaring with reconstructed name 3286: n
SUSAN: inst at 5950:   %call = call i32 @atoi(i8* %0) #10, !dbg !1114
SUSAN: declaring   %call = call i32 @atoi(i8* %0) #10, !dbg !1114
SUSAN: printing type at 5937: i32
SUSAN: getting value name for:   %call2 = call i32 @atoi(i8* %1) #10, !dbg !1117
inst from IRNaming:   %call2 = call i32 @atoi(i8* %1) #10, !dbg !1117
original name : m
returning name: m
SUSAN: declaring varName 5298: m
SUSAN: declared locals:
alpha
n
SUSAN: declaring 3252:   %call2 = call i32 @atoi(i8* %1) #10, !dbg !1117
SUSAN: getting value name for:   %call2 = call i32 @atoi(i8* %1) #10, !dbg !1117
inst from IRNaming:   %call2 = call i32 @atoi(i8* %1) #10, !dbg !1117
original name : m
returning name: m
SUSAN: declaring with reconstructed name 3286: m
SUSAN: inst at 5950:   %call2 = call i32 @atoi(i8* %1) #10, !dbg !1117
SUSAN: declaring   %call2 = call i32 @atoi(i8* %1) #10, !dbg !1117
SUSAN: printing type at 5937: i32
SUSAN: getting value name for:   %call4 = call i32 @atoi(i8* %2) #10, !dbg !1120
inst from IRNaming:   %call4 = call i32 @atoi(i8* %2) #10, !dbg !1120
original name : dump_code
returning name: dump_code
SUSAN: declaring varName 5298: dump_code
SUSAN: declared locals:
alpha
m
n
SUSAN: declaring 3252:   %call4 = call i32 @atoi(i8* %2) #10, !dbg !1120
SUSAN: getting value name for:   %call4 = call i32 @atoi(i8* %2) #10, !dbg !1120
inst from IRNaming:   %call4 = call i32 @atoi(i8* %2) #10, !dbg !1120
original name : dump_code
returning name: dump_code
SUSAN: declaring with reconstructed name 3286: dump_code
SUSAN: inst at 5950:   %call4 = call i32 @atoi(i8* %2) #10, !dbg !1120
SUSAN: declaring   %call4 = call i32 @atoi(i8* %2) #10, !dbg !1120
SUSAN: printing type at 5937: i32
SUSAN: getting value name for:   %call6 = call noalias i8* @malloc(i64 %mul5) #11, !dbg !1128, !tulip.target.mapdata.to !1129
inst from IRNaming:   %call6 = call noalias i8* @malloc(i64 %mul5) #11, !dbg !1128, !tulip.target.mapdata.to !1129
original name : A
returning name: A
SUSAN: declaring varName 5298: A
SUSAN: declared locals:
alpha
dump_code
m
n
SUSAN: declaring 3252:   %call6 = call noalias i8* @malloc(i64 %mul5) #11, !dbg !1128, !tulip.target.mapdata.to !1129
SUSAN: getting value name for:   %call6 = call noalias i8* @malloc(i64 %mul5) #11, !dbg !1128, !tulip.target.mapdata.to !1129
inst from IRNaming:   %call6 = call noalias i8* @malloc(i64 %mul5) #11, !dbg !1128, !tulip.target.mapdata.to !1129
original name : A
returning name: A
SUSAN: declaring with reconstructed name 3286: A
SUSAN: inst at 5950:   %call6 = call noalias i8* @malloc(i64 %mul5) #11, !dbg !1128, !tulip.target.mapdata.to !1129
SUSAN: declaring   %call6 = call noalias i8* @malloc(i64 %mul5) #11, !dbg !1128, !tulip.target.mapdata.to !1129
SUSAN: printing type at 5937: i8*
SUSAN: getting value name for:   %call10 = call noalias i8* @malloc(i64 %mul9) #11, !dbg !1136, !tulip.target.mapdata.to !1137, !tulip.target.mapdata.from !1139
inst from IRNaming:   %call10 = call noalias i8* @malloc(i64 %mul9) #11, !dbg !1136, !tulip.target.mapdata.to !1137, !tulip.target.mapdata.from !1139
original name : B
returning name: B
SUSAN: declaring varName 5298: B
SUSAN: declared locals:
A
alpha
dump_code
m
n
SUSAN: declaring 3252:   %call10 = call noalias i8* @malloc(i64 %mul9) #11, !dbg !1136, !tulip.target.mapdata.to !1137, !tulip.target.mapdata.from !1139
SUSAN: getting value name for:   %call10 = call noalias i8* @malloc(i64 %mul9) #11, !dbg !1136, !tulip.target.mapdata.to !1137, !tulip.target.mapdata.from !1139
inst from IRNaming:   %call10 = call noalias i8* @malloc(i64 %mul9) #11, !dbg !1136, !tulip.target.mapdata.to !1137, !tulip.target.mapdata.from !1139
original name : B
returning name: B
SUSAN: declaring with reconstructed name 3286: B
SUSAN: inst at 5950:   %call10 = call noalias i8* @malloc(i64 %mul9) #11, !dbg !1136, !tulip.target.mapdata.to !1137, !tulip.target.mapdata.from !1139
SUSAN: declaring   %call10 = call noalias i8* @malloc(i64 %mul9) #11, !dbg !1136, !tulip.target.mapdata.to !1137, !tulip.target.mapdata.from !1139
SUSAN: printing type at 5937: i8*
SUSAN: getting value name for:   %call22 = call i32 @cudaMemcpy(i8* %5, i8* %6, i64 %mul21, i32 1), !dbg !1148, !tulip.target.start.of.map !1149
SUSAN: declaring varName 5298: call22
SUSAN: declared locals:
A
B
alpha
dump_code
m
n
SUSAN: declaring 3252:   %call22 = call i32 @cudaMemcpy(i8* %5, i8* %6, i64 %mul21, i32 1), !dbg !1148, !tulip.target.start.of.map !1149
SUSAN: getting value name for:   %call22 = call i32 @cudaMemcpy(i8* %5, i8* %6, i64 %mul21, i32 1), !dbg !1148, !tulip.target.start.of.map !1149
SUSAN: inst at 5950:   %call22 = call i32 @cudaMemcpy(i8* %5, i8* %6, i64 %mul21, i32 1), !dbg !1148, !tulip.target.start.of.map !1149
SUSAN: declaring   %call22 = call i32 @cudaMemcpy(i8* %5, i8* %6, i64 %mul21, i32 1), !dbg !1148, !tulip.target.start.of.map !1149
SUSAN: printing type at 5937: i32
SUSAN: getting value name for:   %call30 = call i32 @cudaMemcpy(i8* %8, i8* %9, i64 %mul29, i32 2), !dbg !1157, !tulip.target.end.of.map !1149
SUSAN: declaring varName 5298: call30
SUSAN: declared locals:
A
B
alpha
call22
dump_code
m
n
SUSAN: declaring 3252:   %call30 = call i32 @cudaMemcpy(i8* %8, i8* %9, i64 %mul29, i32 2), !dbg !1157, !tulip.target.end.of.map !1149
SUSAN: getting value name for:   %call30 = call i32 @cudaMemcpy(i8* %8, i8* %9, i64 %mul29, i32 2), !dbg !1157, !tulip.target.end.of.map !1149
SUSAN: inst at 5950:   %call30 = call i32 @cudaMemcpy(i8* %8, i8* %9, i64 %mul29, i32 2), !dbg !1157, !tulip.target.end.of.map !1149
SUSAN: declaring   %call30 = call i32 @cudaMemcpy(i8* %8, i8* %9, i64 %mul29, i32 2), !dbg !1157, !tulip.target.end.of.map !1149
SUSAN: printing type at 5937: i32
SUSAN: am I here 6807??
IfElse Region with entry block: entry
thenSubRegions : 
SUSAN: declaring 3252:   %call = call i32 @atoi(i8* %0) #10, !dbg !1114
SUSAN: getting value name for:   %call = call i32 @atoi(i8* %0) #10, !dbg !1114
inst from IRNaming:   %call = call i32 @atoi(i8* %0) #10, !dbg !1114
original name : n
returning name: n
SUSAN: declaring with reconstructed name 3286: n
SUSAN: getting value name for:   %call = call i32 @atoi(i8* %0) #10, !dbg !1114
inst from IRNaming:   %call = call i32 @atoi(i8* %0) #10, !dbg !1114
original name : n
returning name: n
CBackend: writeOperand 3595: 
; Function Attrs: nounwind readonly
declare dso_local i32 @atoi(i8*) #3

SUSAN: getting value name for: 
; Function Attrs: nounwind readonly
declare dso_local i32 @atoi(i8*) #3

CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595:   %0 = load i8*, i8** %arrayidx, align 8, !dbg !1113
SUSAN: loadInst:   %0 = load i8*, i8** %arrayidx, align 8, !dbg !1113
SUSAN: GEPINST:   %arrayidx = getelementptr inbounds i8*, i8** %argv, i64 2, !dbg !1113
SUSAN: dereferenceTimes = 2
SUSAN: printing GEP:   %arrayidx = getelementptr inbounds i8*, i8** %argv, i64 2, !dbg !1113
SUSAN: accessMemory true
SUSAN: first index is integer/pointertype type
SUSAN: writing ptr 10000:i8** %argv
SUSAN: writing ptr 9994: i8** %argv
SUSAN: getting value name for: i8** %argv
inst from IRNaming: i8** %argv
original name : argv
returning name: argv
CBackend: writeOperand 3595: i64 2
CBackend: writeoperand here 3674? 
CBackend: writeoperand here 3674? 
SUSAN: declaring 3252:   %call2 = call i32 @atoi(i8* %1) #10, !dbg !1117
SUSAN: getting value name for:   %call2 = call i32 @atoi(i8* %1) #10, !dbg !1117
inst from IRNaming:   %call2 = call i32 @atoi(i8* %1) #10, !dbg !1117
original name : m
returning name: m
SUSAN: declaring with reconstructed name 3286: m
SUSAN: getting value name for:   %call2 = call i32 @atoi(i8* %1) #10, !dbg !1117
inst from IRNaming:   %call2 = call i32 @atoi(i8* %1) #10, !dbg !1117
original name : m
returning name: m
CBackend: writeOperand 3595: 
; Function Attrs: nounwind readonly
declare dso_local i32 @atoi(i8*) #3

SUSAN: getting value name for: 
; Function Attrs: nounwind readonly
declare dso_local i32 @atoi(i8*) #3

CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595:   %1 = load i8*, i8** %arrayidx1, align 8, !dbg !1116
SUSAN: loadInst:   %1 = load i8*, i8** %arrayidx1, align 8, !dbg !1116
SUSAN: GEPINST:   %arrayidx1 = getelementptr inbounds i8*, i8** %argv, i64 3, !dbg !1116
SUSAN: dereferenceTimes = 2
SUSAN: printing GEP:   %arrayidx1 = getelementptr inbounds i8*, i8** %argv, i64 3, !dbg !1116
SUSAN: accessMemory true
SUSAN: first index is integer/pointertype type
SUSAN: writing ptr 10000:i8** %argv
SUSAN: writing ptr 9994: i8** %argv
SUSAN: getting value name for: i8** %argv
inst from IRNaming: i8** %argv
original name : argv
returning name: argv
CBackend: writeOperand 3595: i64 3
CBackend: writeoperand here 3674? 
CBackend: writeoperand here 3674? 
SUSAN: declaring 3252:   %call4 = call i32 @atoi(i8* %2) #10, !dbg !1120
SUSAN: getting value name for:   %call4 = call i32 @atoi(i8* %2) #10, !dbg !1120
inst from IRNaming:   %call4 = call i32 @atoi(i8* %2) #10, !dbg !1120
original name : dump_code
returning name: dump_code
SUSAN: declaring with reconstructed name 3286: dump_code
SUSAN: getting value name for:   %call4 = call i32 @atoi(i8* %2) #10, !dbg !1120
inst from IRNaming:   %call4 = call i32 @atoi(i8* %2) #10, !dbg !1120
original name : dump_code
returning name: dump_code
CBackend: writeOperand 3595: 
; Function Attrs: nounwind readonly
declare dso_local i32 @atoi(i8*) #3

SUSAN: getting value name for: 
; Function Attrs: nounwind readonly
declare dso_local i32 @atoi(i8*) #3

CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595:   %2 = load i8*, i8** %arrayidx3, align 8, !dbg !1119
SUSAN: loadInst:   %2 = load i8*, i8** %arrayidx3, align 8, !dbg !1119
SUSAN: GEPINST:   %arrayidx3 = getelementptr inbounds i8*, i8** %argv, i64 1, !dbg !1119
SUSAN: dereferenceTimes = 2
SUSAN: printing GEP:   %arrayidx3 = getelementptr inbounds i8*, i8** %argv, i64 1, !dbg !1119
SUSAN: accessMemory true
SUSAN: first index is integer/pointertype type
SUSAN: writing ptr 10000:i8** %argv
SUSAN: writing ptr 9994: i8** %argv
SUSAN: getting value name for: i8** %argv
inst from IRNaming: i8** %argv
original name : argv
returning name: argv
CBackend: writeOperand 3595: i64 1
CBackend: writeoperand here 3674? 
CBackend: writeoperand here 3674? 
SUSAN: declaring 3252:   %call6 = call noalias i8* @malloc(i64 %mul5) #11, !dbg !1128, !tulip.target.mapdata.to !1129
SUSAN: getting value name for:   %call6 = call noalias i8* @malloc(i64 %mul5) #11, !dbg !1128, !tulip.target.mapdata.to !1129
inst from IRNaming:   %call6 = call noalias i8* @malloc(i64 %mul5) #11, !dbg !1128, !tulip.target.mapdata.to !1129
original name : A
returning name: A
SUSAN: declaring with reconstructed name 3286: A
SUSAN: getting value name for:   %call6 = call noalias i8* @malloc(i64 %mul5) #11, !dbg !1128, !tulip.target.mapdata.to !1129
inst from IRNaming:   %call6 = call noalias i8* @malloc(i64 %mul5) #11, !dbg !1128, !tulip.target.mapdata.to !1129
original name : A
returning name: A
CBackend: writeOperand 3595: 
; Function Attrs: nounwind
declare dso_local noalias i8* @malloc(i64) #4

SUSAN: getting value name for: 
; Function Attrs: nounwind
declare dso_local noalias i8* @malloc(i64) #4

CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595:   %mul5 = mul i64 %conv, 8, !dbg !1126, !tulip.target.datasize !1127
CBackend: writeOperand 3595:   %conv = sext i32 %mul to i64, !dbg !1125
SUSAN: visiting cast:   %conv = sext i32 %mul to i64, !dbg !1125
CBackend: writeOperand 3595:   %mul = mul nsw i32 %call, %call2, !dbg !1124
CBackend: writeOperand 3595:   %call = call i32 @atoi(i8* %0) #10, !dbg !1114
SUSAN: getting value name for:   %call = call i32 @atoi(i8* %0) #10, !dbg !1114
inst from IRNaming:   %call = call i32 @atoi(i8* %0) #10, !dbg !1114
original name : n
returning name: n
CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595:   %call2 = call i32 @atoi(i8* %1) #10, !dbg !1117
SUSAN: getting value name for:   %call2 = call i32 @atoi(i8* %1) #10, !dbg !1117
inst from IRNaming:   %call2 = call i32 @atoi(i8* %1) #10, !dbg !1117
original name : m
returning name: m
CBackend: writeoperand here 3674? 
CBackend: writeoperand here 3674? 
CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595: i64 8
CBackend: writeoperand here 3674? 
CBackend: writeoperand here 3674? 
SUSAN: declaring 3252:   %call10 = call noalias i8* @malloc(i64 %mul9) #11, !dbg !1136, !tulip.target.mapdata.to !1137, !tulip.target.mapdata.from !1139
SUSAN: getting value name for:   %call10 = call noalias i8* @malloc(i64 %mul9) #11, !dbg !1136, !tulip.target.mapdata.to !1137, !tulip.target.mapdata.from !1139
inst from IRNaming:   %call10 = call noalias i8* @malloc(i64 %mul9) #11, !dbg !1136, !tulip.target.mapdata.to !1137, !tulip.target.mapdata.from !1139
original name : B
returning name: B
SUSAN: declaring with reconstructed name 3286: B
SUSAN: getting value name for:   %call10 = call noalias i8* @malloc(i64 %mul9) #11, !dbg !1136, !tulip.target.mapdata.to !1137, !tulip.target.mapdata.from !1139
inst from IRNaming:   %call10 = call noalias i8* @malloc(i64 %mul9) #11, !dbg !1136, !tulip.target.mapdata.to !1137, !tulip.target.mapdata.from !1139
original name : B
returning name: B
CBackend: writeOperand 3595: 
; Function Attrs: nounwind
declare dso_local noalias i8* @malloc(i64) #4

SUSAN: getting value name for: 
; Function Attrs: nounwind
declare dso_local noalias i8* @malloc(i64) #4

CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595:   %mul9 = mul i64 %conv8, 8, !dbg !1134, !tulip.target.datasize !1135
CBackend: writeOperand 3595:   %conv8 = sext i32 %mul7 to i64, !dbg !1133
SUSAN: visiting cast:   %conv8 = sext i32 %mul7 to i64, !dbg !1133
CBackend: writeOperand 3595:   %mul7 = mul nsw i32 %call2, %call, !dbg !1132
CBackend: writeOperand 3595:   %call2 = call i32 @atoi(i8* %1) #10, !dbg !1117
SUSAN: getting value name for:   %call2 = call i32 @atoi(i8* %1) #10, !dbg !1117
inst from IRNaming:   %call2 = call i32 @atoi(i8* %1) #10, !dbg !1117
original name : m
returning name: m
CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595:   %call = call i32 @atoi(i8* %0) #10, !dbg !1114
SUSAN: getting value name for:   %call = call i32 @atoi(i8* %0) #10, !dbg !1114
inst from IRNaming:   %call = call i32 @atoi(i8* %0) #10, !dbg !1114
original name : n
returning name: n
CBackend: writeoperand here 3674? 
CBackend: writeoperand here 3674? 
CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595: i64 8
CBackend: writeoperand here 3674? 
CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595: 
; Function Attrs: noinline nounwind uwtable
define internal void @_ZL10init_arrayiiPdS_S_(i32 %n, i32 %m, double* %alpha, double* %A, double* %B) #5 !dbg !1167 {
entry:
  call void @llvm.dbg.value(metadata i32 %n, metadata !1170, metadata !DIExpression()), !dbg !1171
  call void @llvm.dbg.value(metadata i32 %m, metadata !1172, metadata !DIExpression()), !dbg !1171
  call void @llvm.dbg.value(metadata double* %alpha, metadata !1173, metadata !DIExpression()), !dbg !1171
  call void @llvm.dbg.value(metadata double* %A, metadata !1174, metadata !DIExpression()), !dbg !1171
  call void @llvm.dbg.value(metadata double* %B, metadata !1175, metadata !DIExpression()), !dbg !1171
  store double 3.241200e+04, double* %alpha, align 8, !dbg !1176
  call void @llvm.dbg.value(metadata i32 0, metadata !1177, metadata !DIExpression()), !dbg !1171
  %0 = sext i32 %n to i64, !dbg !1178
  %1 = sext i32 %m to i64, !dbg !1178
  %2 = sext i32 %n to i64, !dbg !1178
  br label %for.cond, !dbg !1178

for.cond:                                         ; preds = %for.inc4, %entry
  %indvars.iv9 = phi i64 [ %indvars.iv.next10, %for.inc4 ], [ 0, %entry ], !dbg !1180
  call void @llvm.dbg.value(metadata i64 %indvars.iv9, metadata !1177, metadata !DIExpression()), !dbg !1171
  %cmp = icmp slt i64 %indvars.iv9, %1, !dbg !1181
  br i1 %cmp, label %for.body, label %for.end6, !dbg !1183

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.value(metadata i32 0, metadata !1184, metadata !DIExpression()), !dbg !1171
  br label %for.cond1, !dbg !1185

for.cond1:                                        ; preds = %for.inc, %for.body
  %indvars.iv6 = phi i64 [ %indvars.iv.next7, %for.inc ], [ 0, %for.body ], !dbg !1188
  call void @llvm.dbg.value(metadata i64 %indvars.iv6, metadata !1184, metadata !DIExpression()), !dbg !1171
  %cmp2 = icmp slt i64 %indvars.iv6, %0, !dbg !1189
  br i1 %cmp2, label %for.body3, label %for.end, !dbg !1191

for.body3:                                        ; preds = %for.cond1
  %3 = mul nsw i64 %indvars.iv9, %2, !dbg !1192
  %4 = add nsw i64 %3, %indvars.iv6, !dbg !1194
  %arrayidx = getelementptr inbounds double, double* %B, i64 %4, !dbg !1195
  store double 0.000000e+00, double* %arrayidx, align 8, !dbg !1196
  br label %for.inc, !dbg !1197

for.inc:                                          ; preds = %for.body3
  %indvars.iv.next7 = add nuw nsw i64 %indvars.iv6, 1, !dbg !1198
  call void @llvm.dbg.value(metadata i32 undef, metadata !1184, metadata !DIExpression(DW_OP_plus_uconst, 1, DW_OP_stack_value)), !dbg !1171
  br label %for.cond1, !dbg !1199, !llvm.loop !1200

for.end:                                          ; preds = %for.cond1
  br label %for.inc4, !dbg !1202

for.inc4:                                         ; preds = %for.end
  %indvars.iv.next10 = add nuw nsw i64 %indvars.iv9, 1, !dbg !1203
  call void @llvm.dbg.value(metadata i32 undef, metadata !1177, metadata !DIExpression(DW_OP_plus_uconst, 1, DW_OP_stack_value)), !dbg !1171
  br label %for.cond, !dbg !1204, !llvm.loop !1205

for.end6:                                         ; preds = %for.cond
  call void @llvm.dbg.value(metadata i32 0, metadata !1177, metadata !DIExpression()), !dbg !1171
  %5 = sext i32 %m to i64, !dbg !1207
  %6 = sext i32 %n to i64, !dbg !1207
  %7 = sext i32 %m to i64, !dbg !1207
  br label %for.cond7, !dbg !1207

for.cond7:                                        ; preds = %for.inc32, %for.end6
  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc32 ], [ 0, %for.end6 ], !dbg !1209
  call void @llvm.dbg.value(metadata i64 %indvars.iv3, metadata !1177, metadata !DIExpression()), !dbg !1171
  %cmp8 = icmp slt i64 %indvars.iv3, %6, !dbg !1210
  br i1 %cmp8, label %for.body9, label %for.end34, !dbg !1212

for.body9:                                        ; preds = %for.cond7
  call void @llvm.dbg.value(metadata i32 0, metadata !1184, metadata !DIExpression()), !dbg !1171
  br label %for.cond10, !dbg !1213

for.cond10:                                       ; preds = %for.inc29, %for.body9
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1215
  %j.1 = phi i32 [ 0, %for.body9 ], [ %inc30, %for.inc29 ], !dbg !1215
  call void @llvm.dbg.value(metadata i64 %indvars.iv, metadata !1184, metadata !DIExpression()), !dbg !1171
  %cmp11 = icmp slt i64 %indvars.iv, %5, !dbg !1216
  br i1 %cmp11, label %for.body12, label %for.end31, !dbg !1218

for.body12:                                       ; preds = %for.cond10
  %8 = trunc i64 %indvars.iv3 to i32, !dbg !1219
  %conv = sitofp i32 %8 to double, !dbg !1219
  %9 = trunc i64 %indvars.iv to i32, !dbg !1221
  %conv13 = sitofp i32 %9 to double, !dbg !1221
  %mul14 = fmul contract double %conv, %conv13, !dbg !1222
  %conv15 = sitofp i32 %m to double, !dbg !1223
  %div = fdiv double %mul14, %conv15, !dbg !1224
  %10 = mul nsw i64 %indvars.iv3, %7, !dbg !1225
  %11 = add nsw i64 %10, %indvars.iv, !dbg !1226
  %arrayidx19 = getelementptr inbounds double, double* %A, i64 %11, !dbg !1227
  store double %div, double* %arrayidx19, align 8, !dbg !1228
  %12 = trunc i64 %indvars.iv3 to i32, !dbg !1229
  %conv20 = sitofp i32 %12 to double, !dbg !1229
  %13 = trunc i64 %indvars.iv to i32, !dbg !1230
  %conv21 = sitofp i32 %13 to double, !dbg !1230
  %mul22 = fmul contract double %conv20, %conv21, !dbg !1231
  %conv23 = sitofp i32 %n to double, !dbg !1232
  %div24 = fdiv double %mul22, %conv23, !dbg !1233
  %mul25 = mul nsw i32 %j.1, %n, !dbg !1234
  %14 = trunc i64 %indvars.iv to i32, !dbg !1235
  %add26 = add nsw i32 %mul25, %14, !dbg !1235
  %idxprom27 = sext i32 %add26 to i64, !dbg !1236
  %arrayidx28 = getelementptr inbounds double, double* %B, i64 %idxprom27, !dbg !1236
  store double %div24, double* %arrayidx28, align 8, !dbg !1237
  br label %for.inc29, !dbg !1238

for.inc29:                                        ; preds = %for.body12
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !1239
  %inc30 = add nuw nsw i32 %j.1, 1, !dbg !1239
  call void @llvm.dbg.value(metadata i32 %inc30, metadata !1184, metadata !DIExpression()), !dbg !1171
  br label %for.cond10, !dbg !1240, !llvm.loop !1241

for.end31:                                        ; preds = %for.cond10
  br label %for.inc32, !dbg !1242

for.inc32:                                        ; preds = %for.end31
  %indvars.iv.next4 = add nuw nsw i64 %indvars.iv3, 1, !dbg !1243
  call void @llvm.dbg.value(metadata i32 undef, metadata !1177, metadata !DIExpression(DW_OP_plus_uconst, 1, DW_OP_stack_value)), !dbg !1171
  br label %for.cond7, !dbg !1244, !llvm.loop !1245

for.end34:                                        ; preds = %for.cond7
  ret void, !dbg !1247
}

SUSAN: getting value name for: 
; Function Attrs: noinline nounwind uwtable
define internal void @_ZL10init_arrayiiPdS_S_(i32 %n, i32 %m, double* %alpha, double* %A, double* %B) #5 !dbg !1167 {
entry:
  call void @llvm.dbg.value(metadata i32 %n, metadata !1170, metadata !DIExpression()), !dbg !1171
  call void @llvm.dbg.value(metadata i32 %m, metadata !1172, metadata !DIExpression()), !dbg !1171
  call void @llvm.dbg.value(metadata double* %alpha, metadata !1173, metadata !DIExpression()), !dbg !1171
  call void @llvm.dbg.value(metadata double* %A, metadata !1174, metadata !DIExpression()), !dbg !1171
  call void @llvm.dbg.value(metadata double* %B, metadata !1175, metadata !DIExpression()), !dbg !1171
  store double 3.241200e+04, double* %alpha, align 8, !dbg !1176
  call void @llvm.dbg.value(metadata i32 0, metadata !1177, metadata !DIExpression()), !dbg !1171
  %0 = sext i32 %n to i64, !dbg !1178
  %1 = sext i32 %m to i64, !dbg !1178
  %2 = sext i32 %n to i64, !dbg !1178
  br label %for.cond, !dbg !1178

for.cond:                                         ; preds = %for.inc4, %entry
  %indvars.iv9 = phi i64 [ %indvars.iv.next10, %for.inc4 ], [ 0, %entry ], !dbg !1180
  call void @llvm.dbg.value(metadata i64 %indvars.iv9, metadata !1177, metadata !DIExpression()), !dbg !1171
  %cmp = icmp slt i64 %indvars.iv9, %1, !dbg !1181
  br i1 %cmp, label %for.body, label %for.end6, !dbg !1183

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.value(metadata i32 0, metadata !1184, metadata !DIExpression()), !dbg !1171
  br label %for.cond1, !dbg !1185

for.cond1:                                        ; preds = %for.inc, %for.body
  %indvars.iv6 = phi i64 [ %indvars.iv.next7, %for.inc ], [ 0, %for.body ], !dbg !1188
  call void @llvm.dbg.value(metadata i64 %indvars.iv6, metadata !1184, metadata !DIExpression()), !dbg !1171
  %cmp2 = icmp slt i64 %indvars.iv6, %0, !dbg !1189
  br i1 %cmp2, label %for.body3, label %for.end, !dbg !1191

for.body3:                                        ; preds = %for.cond1
  %3 = mul nsw i64 %indvars.iv9, %2, !dbg !1192
  %4 = add nsw i64 %3, %indvars.iv6, !dbg !1194
  %arrayidx = getelementptr inbounds double, double* %B, i64 %4, !dbg !1195
  store double 0.000000e+00, double* %arrayidx, align 8, !dbg !1196
  br label %for.inc, !dbg !1197

for.inc:                                          ; preds = %for.body3
  %indvars.iv.next7 = add nuw nsw i64 %indvars.iv6, 1, !dbg !1198
  call void @llvm.dbg.value(metadata i32 undef, metadata !1184, metadata !DIExpression(DW_OP_plus_uconst, 1, DW_OP_stack_value)), !dbg !1171
  br label %for.cond1, !dbg !1199, !llvm.loop !1200

for.end:                                          ; preds = %for.cond1
  br label %for.inc4, !dbg !1202

for.inc4:                                         ; preds = %for.end
  %indvars.iv.next10 = add nuw nsw i64 %indvars.iv9, 1, !dbg !1203
  call void @llvm.dbg.value(metadata i32 undef, metadata !1177, metadata !DIExpression(DW_OP_plus_uconst, 1, DW_OP_stack_value)), !dbg !1171
  br label %for.cond, !dbg !1204, !llvm.loop !1205

for.end6:                                         ; preds = %for.cond
  call void @llvm.dbg.value(metadata i32 0, metadata !1177, metadata !DIExpression()), !dbg !1171
  %5 = sext i32 %m to i64, !dbg !1207
  %6 = sext i32 %n to i64, !dbg !1207
  %7 = sext i32 %m to i64, !dbg !1207
  br label %for.cond7, !dbg !1207

for.cond7:                                        ; preds = %for.inc32, %for.end6
  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc32 ], [ 0, %for.end6 ], !dbg !1209
  call void @llvm.dbg.value(metadata i64 %indvars.iv3, metadata !1177, metadata !DIExpression()), !dbg !1171
  %cmp8 = icmp slt i64 %indvars.iv3, %6, !dbg !1210
  br i1 %cmp8, label %for.body9, label %for.end34, !dbg !1212

for.body9:                                        ; preds = %for.cond7
  call void @llvm.dbg.value(metadata i32 0, metadata !1184, metadata !DIExpression()), !dbg !1171
  br label %for.cond10, !dbg !1213

for.cond10:                                       ; preds = %for.inc29, %for.body9
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1215
  %j.1 = phi i32 [ 0, %for.body9 ], [ %inc30, %for.inc29 ], !dbg !1215
  call void @llvm.dbg.value(metadata i64 %indvars.iv, metadata !1184, metadata !DIExpression()), !dbg !1171
  %cmp11 = icmp slt i64 %indvars.iv, %5, !dbg !1216
  br i1 %cmp11, label %for.body12, label %for.end31, !dbg !1218

for.body12:                                       ; preds = %for.cond10
  %8 = trunc i64 %indvars.iv3 to i32, !dbg !1219
  %conv = sitofp i32 %8 to double, !dbg !1219
  %9 = trunc i64 %indvars.iv to i32, !dbg !1221
  %conv13 = sitofp i32 %9 to double, !dbg !1221
  %mul14 = fmul contract double %conv, %conv13, !dbg !1222
  %conv15 = sitofp i32 %m to double, !dbg !1223
  %div = fdiv double %mul14, %conv15, !dbg !1224
  %10 = mul nsw i64 %indvars.iv3, %7, !dbg !1225
  %11 = add nsw i64 %10, %indvars.iv, !dbg !1226
  %arrayidx19 = getelementptr inbounds double, double* %A, i64 %11, !dbg !1227
  store double %div, double* %arrayidx19, align 8, !dbg !1228
  %12 = trunc i64 %indvars.iv3 to i32, !dbg !1229
  %conv20 = sitofp i32 %12 to double, !dbg !1229
  %13 = trunc i64 %indvars.iv to i32, !dbg !1230
  %conv21 = sitofp i32 %13 to double, !dbg !1230
  %mul22 = fmul contract double %conv20, %conv21, !dbg !1231
  %conv23 = sitofp i32 %n to double, !dbg !1232
  %div24 = fdiv double %mul22, %conv23, !dbg !1233
  %mul25 = mul nsw i32 %j.1, %n, !dbg !1234
  %14 = trunc i64 %indvars.iv to i32, !dbg !1235
  %add26 = add nsw i32 %mul25, %14, !dbg !1235
  %idxprom27 = sext i32 %add26 to i64, !dbg !1236
  %arrayidx28 = getelementptr inbounds double, double* %B, i64 %idxprom27, !dbg !1236
  store double %div24, double* %arrayidx28, align 8, !dbg !1237
  br label %for.inc29, !dbg !1238

for.inc29:                                        ; preds = %for.body12
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !1239
  %inc30 = add nuw nsw i32 %j.1, 1, !dbg !1239
  call void @llvm.dbg.value(metadata i32 %inc30, metadata !1184, metadata !DIExpression()), !dbg !1171
  br label %for.cond10, !dbg !1240, !llvm.loop !1241

for.end31:                                        ; preds = %for.cond10
  br label %for.inc32, !dbg !1242

for.inc32:                                        ; preds = %for.end31
  %indvars.iv.next4 = add nuw nsw i64 %indvars.iv3, 1, !dbg !1243
  call void @llvm.dbg.value(metadata i32 undef, metadata !1177, metadata !DIExpression(DW_OP_plus_uconst, 1, DW_OP_stack_value)), !dbg !1171
  br label %for.cond7, !dbg !1244, !llvm.loop !1245

for.end34:                                        ; preds = %for.cond7
  ret void, !dbg !1247
}

CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595:   %call = call i32 @atoi(i8* %0) #10, !dbg !1114
SUSAN: getting value name for:   %call = call i32 @atoi(i8* %0) #10, !dbg !1114
inst from IRNaming:   %call = call i32 @atoi(i8* %0) #10, !dbg !1114
original name : n
returning name: n
CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595:   %call2 = call i32 @atoi(i8* %1) #10, !dbg !1117
SUSAN: getting value name for:   %call2 = call i32 @atoi(i8* %1) #10, !dbg !1117
inst from IRNaming:   %call2 = call i32 @atoi(i8* %1) #10, !dbg !1117
original name : m
returning name: m
CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595:   %alpha = alloca double, align 8
SUSAN: getting value name for:   %alpha = alloca double, align 8
inst from IRNaming:   %alpha = alloca double, align 8
original name : alpha
returning name: alpha
CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595:   %3 = bitcast i8* %call6 to double*, !dbg !1130
SUSAN: visiting cast:   %3 = bitcast i8* %call6 to double*, !dbg !1130
SUSAN: printing cast from: i8* to double*
CBackend: writeOperand 3595:   %call6 = call noalias i8* @malloc(i64 %mul5) #11, !dbg !1128, !tulip.target.mapdata.to !1129
SUSAN: getting value name for:   %call6 = call noalias i8* @malloc(i64 %mul5) #11, !dbg !1128, !tulip.target.mapdata.to !1129
inst from IRNaming:   %call6 = call noalias i8* @malloc(i64 %mul5) #11, !dbg !1128, !tulip.target.mapdata.to !1129
original name : A
returning name: A
CBackend: writeoperand here 3674? 
CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595:   %4 = bitcast i8* %call10 to double*, !dbg !1140
SUSAN: visiting cast:   %4 = bitcast i8* %call10 to double*, !dbg !1140
SUSAN: printing cast from: i8* to double*
CBackend: writeOperand 3595:   %call10 = call noalias i8* @malloc(i64 %mul9) #11, !dbg !1136, !tulip.target.mapdata.to !1137, !tulip.target.mapdata.from !1139
SUSAN: getting value name for:   %call10 = call noalias i8* @malloc(i64 %mul9) #11, !dbg !1136, !tulip.target.mapdata.to !1137, !tulip.target.mapdata.from !1139
inst from IRNaming:   %call10 = call noalias i8* @malloc(i64 %mul9) #11, !dbg !1136, !tulip.target.mapdata.to !1137, !tulip.target.mapdata.from !1139
original name : B
returning name: B
CBackend: writeoperand here 3674? 
CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595: 
; Function Attrs: noinline uwtable
define internal void @_ZL6kerneliidPdS_(i32 %n, i32 %m, double %alpha, double* %B, double* %A) #7 !dbg !1248 {
entry:
  %agg.tmp = alloca %struct.dim3, align 4
  %agg.tmp1 = alloca %struct.dim3, align 4
  %agg.tmp.coerce = alloca { i64, i32 }, align 4
  %agg.tmp1.coerce = alloca { i64, i32 }, align 4
  %block = alloca %struct.dim3, align 4
  %grid = alloca %struct.dim3, align 4
  %agg.tmp5 = alloca %struct.dim3, align 4
  %agg.tmp6 = alloca %struct.dim3, align 4
  %agg.tmp5.coerce = alloca { i64, i32 }, align 4
  %agg.tmp6.coerce = alloca { i64, i32 }, align 4
  call void @llvm.dbg.value(metadata i32 %n, metadata !1251, metadata !DIExpression()), !dbg !1252
  call void @llvm.dbg.value(metadata i32 %m, metadata !1253, metadata !DIExpression()), !dbg !1252
  call void @llvm.dbg.value(metadata double %alpha, metadata !1254, metadata !DIExpression()), !dbg !1252
  call void @llvm.dbg.value(metadata double* %B, metadata !1255, metadata !DIExpression()), !dbg !1252
  call void @llvm.dbg.value(metadata double* %A, metadata !1256, metadata !DIExpression()), !dbg !1252
  call void @llvm.dbg.value(metadata i32 256, metadata !1257, metadata !DIExpression()), !dbg !1252
  %call = call i32 @_ZL10num_blocksii(i32 %n, i32 256), !dbg !1259
  %dim3gep.0 = getelementptr %struct.dim3, %struct.dim3* %agg.tmp, i32 0, i32 0
  store i32 %call, i32* %dim3gep.0
  %dim3gep.1 = getelementptr %struct.dim3, %struct.dim3* %agg.tmp, i32 0, i32 1
  store i32 1, i32* %dim3gep.1
  %dim3gep.2 = getelementptr %struct.dim3, %struct.dim3* %agg.tmp, i32 0, i32 2
  store i32 1, i32* %dim3gep.2
  %dim3gep.01 = getelementptr %struct.dim3, %struct.dim3* %agg.tmp1, i32 0, i32 0
  store i32 256, i32* %dim3gep.01
  %dim3gep.12 = getelementptr %struct.dim3, %struct.dim3* %agg.tmp1, i32 0, i32 1
  store i32 1, i32* %dim3gep.12
  %dim3gep.23 = getelementptr %struct.dim3, %struct.dim3* %agg.tmp1, i32 0, i32 2
  store i32 1, i32* %dim3gep.23
  %0 = bitcast { i64, i32 }* %agg.tmp.coerce to i8*, !dbg !1260
  %1 = bitcast %struct.dim3* %agg.tmp to i8*, !dbg !1260
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %0, i8* align 4 %1, i64 12, i1 false), !dbg !1260
  %2 = bitcast { i64, i32 }* %agg.tmp1.coerce to i8*, !dbg !1260
  %3 = bitcast %struct.dim3* %agg.tmp1 to i8*, !dbg !1260
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %2, i8* align 4 %3, i64 12, i1 false), !dbg !1260
  br label %header.0

header.0:                                         ; preds = %latch.0, %entry
  %indvar.0 = phi i32 [ 0, %entry ], [ %indvar.next.0, %latch.0 ]
  %exitcond24 = icmp ne i32 %indvar.0, %call
  br i1 %exitcond24, label %header.1.preheader, label %kcall.end, !tulip.doall.loop.grid !1149

header.1.preheader:                               ; preds = %header.0
  br label %header.1

header.1:                                         ; preds = %header.1.preheader, %latch.1
  %indvar.1 = phi i32 [ %indvar.next.1, %latch.1 ], [ 0, %header.1.preheader ]
  %exitcond23 = icmp ne i32 %indvar.1, 256
  br i1 %exitcond23, label %kcall.configok, label %latch.0, !tulip.doall.loop.block !1149

latch.1:                                          ; preds = %kcall.configok
  %indvar.next.1 = add nuw nsw i32 %indvar.1, 1
  br label %header.1

latch.0:                                          ; preds = %header.1
  %indvar.next.0 = add i32 %indvar.0, 1
  br label %header.0

kcall.configok:                                   ; preds = %header.1
  call void @_Z15kernel_contractiidPdS_.1(i32 %n, i32 %m, double %alpha, double* %B, double* %A, i32 %call, i32 1, i32 1, i32 256, i32 1, i32 1, i32 %indvar.0, i32 0, i32 0, i32 %indvar.1, i32 0, i32 0)
  br label %latch.1

kcall.end:                                        ; preds = %header.0
  call void @llvm.dbg.declare(metadata %struct.dim3* %block, metadata !1261, metadata !DIExpression()), !dbg !1286
  %dim3gep.04 = getelementptr %struct.dim3, %struct.dim3* %block, i32 0, i32 0
  store i32 8, i32* %dim3gep.04
  %dim3gep.15 = getelementptr %struct.dim3, %struct.dim3* %block, i32 0, i32 1
  store i32 32, i32* %dim3gep.15
  %dim3gep.26 = getelementptr %struct.dim3, %struct.dim3* %block, i32 0, i32 2
  store i32 1, i32* %dim3gep.26
  call void @llvm.dbg.declare(metadata %struct.dim3* %grid, metadata !1287, metadata !DIExpression()), !dbg !1288
  %x = getelementptr inbounds %struct.dim3, %struct.dim3* %block, i32 0, i32 0, !dbg !1289
  %4 = load i32, i32* %x, align 4, !dbg !1289
  %call3 = call i32 @_ZL10num_blocksii(i32 %m, i32 %4), !dbg !1290
  %y = getelementptr inbounds %struct.dim3, %struct.dim3* %block, i32 0, i32 1, !dbg !1291
  %5 = load i32, i32* %y, align 4, !dbg !1291
  %call4 = call i32 @_ZL10num_blocksii(i32 %n, i32 %5), !dbg !1292
  %dim3gep.07 = getelementptr %struct.dim3, %struct.dim3* %grid, i32 0, i32 0
  store i32 %call3, i32* %dim3gep.07
  %dim3gep.18 = getelementptr %struct.dim3, %struct.dim3* %grid, i32 0, i32 1
  store i32 %call4, i32* %dim3gep.18
  %dim3gep.29 = getelementptr %struct.dim3, %struct.dim3* %grid, i32 0, i32 2
  store i32 1, i32* %dim3gep.29
  %6 = bitcast %struct.dim3* %agg.tmp5 to i8*, !dbg !1293
  %7 = bitcast %struct.dim3* %grid to i8*, !dbg !1293
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %6, i8* align 4 %7, i64 12, i1 false), !dbg !1293
  %8 = bitcast %struct.dim3* %agg.tmp6 to i8*, !dbg !1294
  %9 = bitcast %struct.dim3* %block to i8*, !dbg !1294
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %8, i8* align 4 %9, i64 12, i1 false), !dbg !1294
  %10 = bitcast { i64, i32 }* %agg.tmp5.coerce to i8*, !dbg !1295
  %11 = bitcast %struct.dim3* %agg.tmp5 to i8*, !dbg !1295
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %10, i8* align 4 %11, i64 12, i1 false), !dbg !1295
  %12 = bitcast { i64, i32 }* %agg.tmp6.coerce to i8*, !dbg !1295
  %13 = bitcast %struct.dim3* %agg.tmp6 to i8*, !dbg !1295
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %12, i8* align 4 %13, i64 12, i1 false), !dbg !1295
  br label %header.010

header.010:                                       ; preds = %latch.013, %kcall.end
  %indvar.017 = phi i32 [ 0, %kcall.end ], [ %indvar.next.019, %latch.013 ]
  %exitcond22 = icmp ne i32 %indvar.017, %call3
  br i1 %exitcond22, label %header.111.preheader, label %kcall.end10, !tulip.doall.loop.grid.collapse !1149

header.111.preheader:                             ; preds = %header.010
  br label %header.111

header.111:                                       ; preds = %header.111.preheader, %latch.112
  %indvar.114 = phi i32 [ %indvar.next.116, %latch.112 ], [ 0, %header.111.preheader ]
  %exitcond21 = icmp ne i32 %indvar.114, %call4
  br i1 %exitcond21, label %header.2.preheader, label %latch.013

header.2.preheader:                               ; preds = %header.111
  br label %header.2

header.2:                                         ; preds = %header.2.preheader, %latch.2
  %indvar.2 = phi i32 [ %indvar.next.2, %latch.2 ], [ 0, %header.2.preheader ]
  %exitcond20 = icmp ne i32 %indvar.2, 8
  br i1 %exitcond20, label %header.3.preheader, label %latch.112, !tulip.doall.loop.block.collapse !1149

header.3.preheader:                               ; preds = %header.2
  br label %header.3

header.3:                                         ; preds = %header.3.preheader, %latch.3
  %indvar.3 = phi i32 [ %indvar.next.3, %latch.3 ], [ 0, %header.3.preheader ]
  %exitcond = icmp ne i32 %indvar.3, 32
  br i1 %exitcond, label %kcall.configok9, label %latch.2

latch.3:                                          ; preds = %kcall.configok9
  %indvar.next.3 = add nuw nsw i32 %indvar.3, 1
  br label %header.3

latch.2:                                          ; preds = %header.3
  %indvar.next.2 = add nuw nsw i32 %indvar.2, 1
  br label %header.2

latch.112:                                        ; preds = %header.2
  %indvar.next.116 = add i32 %indvar.114, 1
  br label %header.111

latch.013:                                        ; preds = %header.111
  %indvar.next.019 = add i32 %indvar.017, 1
  br label %header.010

kcall.configok9:                                  ; preds = %header.3
  call void @_Z12kernel_alphaiidPdS_.2(i32 %n, i32 %m, double %alpha, double* %B, double* %A, i32 %call3, i32 %call4, i32 1, i32 8, i32 32, i32 1, i32 %indvar.017, i32 %indvar.114, i32 0, i32 %indvar.2, i32 %indvar.3, i32 0)
  br label %latch.3

kcall.end10:                                      ; preds = %header.010
  ret void, !dbg !1296
}

SUSAN: getting value name for: 
; Function Attrs: noinline uwtable
define internal void @_ZL6kerneliidPdS_(i32 %n, i32 %m, double %alpha, double* %B, double* %A) #7 !dbg !1248 {
entry:
  %agg.tmp = alloca %struct.dim3, align 4
  %agg.tmp1 = alloca %struct.dim3, align 4
  %agg.tmp.coerce = alloca { i64, i32 }, align 4
  %agg.tmp1.coerce = alloca { i64, i32 }, align 4
  %block = alloca %struct.dim3, align 4
  %grid = alloca %struct.dim3, align 4
  %agg.tmp5 = alloca %struct.dim3, align 4
  %agg.tmp6 = alloca %struct.dim3, align 4
  %agg.tmp5.coerce = alloca { i64, i32 }, align 4
  %agg.tmp6.coerce = alloca { i64, i32 }, align 4
  call void @llvm.dbg.value(metadata i32 %n, metadata !1251, metadata !DIExpression()), !dbg !1252
  call void @llvm.dbg.value(metadata i32 %m, metadata !1253, metadata !DIExpression()), !dbg !1252
  call void @llvm.dbg.value(metadata double %alpha, metadata !1254, metadata !DIExpression()), !dbg !1252
  call void @llvm.dbg.value(metadata double* %B, metadata !1255, metadata !DIExpression()), !dbg !1252
  call void @llvm.dbg.value(metadata double* %A, metadata !1256, metadata !DIExpression()), !dbg !1252
  call void @llvm.dbg.value(metadata i32 256, metadata !1257, metadata !DIExpression()), !dbg !1252
  %call = call i32 @_ZL10num_blocksii(i32 %n, i32 256), !dbg !1259
  %dim3gep.0 = getelementptr %struct.dim3, %struct.dim3* %agg.tmp, i32 0, i32 0
  store i32 %call, i32* %dim3gep.0
  %dim3gep.1 = getelementptr %struct.dim3, %struct.dim3* %agg.tmp, i32 0, i32 1
  store i32 1, i32* %dim3gep.1
  %dim3gep.2 = getelementptr %struct.dim3, %struct.dim3* %agg.tmp, i32 0, i32 2
  store i32 1, i32* %dim3gep.2
  %dim3gep.01 = getelementptr %struct.dim3, %struct.dim3* %agg.tmp1, i32 0, i32 0
  store i32 256, i32* %dim3gep.01
  %dim3gep.12 = getelementptr %struct.dim3, %struct.dim3* %agg.tmp1, i32 0, i32 1
  store i32 1, i32* %dim3gep.12
  %dim3gep.23 = getelementptr %struct.dim3, %struct.dim3* %agg.tmp1, i32 0, i32 2
  store i32 1, i32* %dim3gep.23
  %0 = bitcast { i64, i32 }* %agg.tmp.coerce to i8*, !dbg !1260
  %1 = bitcast %struct.dim3* %agg.tmp to i8*, !dbg !1260
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %0, i8* align 4 %1, i64 12, i1 false), !dbg !1260
  %2 = bitcast { i64, i32 }* %agg.tmp1.coerce to i8*, !dbg !1260
  %3 = bitcast %struct.dim3* %agg.tmp1 to i8*, !dbg !1260
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %2, i8* align 4 %3, i64 12, i1 false), !dbg !1260
  br label %header.0

header.0:                                         ; preds = %latch.0, %entry
  %indvar.0 = phi i32 [ 0, %entry ], [ %indvar.next.0, %latch.0 ]
  %exitcond24 = icmp ne i32 %indvar.0, %call
  br i1 %exitcond24, label %header.1.preheader, label %kcall.end, !tulip.doall.loop.grid !1149

header.1.preheader:                               ; preds = %header.0
  br label %header.1

header.1:                                         ; preds = %header.1.preheader, %latch.1
  %indvar.1 = phi i32 [ %indvar.next.1, %latch.1 ], [ 0, %header.1.preheader ]
  %exitcond23 = icmp ne i32 %indvar.1, 256
  br i1 %exitcond23, label %kcall.configok, label %latch.0, !tulip.doall.loop.block !1149

latch.1:                                          ; preds = %kcall.configok
  %indvar.next.1 = add nuw nsw i32 %indvar.1, 1
  br label %header.1

latch.0:                                          ; preds = %header.1
  %indvar.next.0 = add i32 %indvar.0, 1
  br label %header.0

kcall.configok:                                   ; preds = %header.1
  call void @_Z15kernel_contractiidPdS_.1(i32 %n, i32 %m, double %alpha, double* %B, double* %A, i32 %call, i32 1, i32 1, i32 256, i32 1, i32 1, i32 %indvar.0, i32 0, i32 0, i32 %indvar.1, i32 0, i32 0)
  br label %latch.1

kcall.end:                                        ; preds = %header.0
  call void @llvm.dbg.declare(metadata %struct.dim3* %block, metadata !1261, metadata !DIExpression()), !dbg !1286
  %dim3gep.04 = getelementptr %struct.dim3, %struct.dim3* %block, i32 0, i32 0
  store i32 8, i32* %dim3gep.04
  %dim3gep.15 = getelementptr %struct.dim3, %struct.dim3* %block, i32 0, i32 1
  store i32 32, i32* %dim3gep.15
  %dim3gep.26 = getelementptr %struct.dim3, %struct.dim3* %block, i32 0, i32 2
  store i32 1, i32* %dim3gep.26
  call void @llvm.dbg.declare(metadata %struct.dim3* %grid, metadata !1287, metadata !DIExpression()), !dbg !1288
  %x = getelementptr inbounds %struct.dim3, %struct.dim3* %block, i32 0, i32 0, !dbg !1289
  %4 = load i32, i32* %x, align 4, !dbg !1289
  %call3 = call i32 @_ZL10num_blocksii(i32 %m, i32 %4), !dbg !1290
  %y = getelementptr inbounds %struct.dim3, %struct.dim3* %block, i32 0, i32 1, !dbg !1291
  %5 = load i32, i32* %y, align 4, !dbg !1291
  %call4 = call i32 @_ZL10num_blocksii(i32 %n, i32 %5), !dbg !1292
  %dim3gep.07 = getelementptr %struct.dim3, %struct.dim3* %grid, i32 0, i32 0
  store i32 %call3, i32* %dim3gep.07
  %dim3gep.18 = getelementptr %struct.dim3, %struct.dim3* %grid, i32 0, i32 1
  store i32 %call4, i32* %dim3gep.18
  %dim3gep.29 = getelementptr %struct.dim3, %struct.dim3* %grid, i32 0, i32 2
  store i32 1, i32* %dim3gep.29
  %6 = bitcast %struct.dim3* %agg.tmp5 to i8*, !dbg !1293
  %7 = bitcast %struct.dim3* %grid to i8*, !dbg !1293
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %6, i8* align 4 %7, i64 12, i1 false), !dbg !1293
  %8 = bitcast %struct.dim3* %agg.tmp6 to i8*, !dbg !1294
  %9 = bitcast %struct.dim3* %block to i8*, !dbg !1294
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %8, i8* align 4 %9, i64 12, i1 false), !dbg !1294
  %10 = bitcast { i64, i32 }* %agg.tmp5.coerce to i8*, !dbg !1295
  %11 = bitcast %struct.dim3* %agg.tmp5 to i8*, !dbg !1295
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %10, i8* align 4 %11, i64 12, i1 false), !dbg !1295
  %12 = bitcast { i64, i32 }* %agg.tmp6.coerce to i8*, !dbg !1295
  %13 = bitcast %struct.dim3* %agg.tmp6 to i8*, !dbg !1295
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %12, i8* align 4 %13, i64 12, i1 false), !dbg !1295
  br label %header.010

header.010:                                       ; preds = %latch.013, %kcall.end
  %indvar.017 = phi i32 [ 0, %kcall.end ], [ %indvar.next.019, %latch.013 ]
  %exitcond22 = icmp ne i32 %indvar.017, %call3
  br i1 %exitcond22, label %header.111.preheader, label %kcall.end10, !tulip.doall.loop.grid.collapse !1149

header.111.preheader:                             ; preds = %header.010
  br label %header.111

header.111:                                       ; preds = %header.111.preheader, %latch.112
  %indvar.114 = phi i32 [ %indvar.next.116, %latch.112 ], [ 0, %header.111.preheader ]
  %exitcond21 = icmp ne i32 %indvar.114, %call4
  br i1 %exitcond21, label %header.2.preheader, label %latch.013

header.2.preheader:                               ; preds = %header.111
  br label %header.2

header.2:                                         ; preds = %header.2.preheader, %latch.2
  %indvar.2 = phi i32 [ %indvar.next.2, %latch.2 ], [ 0, %header.2.preheader ]
  %exitcond20 = icmp ne i32 %indvar.2, 8
  br i1 %exitcond20, label %header.3.preheader, label %latch.112, !tulip.doall.loop.block.collapse !1149

header.3.preheader:                               ; preds = %header.2
  br label %header.3

header.3:                                         ; preds = %header.3.preheader, %latch.3
  %indvar.3 = phi i32 [ %indvar.next.3, %latch.3 ], [ 0, %header.3.preheader ]
  %exitcond = icmp ne i32 %indvar.3, 32
  br i1 %exitcond, label %kcall.configok9, label %latch.2

latch.3:                                          ; preds = %kcall.configok9
  %indvar.next.3 = add nuw nsw i32 %indvar.3, 1
  br label %header.3

latch.2:                                          ; preds = %header.3
  %indvar.next.2 = add nuw nsw i32 %indvar.2, 1
  br label %header.2

latch.112:                                        ; preds = %header.2
  %indvar.next.116 = add i32 %indvar.114, 1
  br label %header.111

latch.013:                                        ; preds = %header.111
  %indvar.next.019 = add i32 %indvar.017, 1
  br label %header.010

kcall.configok9:                                  ; preds = %header.3
  call void @_Z12kernel_alphaiidPdS_.2(i32 %n, i32 %m, double %alpha, double* %B, double* %A, i32 %call3, i32 %call4, i32 1, i32 8, i32 32, i32 1, i32 %indvar.017, i32 %indvar.114, i32 0, i32 %indvar.2, i32 %indvar.3, i32 0)
  br label %latch.3

kcall.end10:                                      ; preds = %header.010
  ret void, !dbg !1296
}

CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595:   %call = call i32 @atoi(i8* %0) #10, !dbg !1114
SUSAN: getting value name for:   %call = call i32 @atoi(i8* %0) #10, !dbg !1114
inst from IRNaming:   %call = call i32 @atoi(i8* %0) #10, !dbg !1114
original name : n
returning name: n
CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595:   %call2 = call i32 @atoi(i8* %1) #10, !dbg !1117
SUSAN: getting value name for:   %call2 = call i32 @atoi(i8* %1) #10, !dbg !1117
inst from IRNaming:   %call2 = call i32 @atoi(i8* %1) #10, !dbg !1117
original name : m
returning name: m
CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595:   %7 = load double, double* %alpha, align 8, !dbg !1150
SUSAN: loadInst:   %7 = load double, double* %alpha, align 8, !dbg !1150
SUSAN: getting value name for:   %alpha = alloca double, align 8
inst from IRNaming:   %alpha = alloca double, align 8
original name : alpha
returning name: alpha
CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595:   %4 = bitcast i8* %call10 to double*, !dbg !1140
SUSAN: visiting cast:   %4 = bitcast i8* %call10 to double*, !dbg !1140
SUSAN: printing cast from: i8* to double*
CBackend: writeOperand 3595:   %call10 = call noalias i8* @malloc(i64 %mul9) #11, !dbg !1136, !tulip.target.mapdata.to !1137, !tulip.target.mapdata.from !1139
SUSAN: getting value name for:   %call10 = call noalias i8* @malloc(i64 %mul9) #11, !dbg !1136, !tulip.target.mapdata.to !1137, !tulip.target.mapdata.from !1139
inst from IRNaming:   %call10 = call noalias i8* @malloc(i64 %mul9) #11, !dbg !1136, !tulip.target.mapdata.to !1137, !tulip.target.mapdata.from !1139
original name : B
returning name: B
CBackend: writeoperand here 3674? 
CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595:   %3 = bitcast i8* %call6 to double*, !dbg !1130
SUSAN: visiting cast:   %3 = bitcast i8* %call6 to double*, !dbg !1130
SUSAN: printing cast from: i8* to double*
CBackend: writeOperand 3595:   %call6 = call noalias i8* @malloc(i64 %mul5) #11, !dbg !1128, !tulip.target.mapdata.to !1129
SUSAN: getting value name for:   %call6 = call noalias i8* @malloc(i64 %mul5) #11, !dbg !1128, !tulip.target.mapdata.to !1129
inst from IRNaming:   %call6 = call noalias i8* @malloc(i64 %mul5) #11, !dbg !1128, !tulip.target.mapdata.to !1129
original name : A
returning name: A
CBackend: writeoperand here 3674? 
CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595:   %cmp = icmp eq i32 %call4, 1, !dbg !1158
CBackend: writeOperand 3595:   %call4 = call i32 @atoi(i8* %2) #10, !dbg !1120
SUSAN: getting value name for:   %call4 = call i32 @atoi(i8* %2) #10, !dbg !1120
inst from IRNaming:   %call4 = call i32 @atoi(i8* %2) #10, !dbg !1120
original name : dump_code
returning name: dump_code
CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595: i32 1
CBackend: writeoperand here 3674? 
CBackend: writeoperand here 3674? 
Linear Region with entry block: if.then
SUSAN: printing bb:if.then
CBEBackend: printing bb 7082 if.then
SUSAN: printing instruction   call void @_ZL11print_arrayiiPd(i32 %call2, i32 %call, double* %4), !dbg !1161 at 6678
CBackend: writeOperand 3595: 
; Function Attrs: noinline uwtable
define internal void @_ZL11print_arrayiiPd(i32 %m, i32 %n, double* %B) #7 !dbg !1297 {
entry:
  call void @llvm.dbg.value(metadata i32 %m, metadata !1300, metadata !DIExpression()), !dbg !1301
  call void @llvm.dbg.value(metadata i32 %n, metadata !1302, metadata !DIExpression()), !dbg !1301
  call void @llvm.dbg.value(metadata double* %B, metadata !1303, metadata !DIExpression()), !dbg !1301
  call void @llvm.dbg.value(metadata i32 0, metadata !1304, metadata !DIExpression()), !dbg !1301
  %0 = sext i32 %n to i64, !dbg !1305
  %1 = sext i32 %m to i64, !dbg !1305
  %2 = sext i32 %n to i64, !dbg !1305
  %3 = sext i32 %n to i64, !dbg !1305
  br label %for.cond, !dbg !1305

for.cond:                                         ; preds = %for.inc8, %entry
  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc8 ], [ 0, %entry ], !dbg !1307
  call void @llvm.dbg.value(metadata i64 %indvars.iv3, metadata !1304, metadata !DIExpression()), !dbg !1301
  %cmp = icmp slt i64 %indvars.iv3, %1, !dbg !1308
  br i1 %cmp, label %for.body, label %for.end10, !dbg !1310

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.value(metadata i32 0, metadata !1311, metadata !DIExpression()), !dbg !1301
  br label %for.cond1, !dbg !1312

for.cond1:                                        ; preds = %for.inc, %for.body
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1314
  call void @llvm.dbg.value(metadata i64 %indvars.iv, metadata !1311, metadata !DIExpression()), !dbg !1301
  %cmp2 = icmp slt i64 %indvars.iv, %0, !dbg !1315
  br i1 %cmp2, label %for.body3, label %for.end, !dbg !1317

for.body3:                                        ; preds = %for.cond1
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !1318
  %5 = mul nsw i64 %indvars.iv3, %2, !dbg !1320
  %6 = add nsw i64 %5, %indvars.iv, !dbg !1321
  %arrayidx = getelementptr inbounds double, double* %B, i64 %6, !dbg !1322
  %7 = load double, double* %arrayidx, align 8, !dbg !1322
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %4, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), double %7), !dbg !1323
  %8 = mul nsw i64 %indvars.iv3, %3, !dbg !1324
  %9 = add nsw i64 %8, %indvars.iv, !dbg !1326
  %10 = trunc i64 %9 to i32, !dbg !1327
  %rem = srem i32 %10, 20, !dbg !1327
  %cmp6 = icmp eq i32 %rem, 0, !dbg !1328
  br i1 %cmp6, label %if.then, label %if.end, !dbg !1329

if.then:                                          ; preds = %for.body3
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !1330
  %call7 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %11, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !1331
  br label %if.end, !dbg !1331

if.end:                                           ; preds = %if.then, %for.body3
  br label %for.inc, !dbg !1332

for.inc:                                          ; preds = %if.end
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !1333
  call void @llvm.dbg.value(metadata i32 undef, metadata !1311, metadata !DIExpression(DW_OP_plus_uconst, 1, DW_OP_stack_value)), !dbg !1301
  br label %for.cond1, !dbg !1334, !llvm.loop !1335

for.end:                                          ; preds = %for.cond1
  br label %for.inc8, !dbg !1336

for.inc8:                                         ; preds = %for.end
  %indvars.iv.next4 = add nuw nsw i64 %indvars.iv3, 1, !dbg !1337
  call void @llvm.dbg.value(metadata i32 undef, metadata !1304, metadata !DIExpression(DW_OP_plus_uconst, 1, DW_OP_stack_value)), !dbg !1301
  br label %for.cond, !dbg !1338, !llvm.loop !1339

for.end10:                                        ; preds = %for.cond
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !1341
  %call11 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %12, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !1342
  ret void, !dbg !1343
}

SUSAN: getting value name for: 
; Function Attrs: noinline uwtable
define internal void @_ZL11print_arrayiiPd(i32 %m, i32 %n, double* %B) #7 !dbg !1297 {
entry:
  call void @llvm.dbg.value(metadata i32 %m, metadata !1300, metadata !DIExpression()), !dbg !1301
  call void @llvm.dbg.value(metadata i32 %n, metadata !1302, metadata !DIExpression()), !dbg !1301
  call void @llvm.dbg.value(metadata double* %B, metadata !1303, metadata !DIExpression()), !dbg !1301
  call void @llvm.dbg.value(metadata i32 0, metadata !1304, metadata !DIExpression()), !dbg !1301
  %0 = sext i32 %n to i64, !dbg !1305
  %1 = sext i32 %m to i64, !dbg !1305
  %2 = sext i32 %n to i64, !dbg !1305
  %3 = sext i32 %n to i64, !dbg !1305
  br label %for.cond, !dbg !1305

for.cond:                                         ; preds = %for.inc8, %entry
  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc8 ], [ 0, %entry ], !dbg !1307
  call void @llvm.dbg.value(metadata i64 %indvars.iv3, metadata !1304, metadata !DIExpression()), !dbg !1301
  %cmp = icmp slt i64 %indvars.iv3, %1, !dbg !1308
  br i1 %cmp, label %for.body, label %for.end10, !dbg !1310

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.value(metadata i32 0, metadata !1311, metadata !DIExpression()), !dbg !1301
  br label %for.cond1, !dbg !1312

for.cond1:                                        ; preds = %for.inc, %for.body
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1314
  call void @llvm.dbg.value(metadata i64 %indvars.iv, metadata !1311, metadata !DIExpression()), !dbg !1301
  %cmp2 = icmp slt i64 %indvars.iv, %0, !dbg !1315
  br i1 %cmp2, label %for.body3, label %for.end, !dbg !1317

for.body3:                                        ; preds = %for.cond1
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !1318
  %5 = mul nsw i64 %indvars.iv3, %2, !dbg !1320
  %6 = add nsw i64 %5, %indvars.iv, !dbg !1321
  %arrayidx = getelementptr inbounds double, double* %B, i64 %6, !dbg !1322
  %7 = load double, double* %arrayidx, align 8, !dbg !1322
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %4, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), double %7), !dbg !1323
  %8 = mul nsw i64 %indvars.iv3, %3, !dbg !1324
  %9 = add nsw i64 %8, %indvars.iv, !dbg !1326
  %10 = trunc i64 %9 to i32, !dbg !1327
  %rem = srem i32 %10, 20, !dbg !1327
  %cmp6 = icmp eq i32 %rem, 0, !dbg !1328
  br i1 %cmp6, label %if.then, label %if.end, !dbg !1329

if.then:                                          ; preds = %for.body3
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !1330
  %call7 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %11, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !1331
  br label %if.end, !dbg !1331

if.end:                                           ; preds = %if.then, %for.body3
  br label %for.inc, !dbg !1332

for.inc:                                          ; preds = %if.end
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !1333
  call void @llvm.dbg.value(metadata i32 undef, metadata !1311, metadata !DIExpression(DW_OP_plus_uconst, 1, DW_OP_stack_value)), !dbg !1301
  br label %for.cond1, !dbg !1334, !llvm.loop !1335

for.end:                                          ; preds = %for.cond1
  br label %for.inc8, !dbg !1336

for.inc8:                                         ; preds = %for.end
  %indvars.iv.next4 = add nuw nsw i64 %indvars.iv3, 1, !dbg !1337
  call void @llvm.dbg.value(metadata i32 undef, metadata !1304, metadata !DIExpression(DW_OP_plus_uconst, 1, DW_OP_stack_value)), !dbg !1301
  br label %for.cond, !dbg !1338, !llvm.loop !1339

for.end10:                                        ; preds = %for.cond
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !1341
  %call11 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %12, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !1342
  ret void, !dbg !1343
}

CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595:   %call2 = call i32 @atoi(i8* %1) #10, !dbg !1117
SUSAN: getting value name for:   %call2 = call i32 @atoi(i8* %1) #10, !dbg !1117
inst from IRNaming:   %call2 = call i32 @atoi(i8* %1) #10, !dbg !1117
original name : m
returning name: m
CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595:   %call = call i32 @atoi(i8* %0) #10, !dbg !1114
SUSAN: getting value name for:   %call = call i32 @atoi(i8* %0) #10, !dbg !1114
inst from IRNaming:   %call = call i32 @atoi(i8* %0) #10, !dbg !1114
original name : n
returning name: n
CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595:   %4 = bitcast i8* %call10 to double*, !dbg !1140
SUSAN: visiting cast:   %4 = bitcast i8* %call10 to double*, !dbg !1140
SUSAN: printing cast from: i8* to double*
CBackend: writeOperand 3595:   %call10 = call noalias i8* @malloc(i64 %mul9) #11, !dbg !1136, !tulip.target.mapdata.to !1137, !tulip.target.mapdata.from !1139
SUSAN: getting value name for:   %call10 = call noalias i8* @malloc(i64 %mul9) #11, !dbg !1136, !tulip.target.mapdata.to !1137, !tulip.target.mapdata.from !1139
inst from IRNaming:   %call10 = call noalias i8* @malloc(i64 %mul9) #11, !dbg !1136, !tulip.target.mapdata.to !1137, !tulip.target.mapdata.from !1139
original name : B
returning name: B
CBackend: writeoperand here 3674? 
CBackend: writeoperand here 3674? 
printing unconditional branch   br label %if.end, !dbg !1161
Linear Region with entry block: if.end
SUSAN: printing bb:if.end
CBEBackend: printing bb 7082 if.end
SUSAN: printing instruction   call void @free(i8* %10) #11, !dbg !1163 at 6678
CBackend: writeOperand 3595: 
; Function Attrs: nounwind
declare dso_local void @free(i8*) #4

SUSAN: getting value name for: 
; Function Attrs: nounwind
declare dso_local void @free(i8*) #4

CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595:   %10 = bitcast double* %3 to i8*, !dbg !1162
SUSAN: visiting cast:   %10 = bitcast double* %3 to i8*, !dbg !1162
SUSAN: printing cast from: double* to i8*
CBackend: writeOperand 3595:   %3 = bitcast i8* %call6 to double*, !dbg !1130
SUSAN: visiting cast:   %3 = bitcast i8* %call6 to double*, !dbg !1130
SUSAN: printing cast from: i8* to double*
CBackend: writeOperand 3595:   %call6 = call noalias i8* @malloc(i64 %mul5) #11, !dbg !1128, !tulip.target.mapdata.to !1129
SUSAN: getting value name for:   %call6 = call noalias i8* @malloc(i64 %mul5) #11, !dbg !1128, !tulip.target.mapdata.to !1129
inst from IRNaming:   %call6 = call noalias i8* @malloc(i64 %mul5) #11, !dbg !1128, !tulip.target.mapdata.to !1129
original name : A
returning name: A
CBackend: writeoperand here 3674? 
CBackend: writeoperand here 3674? 
CBackend: writeoperand here 3674? 
SUSAN: printing instruction   call void @free(i8* %11) #11, !dbg !1165 at 6678
CBackend: writeOperand 3595: 
; Function Attrs: nounwind
declare dso_local void @free(i8*) #4

SUSAN: getting value name for: 
; Function Attrs: nounwind
declare dso_local void @free(i8*) #4

CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595:   %11 = bitcast double* %4 to i8*, !dbg !1164
SUSAN: visiting cast:   %11 = bitcast double* %4 to i8*, !dbg !1164
SUSAN: printing cast from: double* to i8*
CBackend: writeOperand 3595:   %4 = bitcast i8* %call10 to double*, !dbg !1140
SUSAN: visiting cast:   %4 = bitcast i8* %call10 to double*, !dbg !1140
SUSAN: printing cast from: i8* to double*
CBackend: writeOperand 3595:   %call10 = call noalias i8* @malloc(i64 %mul9) #11, !dbg !1136, !tulip.target.mapdata.to !1137, !tulip.target.mapdata.from !1139
SUSAN: getting value name for:   %call10 = call noalias i8* @malloc(i64 %mul9) #11, !dbg !1136, !tulip.target.mapdata.to !1137, !tulip.target.mapdata.from !1139
inst from IRNaming:   %call10 = call noalias i8* @malloc(i64 %mul9) #11, !dbg !1136, !tulip.target.mapdata.to !1137, !tulip.target.mapdata.from !1139
original name : B
returning name: B
CBackend: writeoperand here 3674? 
CBackend: writeoperand here 3674? 
CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595: i32 0
CBackend: writeoperand here 3674? 
CBackend: iterating function 1759: atoi
CBackend: iterating function 1759: malloc
CBackend: iterating function 1759: _ZL10init_arrayiiPdS_S_
CBackend: printing function 1770_ZL10init_arrayiiPdS_S_
CBackend: here? 1175
SUSAN: found IV 784  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc32 ], [ 0, %for.end6 ], !dbg !1149
term 6818:   br i1 %cmp8, label %for.body9, label %for.end34, !dbg !1152
none omp loop ub:   %6 = sext i32 %n to i64, !dbg !1147
CBackend: here? 1175
SUSAN: found IV 784  %indvars.iv9 = phi i64 [ %indvars.iv.next10, %for.inc4 ], [ 0, %entry ], !dbg !1120
term 6818:   br i1 %cmp, label %for.body, label %for.end6, !dbg !1123
none omp loop ub:   %1 = sext i32 %m to i64, !dbg !1118
CBackend: here? 1175
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
term 6818:   br i1 %cmp11, label %for.body12, label %for.end31, !dbg !1158
none omp loop ub:   %5 = sext i32 %m to i64, !dbg !1147
CBackend: here? 1175
SUSAN: found IV 784  %indvars.iv6 = phi i64 [ %indvars.iv.next7, %for.inc ], [ 0, %for.body ], !dbg !1128
term 6818:   br i1 %cmp2, label %for.body3, label %for.end, !dbg !1131
none omp loop ub:   %0 = sext i32 %n to i64, !dbg !1118
=========LOOP PROFILES=========
Loop: Loop at depth 1 containing: %for.cond7<header><exiting>,%for.body9,%for.cond10,%for.end31,%for.inc32<latch>,%for.body12,%for.inc29
    Loop at depth 2 containing: %for.cond10<header><exiting>,%for.body12,%for.inc29<latch>

isomp: 0
Loop: Loop at depth 1 containing: %for.cond<header><exiting>,%for.body,%for.cond1,%for.end,%for.inc4<latch>,%for.body3,%for.inc
    Loop at depth 2 containing: %for.cond1<header><exiting>,%for.body3,%for.inc<latch>

isomp: 0
Loop: Loop at depth 2 containing: %for.cond10<header><exiting>,%for.body12,%for.inc29<latch>

isomp: 0
Loop: Loop at depth 2 containing: %for.cond1<header><exiting>,%for.body3,%for.inc<latch>

isomp: 0
SUSAN: opnd0  %indvars.iv9 = phi i64 [ %indvars.iv.next10, %for.inc4 ], [ 0, %entry ], !dbg !1120
SUSAN: opnd1  %1 = sext i32 %m to i64, !dbg !1118
SUSAN: found IV 784  %indvars.iv9 = phi i64 [ %indvars.iv.next10, %for.inc4 ], [ 0, %entry ], !dbg !1120
SUSAN: opnd0  %indvars.iv6 = phi i64 [ %indvars.iv.next7, %for.inc ], [ 0, %for.body ], !dbg !1128
SUSAN: opnd1  %0 = sext i32 %n to i64, !dbg !1118
SUSAN: found IV 784  %indvars.iv6 = phi i64 [ %indvars.iv.next7, %for.inc ], [ 0, %for.body ], !dbg !1128
SUSAN: opnd0  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc32 ], [ 0, %for.end6 ], !dbg !1149
SUSAN: opnd1  %6 = sext i32 %n to i64, !dbg !1147
SUSAN: found IV 784  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc32 ], [ 0, %for.end6 ], !dbg !1149
SUSAN: opnd0  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
SUSAN: opnd1  %5 = sext i32 %m to i64, !dbg !1147
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
SUSAN: BB:
entry:
  call void @llvm.dbg.value(metadata i32 %n, metadata !1110, metadata !DIExpression()), !dbg !1111
  call void @llvm.dbg.value(metadata i32 %m, metadata !1112, metadata !DIExpression()), !dbg !1111
  call void @llvm.dbg.value(metadata double* %alpha, metadata !1113, metadata !DIExpression()), !dbg !1111
  call void @llvm.dbg.value(metadata double* %A, metadata !1114, metadata !DIExpression()), !dbg !1111
  call void @llvm.dbg.value(metadata double* %B, metadata !1115, metadata !DIExpression()), !dbg !1111
  store double 3.241200e+04, double* %alpha, align 8, !dbg !1116
  call void @llvm.dbg.value(metadata i32 0, metadata !1117, metadata !DIExpression()), !dbg !1111
  %0 = sext i32 %n to i64, !dbg !1118
  %1 = sext i32 %m to i64, !dbg !1118
  %2 = sext i32 %n to i64, !dbg !1118
  br label %for.cond, !dbg !1118

SUSAN: BB:
for.cond:                                         ; preds = %for.inc4, %entry
  %indvars.iv9 = phi i64 [ %indvars.iv.next10, %for.inc4 ], [ 0, %entry ], !dbg !1120
  call void @llvm.dbg.value(metadata i64 %indvars.iv9, metadata !1117, metadata !DIExpression()), !dbg !1111
  %cmp = icmp slt i64 %indvars.iv9, %1, !dbg !1121
  br i1 %cmp, label %for.body, label %for.end6, !dbg !1123

SUSAN: BB:
for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.value(metadata i32 0, metadata !1124, metadata !DIExpression()), !dbg !1111
  br label %for.cond1, !dbg !1125

SUSAN: BB:
for.cond1:                                        ; preds = %for.inc, %for.body
  %indvars.iv6 = phi i64 [ %indvars.iv.next7, %for.inc ], [ 0, %for.body ], !dbg !1128
  call void @llvm.dbg.value(metadata i64 %indvars.iv6, metadata !1124, metadata !DIExpression()), !dbg !1111
  %cmp2 = icmp slt i64 %indvars.iv6, %0, !dbg !1129
  br i1 %cmp2, label %for.body3, label %for.end, !dbg !1131

SUSAN: BB:
for.body3:                                        ; preds = %for.cond1
  %3 = mul nsw i64 %indvars.iv9, %2, !dbg !1132
  %4 = add nsw i64 %3, %indvars.iv6, !dbg !1134
  %arrayidx = getelementptr inbounds double, double* %B, i64 %4, !dbg !1135
  store double 0.000000e+00, double* %arrayidx, align 8, !dbg !1136
  br label %for.inc, !dbg !1137

SUSAN: BB:
for.inc:                                          ; preds = %for.body3
  %indvars.iv.next7 = add nuw nsw i64 %indvars.iv6, 1, !dbg !1138
  call void @llvm.dbg.value(metadata i32 undef, metadata !1124, metadata !DIExpression(DW_OP_plus_uconst, 1, DW_OP_stack_value)), !dbg !1111
  br label %for.cond1, !dbg !1139, !llvm.loop !1140

SUSAN: BB:
for.end:                                          ; preds = %for.cond1
  br label %for.inc4, !dbg !1142

SUSAN: BB:
for.inc4:                                         ; preds = %for.end
  %indvars.iv.next10 = add nuw nsw i64 %indvars.iv9, 1, !dbg !1143
  call void @llvm.dbg.value(metadata i32 undef, metadata !1117, metadata !DIExpression(DW_OP_plus_uconst, 1, DW_OP_stack_value)), !dbg !1111
  br label %for.cond, !dbg !1144, !llvm.loop !1145

SUSAN: BB:
for.end6:                                         ; preds = %for.cond
  call void @llvm.dbg.value(metadata i32 0, metadata !1117, metadata !DIExpression()), !dbg !1111
  %5 = sext i32 %m to i64, !dbg !1147
  %6 = sext i32 %n to i64, !dbg !1147
  %7 = sext i32 %m to i64, !dbg !1147
  br label %for.cond7, !dbg !1147

SUSAN: BB:
for.cond7:                                        ; preds = %for.inc32, %for.end6
  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc32 ], [ 0, %for.end6 ], !dbg !1149
  call void @llvm.dbg.value(metadata i64 %indvars.iv3, metadata !1117, metadata !DIExpression()), !dbg !1111
  %cmp8 = icmp slt i64 %indvars.iv3, %6, !dbg !1150
  br i1 %cmp8, label %for.body9, label %for.end34, !dbg !1152

SUSAN: BB:
for.body9:                                        ; preds = %for.cond7
  call void @llvm.dbg.value(metadata i32 0, metadata !1124, metadata !DIExpression()), !dbg !1111
  br label %for.cond10, !dbg !1153

SUSAN: BB:
for.cond10:                                       ; preds = %for.inc29, %for.body9
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
  %j.1 = phi i32 [ 0, %for.body9 ], [ %inc30, %for.inc29 ], !dbg !1155
  call void @llvm.dbg.value(metadata i64 %indvars.iv, metadata !1124, metadata !DIExpression()), !dbg !1111
  %cmp11 = icmp slt i64 %indvars.iv, %5, !dbg !1156
  br i1 %cmp11, label %for.body12, label %for.end31, !dbg !1158

SUSAN: BB:
for.body12:                                       ; preds = %for.cond10
  %8 = trunc i64 %indvars.iv3 to i32, !dbg !1159
  %conv = sitofp i32 %8 to double, !dbg !1159
  %9 = trunc i64 %indvars.iv to i32, !dbg !1161
  %conv13 = sitofp i32 %9 to double, !dbg !1161
  %mul14 = fmul contract double %conv, %conv13, !dbg !1162
  %conv15 = sitofp i32 %m to double, !dbg !1163
  %div = fdiv double %mul14, %conv15, !dbg !1164
  %10 = mul nsw i64 %indvars.iv3, %7, !dbg !1165
  %11 = add nsw i64 %10, %indvars.iv, !dbg !1166
  %arrayidx19 = getelementptr inbounds double, double* %A, i64 %11, !dbg !1167
  store double %div, double* %arrayidx19, align 8, !dbg !1168
  %12 = trunc i64 %indvars.iv3 to i32, !dbg !1169
  %conv20 = sitofp i32 %12 to double, !dbg !1169
  %13 = trunc i64 %indvars.iv to i32, !dbg !1170
  %conv21 = sitofp i32 %13 to double, !dbg !1170
  %mul22 = fmul contract double %conv20, %conv21, !dbg !1171
  %conv23 = sitofp i32 %n to double, !dbg !1172
  %div24 = fdiv double %mul22, %conv23, !dbg !1173
  %mul25 = mul nsw i32 %j.1, %n, !dbg !1174
  %14 = trunc i64 %indvars.iv to i32, !dbg !1175
  %add26 = add nsw i32 %mul25, %14, !dbg !1175
  %idxprom27 = sext i32 %add26 to i64, !dbg !1176
  %arrayidx28 = getelementptr inbounds double, double* %B, i64 %idxprom27, !dbg !1176
  store double %div24, double* %arrayidx28, align 8, !dbg !1177
  br label %for.inc29, !dbg !1178

SUSAN: BB:
for.inc29:                                        ; preds = %for.body12
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !1179
  %inc30 = add nuw nsw i32 %j.1, 1, !dbg !1179
  call void @llvm.dbg.value(metadata i32 %inc30, metadata !1124, metadata !DIExpression()), !dbg !1111
  br label %for.cond10, !dbg !1180, !llvm.loop !1181

SUSAN: BB:
for.end31:                                        ; preds = %for.cond10
  br label %for.inc32, !dbg !1182

SUSAN: BB:
for.inc32:                                        ; preds = %for.end31
  %indvars.iv.next4 = add nuw nsw i64 %indvars.iv3, 1, !dbg !1183
  call void @llvm.dbg.value(metadata i32 undef, metadata !1117, metadata !DIExpression(DW_OP_plus_uconst, 1, DW_OP_stack_value)), !dbg !1111
  br label %for.cond7, !dbg !1184, !llvm.loop !1185

SUSAN: BB:
for.end34:                                        ; preds = %for.cond7
  ret void, !dbg !1187

SUSAN: trying to get exit for loop: Loop at depth 1 containing: %for.cond<header><exiting>,%for.body,%for.cond1,%for.end,%for.inc4<latch>,%for.body3,%for.inc
    Loop at depth 2 containing: %for.cond1<header><exiting>,%for.body3,%for.inc<latch>

SUSAN exitBB: 
for.cond:                                         ; preds = %for.inc4, %entry
  %indvars.iv9 = phi i64 [ %indvars.iv.next10, %for.inc4 ], [ 0, %entry ], !dbg !1120
  call void @llvm.dbg.value(metadata i64 %indvars.iv9, metadata !1117, metadata !DIExpression()), !dbg !1111
  %cmp = icmp slt i64 %indvars.iv9, %1, !dbg !1121
  br i1 %cmp, label %for.body, label %for.end6, !dbg !1123

SUSAN: trying to get exit for loop: Loop at depth 2 containing: %for.cond1<header><exiting>,%for.body3,%for.inc<latch>

SUSAN exitBB: 
for.cond1:                                        ; preds = %for.inc, %for.body
  %indvars.iv6 = phi i64 [ %indvars.iv.next7, %for.inc ], [ 0, %for.body ], !dbg !1128
  call void @llvm.dbg.value(metadata i64 %indvars.iv6, metadata !1124, metadata !DIExpression()), !dbg !1111
  %cmp2 = icmp slt i64 %indvars.iv6, %0, !dbg !1129
  br i1 %cmp2, label %for.body3, label %for.end, !dbg !1131

SUSAN: trying to get exit for loop: Loop at depth 1 containing: %for.cond7<header><exiting>,%for.body9,%for.cond10,%for.end31,%for.inc32<latch>,%for.body12,%for.inc29
    Loop at depth 2 containing: %for.cond10<header><exiting>,%for.body12,%for.inc29<latch>

SUSAN exitBB: 
for.cond7:                                        ; preds = %for.inc32, %for.end6
  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc32 ], [ 0, %for.end6 ], !dbg !1149
  call void @llvm.dbg.value(metadata i64 %indvars.iv3, metadata !1117, metadata !DIExpression()), !dbg !1111
  %cmp8 = icmp slt i64 %indvars.iv3, %6, !dbg !1150
  br i1 %cmp8, label %for.body9, label %for.end34, !dbg !1152

SUSAN: trying to get exit for loop: Loop at depth 2 containing: %for.cond10<header><exiting>,%for.body12,%for.inc29<latch>

SUSAN exitBB: 
for.cond10:                                       ; preds = %for.inc29, %for.body9
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
  %j.1 = phi i32 [ 0, %for.body9 ], [ %inc30, %for.inc29 ], !dbg !1155
  call void @llvm.dbg.value(metadata i64 %indvars.iv, metadata !1124, metadata !DIExpression()), !dbg !1111
  %cmp11 = icmp slt i64 %indvars.iv, %5, !dbg !1156
  br i1 %cmp11, label %for.body12, label %for.end31, !dbg !1158

SUSAN: entry block is a linear region! entry
CBERegion: including entry in a linear region
CBERegion: nextBB 
entry:
  call void @llvm.dbg.value(metadata i32 %n, metadata !1110, metadata !DIExpression()), !dbg !1111
  call void @llvm.dbg.value(metadata i32 %m, metadata !1112, metadata !DIExpression()), !dbg !1111
  call void @llvm.dbg.value(metadata double* %alpha, metadata !1113, metadata !DIExpression()), !dbg !1111
  call void @llvm.dbg.value(metadata double* %A, metadata !1114, metadata !DIExpression()), !dbg !1111
  call void @llvm.dbg.value(metadata double* %B, metadata !1115, metadata !DIExpression()), !dbg !1111
  store double 3.241200e+04, double* %alpha, align 8, !dbg !1116
  call void @llvm.dbg.value(metadata i32 0, metadata !1117, metadata !DIExpression()), !dbg !1111
  %0 = sext i32 %n to i64, !dbg !1118
  %1 = sext i32 %m to i64, !dbg !1118
  %2 = sext i32 %n to i64, !dbg !1118
  br label %for.cond, !dbg !1118

SUSAN: nextRegionEntryBB for.cond
CBackend: entryBB is a loop: for.cond
SUSAN: entry block is a loop region! for.cond
creating loop region for entryBB: for.cond
SUSAN: loop at 355 Loop at depth 1 containing: %for.cond<header><exiting>,%for.body,%for.cond1,%for.end,%for.inc4<latch>,%for.body3,%for.inc
    Loop at depth 2 containing: %for.cond1<header><exiting>,%for.body3,%for.inc<latch>

SUSAN: found IV 784  %indvars.iv9 = phi i64 [ %indvars.iv.next10, %for.inc4 ], [ 0, %entry ], !dbg !1120
term 6818:   br i1 %cmp, label %for.body, label %for.end6, !dbg !1123
CBERegion: startBB 393: 
for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.value(metadata i32 0, metadata !1124, metadata !DIExpression()), !dbg !1111
  br label %for.cond1, !dbg !1125

CBERegion: here? 149
CBackend: entryBB is a loop: for.body
but not a header!
SUSAN: entry block is a linear region! for.body
CBERegion: including for.body in a linear region
CBERegion: nextBB 
for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.value(metadata i32 0, metadata !1124, metadata !DIExpression()), !dbg !1111
  br label %for.cond1, !dbg !1125

SUSAN: nextRegionEntryBB for.cond1
for region: Loop at depth 1 containing: %for.cond<header><exiting>,%for.body,%for.cond1,%for.end,%for.inc4<latch>,%for.body3,%for.inc
    Loop at depth 2 containing: %for.cond1<header><exiting>,%for.body3,%for.inc<latch>

CBERegion: here? 149
CBackend: entryBB is a loop: for.cond1
SUSAN: entry block is a loop region! for.cond1
creating loop region for entryBB: for.cond1
SUSAN: loop at 355 Loop at depth 2 containing: %for.cond1<header><exiting>,%for.body3,%for.inc<latch>

SUSAN: found IV 784  %indvars.iv6 = phi i64 [ %indvars.iv.next7, %for.inc ], [ 0, %for.body ], !dbg !1128
term 6818:   br i1 %cmp2, label %for.body3, label %for.end, !dbg !1131
CBERegion: startBB 393: 
for.body3:                                        ; preds = %for.cond1
  %3 = mul nsw i64 %indvars.iv9, %2, !dbg !1132
  %4 = add nsw i64 %3, %indvars.iv6, !dbg !1134
  %arrayidx = getelementptr inbounds double, double* %B, i64 %4, !dbg !1135
  store double 0.000000e+00, double* %arrayidx, align 8, !dbg !1136
  br label %for.inc, !dbg !1137

CBERegion: here? 149
CBackend: entryBB is a loop: for.body3
but not a header!
SUSAN: entry block is a linear region! for.body3
CBERegion: including for.body3 in a linear region
CBERegion: nextBB 
for.body3:                                        ; preds = %for.cond1
  %3 = mul nsw i64 %indvars.iv9, %2, !dbg !1132
  %4 = add nsw i64 %3, %indvars.iv6, !dbg !1134
  %arrayidx = getelementptr inbounds double, double* %B, i64 %4, !dbg !1135
  store double 0.000000e+00, double* %arrayidx, align 8, !dbg !1136
  br label %for.inc, !dbg !1137

SUSAN: nextRegionEntryBB for.inc
for region: Loop at depth 2 containing: %for.cond1<header><exiting>,%for.body3,%for.inc<latch>

SUSAN: nextRegionEntryBB for.end
for region: Loop at depth 1 containing: %for.cond<header><exiting>,%for.body,%for.cond1,%for.end,%for.inc4<latch>,%for.body3,%for.inc
    Loop at depth 2 containing: %for.cond1<header><exiting>,%for.body3,%for.inc<latch>

CBERegion: here? 149
CBackend: entryBB is a loop: for.end
but not a header!
SUSAN: entry block is a linear region! for.end
CBERegion: including for.end in a linear region
CBERegion: nextBB 
for.end:                                          ; preds = %for.cond1
  br label %for.inc4, !dbg !1142

SUSAN: nextRegionEntryBB for.inc4
for region: Loop at depth 1 containing: %for.cond<header><exiting>,%for.body,%for.cond1,%for.end,%for.inc4<latch>,%for.body3,%for.inc
    Loop at depth 2 containing: %for.cond1<header><exiting>,%for.body3,%for.inc<latch>

SUSAN: nextRegionEntryBB for.end6
SUSAN: entry block is a linear region! for.end6
CBERegion: including for.end6 in a linear region
CBERegion: nextBB 
for.end6:                                         ; preds = %for.cond
  call void @llvm.dbg.value(metadata i32 0, metadata !1117, metadata !DIExpression()), !dbg !1111
  %5 = sext i32 %m to i64, !dbg !1147
  %6 = sext i32 %n to i64, !dbg !1147
  %7 = sext i32 %m to i64, !dbg !1147
  br label %for.cond7, !dbg !1147

SUSAN: nextRegionEntryBB for.cond7
CBackend: entryBB is a loop: for.cond7
SUSAN: entry block is a loop region! for.cond7
creating loop region for entryBB: for.cond7
SUSAN: loop at 355 Loop at depth 1 containing: %for.cond7<header><exiting>,%for.body9,%for.cond10,%for.end31,%for.inc32<latch>,%for.body12,%for.inc29
    Loop at depth 2 containing: %for.cond10<header><exiting>,%for.body12,%for.inc29<latch>

SUSAN: found IV 784  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc32 ], [ 0, %for.end6 ], !dbg !1149
term 6818:   br i1 %cmp8, label %for.body9, label %for.end34, !dbg !1152
CBERegion: startBB 393: 
for.body9:                                        ; preds = %for.cond7
  call void @llvm.dbg.value(metadata i32 0, metadata !1124, metadata !DIExpression()), !dbg !1111
  br label %for.cond10, !dbg !1153

CBERegion: here? 149
CBackend: entryBB is a loop: for.body9
but not a header!
SUSAN: entry block is a linear region! for.body9
CBERegion: including for.body9 in a linear region
CBERegion: nextBB 
for.body9:                                        ; preds = %for.cond7
  call void @llvm.dbg.value(metadata i32 0, metadata !1124, metadata !DIExpression()), !dbg !1111
  br label %for.cond10, !dbg !1153

SUSAN: nextRegionEntryBB for.cond10
for region: Loop at depth 1 containing: %for.cond7<header><exiting>,%for.body9,%for.cond10,%for.end31,%for.inc32<latch>,%for.body12,%for.inc29
    Loop at depth 2 containing: %for.cond10<header><exiting>,%for.body12,%for.inc29<latch>

CBERegion: here? 149
CBackend: entryBB is a loop: for.cond10
SUSAN: entry block is a loop region! for.cond10
creating loop region for entryBB: for.cond10
SUSAN: loop at 355 Loop at depth 2 containing: %for.cond10<header><exiting>,%for.body12,%for.inc29<latch>

SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
term 6818:   br i1 %cmp11, label %for.body12, label %for.end31, !dbg !1158
CBERegion: startBB 393: 
for.body12:                                       ; preds = %for.cond10
  %8 = trunc i64 %indvars.iv3 to i32, !dbg !1159
  %conv = sitofp i32 %8 to double, !dbg !1159
  %9 = trunc i64 %indvars.iv to i32, !dbg !1161
  %conv13 = sitofp i32 %9 to double, !dbg !1161
  %mul14 = fmul contract double %conv, %conv13, !dbg !1162
  %conv15 = sitofp i32 %m to double, !dbg !1163
  %div = fdiv double %mul14, %conv15, !dbg !1164
  %10 = mul nsw i64 %indvars.iv3, %7, !dbg !1165
  %11 = add nsw i64 %10, %indvars.iv, !dbg !1166
  %arrayidx19 = getelementptr inbounds double, double* %A, i64 %11, !dbg !1167
  store double %div, double* %arrayidx19, align 8, !dbg !1168
  %12 = trunc i64 %indvars.iv3 to i32, !dbg !1169
  %conv20 = sitofp i32 %12 to double, !dbg !1169
  %13 = trunc i64 %indvars.iv to i32, !dbg !1170
  %conv21 = sitofp i32 %13 to double, !dbg !1170
  %mul22 = fmul contract double %conv20, %conv21, !dbg !1171
  %conv23 = sitofp i32 %n to double, !dbg !1172
  %div24 = fdiv double %mul22, %conv23, !dbg !1173
  %mul25 = mul nsw i32 %j.1, %n, !dbg !1174
  %14 = trunc i64 %indvars.iv to i32, !dbg !1175
  %add26 = add nsw i32 %mul25, %14, !dbg !1175
  %idxprom27 = sext i32 %add26 to i64, !dbg !1176
  %arrayidx28 = getelementptr inbounds double, double* %B, i64 %idxprom27, !dbg !1176
  store double %div24, double* %arrayidx28, align 8, !dbg !1177
  br label %for.inc29, !dbg !1178

CBERegion: here? 149
CBackend: entryBB is a loop: for.body12
but not a header!
SUSAN: entry block is a linear region! for.body12
CBERegion: including for.body12 in a linear region
CBERegion: nextBB 
for.body12:                                       ; preds = %for.cond10
  %8 = trunc i64 %indvars.iv3 to i32, !dbg !1159
  %conv = sitofp i32 %8 to double, !dbg !1159
  %9 = trunc i64 %indvars.iv to i32, !dbg !1161
  %conv13 = sitofp i32 %9 to double, !dbg !1161
  %mul14 = fmul contract double %conv, %conv13, !dbg !1162
  %conv15 = sitofp i32 %m to double, !dbg !1163
  %div = fdiv double %mul14, %conv15, !dbg !1164
  %10 = mul nsw i64 %indvars.iv3, %7, !dbg !1165
  %11 = add nsw i64 %10, %indvars.iv, !dbg !1166
  %arrayidx19 = getelementptr inbounds double, double* %A, i64 %11, !dbg !1167
  store double %div, double* %arrayidx19, align 8, !dbg !1168
  %12 = trunc i64 %indvars.iv3 to i32, !dbg !1169
  %conv20 = sitofp i32 %12 to double, !dbg !1169
  %13 = trunc i64 %indvars.iv to i32, !dbg !1170
  %conv21 = sitofp i32 %13 to double, !dbg !1170
  %mul22 = fmul contract double %conv20, %conv21, !dbg !1171
  %conv23 = sitofp i32 %n to double, !dbg !1172
  %div24 = fdiv double %mul22, %conv23, !dbg !1173
  %mul25 = mul nsw i32 %j.1, %n, !dbg !1174
  %14 = trunc i64 %indvars.iv to i32, !dbg !1175
  %add26 = add nsw i32 %mul25, %14, !dbg !1175
  %idxprom27 = sext i32 %add26 to i64, !dbg !1176
  %arrayidx28 = getelementptr inbounds double, double* %B, i64 %idxprom27, !dbg !1176
  store double %div24, double* %arrayidx28, align 8, !dbg !1177
  br label %for.inc29, !dbg !1178

SUSAN: nextRegionEntryBB for.inc29
for region: Loop at depth 2 containing: %for.cond10<header><exiting>,%for.body12,%for.inc29<latch>

SUSAN: nextRegionEntryBB for.end31
for region: Loop at depth 1 containing: %for.cond7<header><exiting>,%for.body9,%for.cond10,%for.end31,%for.inc32<latch>,%for.body12,%for.inc29
    Loop at depth 2 containing: %for.cond10<header><exiting>,%for.body12,%for.inc29<latch>

CBERegion: here? 149
CBackend: entryBB is a loop: for.end31
but not a header!
SUSAN: entry block is a linear region! for.end31
CBERegion: including for.end31 in a linear region
CBERegion: nextBB 
for.end31:                                        ; preds = %for.cond10
  br label %for.inc32, !dbg !1182

SUSAN: nextRegionEntryBB for.inc32
for region: Loop at depth 1 containing: %for.cond7<header><exiting>,%for.body9,%for.cond10,%for.end31,%for.inc32<latch>,%for.body12,%for.inc29
    Loop at depth 2 containing: %for.cond10<header><exiting>,%for.body12,%for.inc29<latch>

SUSAN: nextRegionEntryBB for.end34
SUSAN: entry block is a linear region! for.end34
SUSAN: found IV 784  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc32 ], [ 0, %for.end6 ], !dbg !1149
SUSAN: found IV 784  %indvars.iv9 = phi i64 [ %indvars.iv.next10, %for.inc4 ], [ 0, %entry ], !dbg !1120
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
SUSAN: found IV 784  %indvars.iv6 = phi i64 [ %indvars.iv.next7, %for.inc ], [ 0, %for.body ], !dbg !1128
SUSAN: found IV 784  %indvars.iv9 = phi i64 [ %indvars.iv.next10, %for.inc4 ], [ 0, %entry ], !dbg !1120
SUSAN: found IV 784  %indvars.iv6 = phi i64 [ %indvars.iv.next7, %for.inc ], [ 0, %for.body ], !dbg !1128
SUSAN: found IV 784  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc32 ], [ 0, %for.end6 ], !dbg !1149
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
SUSAN: found IV 784  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc32 ], [ 0, %for.end6 ], !dbg !1149
SUSAN: found IV 784  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc32 ], [ 0, %for.end6 ], !dbg !1149
SUSAN: found IV 784  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc32 ], [ 0, %for.end6 ], !dbg !1149
SUSAN: found IV 784  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc32 ], [ 0, %for.end6 ], !dbg !1149
SUSAN: found IV 784  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc32 ], [ 0, %for.end6 ], !dbg !1149
SUSAN: found IV 784  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc32 ], [ 0, %for.end6 ], !dbg !1149
SUSAN: found IV 784  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc32 ], [ 0, %for.end6 ], !dbg !1149
SUSAN: found IV 784  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc32 ], [ 0, %for.end6 ], !dbg !1149
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
SUSAN: found IV 784  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc32 ], [ 0, %for.end6 ], !dbg !1149
SUSAN: found IV 784  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc32 ], [ 0, %for.end6 ], !dbg !1149
SUSAN: found IV 784  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc32 ], [ 0, %for.end6 ], !dbg !1149
SUSAN: found IV 784  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc32 ], [ 0, %for.end6 ], !dbg !1149
SUSAN: found IV 784  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc32 ], [ 0, %for.end6 ], !dbg !1149
SUSAN: found IV 784  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc32 ], [ 0, %for.end6 ], !dbg !1149
SUSAN: found IV 784  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc32 ], [ 0, %for.end6 ], !dbg !1149
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
SUSAN: found IV 784  %indvars.iv9 = phi i64 [ %indvars.iv.next10, %for.inc4 ], [ 0, %entry ], !dbg !1120
SUSAN: found IV 784  %indvars.iv9 = phi i64 [ %indvars.iv.next10, %for.inc4 ], [ 0, %entry ], !dbg !1120
SUSAN: found IV 784  %indvars.iv9 = phi i64 [ %indvars.iv.next10, %for.inc4 ], [ 0, %entry ], !dbg !1120
SUSAN: found IV 784  %indvars.iv9 = phi i64 [ %indvars.iv.next10, %for.inc4 ], [ 0, %entry ], !dbg !1120
SUSAN: found IV 784  %indvars.iv9 = phi i64 [ %indvars.iv.next10, %for.inc4 ], [ 0, %entry ], !dbg !1120
SUSAN: found IV 784  %indvars.iv9 = phi i64 [ %indvars.iv.next10, %for.inc4 ], [ 0, %entry ], !dbg !1120
SUSAN: found IV 784  %indvars.iv9 = phi i64 [ %indvars.iv.next10, %for.inc4 ], [ 0, %entry ], !dbg !1120
SUSAN: found IV 784  %indvars.iv9 = phi i64 [ %indvars.iv.next10, %for.inc4 ], [ 0, %entry ], !dbg !1120
SUSAN: found IV 784  %indvars.iv6 = phi i64 [ %indvars.iv.next7, %for.inc ], [ 0, %for.body ], !dbg !1128
SUSAN: found IV 784  %indvars.iv6 = phi i64 [ %indvars.iv.next7, %for.inc ], [ 0, %for.body ], !dbg !1128
SUSAN: found IV 784  %indvars.iv6 = phi i64 [ %indvars.iv.next7, %for.inc ], [ 0, %for.body ], !dbg !1128
SUSAN: found IV 784  %indvars.iv6 = phi i64 [ %indvars.iv.next7, %for.inc ], [ 0, %for.body ], !dbg !1128
SUSAN: found IV 784  %indvars.iv9 = phi i64 [ %indvars.iv.next10, %for.inc4 ], [ 0, %entry ], !dbg !1120
SUSAN: found IV 784  %indvars.iv9 = phi i64 [ %indvars.iv.next10, %for.inc4 ], [ 0, %entry ], !dbg !1120
SUSAN: found IV 784  %indvars.iv9 = phi i64 [ %indvars.iv.next10, %for.inc4 ], [ 0, %entry ], !dbg !1120
SUSAN: found IV 784  %indvars.iv9 = phi i64 [ %indvars.iv.next10, %for.inc4 ], [ 0, %entry ], !dbg !1120
SUSAN: found IV 784  %indvars.iv9 = phi i64 [ %indvars.iv.next10, %for.inc4 ], [ 0, %entry ], !dbg !1120
SUSAN: found IV 784  %indvars.iv9 = phi i64 [ %indvars.iv.next10, %for.inc4 ], [ 0, %entry ], !dbg !1120
SUSAN: found IV 784  %indvars.iv9 = phi i64 [ %indvars.iv.next10, %for.inc4 ], [ 0, %entry ], !dbg !1120
SUSAN: found IV 784  %indvars.iv6 = phi i64 [ %indvars.iv.next7, %for.inc ], [ 0, %for.body ], !dbg !1128
SUSAN: found IV 784  %indvars.iv6 = phi i64 [ %indvars.iv.next7, %for.inc ], [ 0, %for.body ], !dbg !1128
SUSAN: found IV 784  %indvars.iv6 = phi i64 [ %indvars.iv.next7, %for.inc ], [ 0, %for.body ], !dbg !1128
SUSAN: found IV 784  %indvars.iv6 = phi i64 [ %indvars.iv.next7, %for.inc ], [ 0, %for.body ], !dbg !1128
SUSAN: found IV 784  %indvars.iv6 = phi i64 [ %indvars.iv.next7, %for.inc ], [ 0, %for.body ], !dbg !1128
SUSAN: found IV 784  %indvars.iv6 = phi i64 [ %indvars.iv.next7, %for.inc ], [ 0, %for.body ], !dbg !1128
SUSAN: found IV 784  %indvars.iv6 = phi i64 [ %indvars.iv.next7, %for.inc ], [ 0, %for.body ], !dbg !1128
SUSAN: found IV 784  %indvars.iv6 = phi i64 [ %indvars.iv.next7, %for.inc ], [ 0, %for.body ], !dbg !1128
SUSAN: found IV 784  %indvars.iv6 = phi i64 [ %indvars.iv.next7, %for.inc ], [ 0, %for.body ], !dbg !1128
SUSAN: CI at 1400:   call void @llvm.dbg.value(metadata i32 %n, metadata !1170, metadata !DIExpression()), !dbg !1171
SUSAN: CI at 1400:   call void @llvm.dbg.value(metadata i32 %m, metadata !1172, metadata !DIExpression()), !dbg !1171
SUSAN: CI at 1400:   call void @llvm.dbg.value(metadata double* %alpha, metadata !1173, metadata !DIExpression()), !dbg !1171
SUSAN: CI at 1400:   call void @llvm.dbg.value(metadata double* %A, metadata !1174, metadata !DIExpression()), !dbg !1171
SUSAN: CI at 1400:   call void @llvm.dbg.value(metadata double* %B, metadata !1175, metadata !DIExpression()), !dbg !1171
SUSAN: CI at 1400:   call void @llvm.dbg.value(metadata i32 0, metadata !1177, metadata !DIExpression()), !dbg !1171
SUSAN: CI at 1400:   call void @llvm.dbg.value(metadata i64 %indvars.iv9, metadata !1177, metadata !DIExpression()), !dbg !1171
SUSAN: CI at 1400:   call void @llvm.dbg.value(metadata i32 0, metadata !1184, metadata !DIExpression()), !dbg !1171
SUSAN: CI at 1400:   call void @llvm.dbg.value(metadata i64 %indvars.iv6, metadata !1184, metadata !DIExpression()), !dbg !1171
SUSAN: CI at 1400:   call void @llvm.dbg.value(metadata i32 undef, metadata !1184, metadata !DIExpression(DW_OP_plus_uconst, 1, DW_OP_stack_value)), !dbg !1171
SUSAN: CI at 1400:   call void @llvm.dbg.value(metadata i32 undef, metadata !1177, metadata !DIExpression(DW_OP_plus_uconst, 1, DW_OP_stack_value)), !dbg !1171
SUSAN: CI at 1400:   call void @llvm.dbg.value(metadata i32 0, metadata !1177, metadata !DIExpression()), !dbg !1171
SUSAN: CI at 1400:   call void @llvm.dbg.value(metadata i64 %indvars.iv3, metadata !1177, metadata !DIExpression()), !dbg !1171
SUSAN: CI at 1400:   call void @llvm.dbg.value(metadata i32 0, metadata !1184, metadata !DIExpression()), !dbg !1171
SUSAN: CI at 1400:   call void @llvm.dbg.value(metadata i64 %indvars.iv, metadata !1184, metadata !DIExpression()), !dbg !1171
SUSAN: CI at 1400:   call void @llvm.dbg.value(metadata i32 %inc30, metadata !1184, metadata !DIExpression()), !dbg !1171
SUSAN: CI at 1400:   call void @llvm.dbg.value(metadata i32 undef, metadata !1177, metadata !DIExpression(DW_OP_plus_uconst, 1, DW_OP_stack_value)), !dbg !1171
SUSAN: found IV 784  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc32 ], [ 0, %for.end6 ], !dbg !1149
SUSAN: found IV 784  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc32 ], [ 0, %for.end6 ], !dbg !1149
SUSAN: found IV 784  %indvars.iv9 = phi i64 [ %indvars.iv.next10, %for.inc4 ], [ 0, %entry ], !dbg !1120
SUSAN: found IV 784  %indvars.iv9 = phi i64 [ %indvars.iv.next10, %for.inc4 ], [ 0, %entry ], !dbg !1120
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
SUSAN: found IV 784  %indvars.iv6 = phi i64 [ %indvars.iv.next7, %for.inc ], [ 0, %for.body ], !dbg !1128
SUSAN: found IV 784  %indvars.iv6 = phi i64 [ %indvars.iv.next7, %for.inc ], [ 0, %for.body ], !dbg !1128
========== IV MAP==========
SUSAN: headPHI:   %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
SUSAN: phi:   %j.1 = phi i32 [ 0, %for.body9 ], [ %inc30, %for.inc29 ], !dbg !1155
SUSAN: found LP for L:Loop at depth 1 containing: %for.cond7<header><exiting>,%for.body9,%for.cond10,%for.end31,%for.inc32<latch>,%for.body12,%for.inc29
    Loop at depth 2 containing: %for.cond10<header><exiting>,%for.body12,%for.inc29<latch>

SUSAN: found LP for L:Loop at depth 1 containing: %for.cond<header><exiting>,%for.body,%for.cond1,%for.end,%for.inc4<latch>,%for.body3,%for.inc
    Loop at depth 2 containing: %for.cond1<header><exiting>,%for.body3,%for.inc<latch>

SUSAN: found LP for L:Loop at depth 2 containing: %for.cond10<header><exiting>,%for.body12,%for.inc29<latch>

SUSAN: found LP for L:Loop at depth 2 containing: %for.cond1<header><exiting>,%for.body3,%for.inc<latch>

currInst :  %0 = sext i32 %n to i64, !dbg !1118
currInst :  %cmp2 = icmp slt i64 %indvars.iv6, %0, !dbg !1129
currInst :  br i1 %cmp2, label %for.body3, label %for.end, !dbg !1131
currInst :  %1 = sext i32 %m to i64, !dbg !1118
currInst :  %cmp = icmp slt i64 %indvars.iv9, %1, !dbg !1121
currInst :  br i1 %cmp, label %for.body, label %for.end6, !dbg !1123
currInst :  %2 = sext i32 %n to i64, !dbg !1118
currInst :  %3 = mul nsw i64 %indvars.iv9, %2, !dbg !1132
currInst :  %4 = add nsw i64 %3, %indvars.iv6, !dbg !1134
currInst :  %arrayidx = getelementptr inbounds double, double* %B, i64 %4, !dbg !1135
currInst :  store double 0.000000e+00, double* %arrayidx, align 8, !dbg !1136
currInst :  %cmp = icmp slt i64 %indvars.iv9, %1, !dbg !1121
currInst :  br i1 %cmp, label %for.body, label %for.end6, !dbg !1123
currInst :  %cmp2 = icmp slt i64 %indvars.iv6, %0, !dbg !1129
currInst :  br i1 %cmp2, label %for.body3, label %for.end, !dbg !1131
currInst :  %3 = mul nsw i64 %indvars.iv9, %2, !dbg !1132
currInst :  %4 = add nsw i64 %3, %indvars.iv6, !dbg !1134
currInst :  %arrayidx = getelementptr inbounds double, double* %B, i64 %4, !dbg !1135
SUSAN: found IV 784  %indvars.iv6 = phi i64 [ %indvars.iv.next7, %for.inc ], [ 0, %for.body ], !dbg !1128
SUSAN: add () to inst:   %3 = mul nsw i64 %indvars.iv9, %2, !dbg !1132
currInst :  %4 = add nsw i64 %3, %indvars.iv6, !dbg !1134
currInst :  %arrayidx = getelementptr inbounds double, double* %B, i64 %4, !dbg !1135
SUSAN: found IV 784  %indvars.iv6 = phi i64 [ %indvars.iv.next7, %for.inc ], [ 0, %for.body ], !dbg !1128
SUSAN: add () to inst:   %4 = add nsw i64 %3, %indvars.iv6, !dbg !1134
currInst :  %arrayidx = getelementptr inbounds double, double* %B, i64 %4, !dbg !1135
currInst :  store double 0.000000e+00, double* %arrayidx, align 8, !dbg !1136
currInst :  %5 = sext i32 %m to i64, !dbg !1147
currInst :  %cmp11 = icmp slt i64 %indvars.iv, %5, !dbg !1156
currInst :  br i1 %cmp11, label %for.body12, label %for.end31, !dbg !1158
currInst :  %6 = sext i32 %n to i64, !dbg !1147
currInst :  %cmp8 = icmp slt i64 %indvars.iv3, %6, !dbg !1150
currInst :  br i1 %cmp8, label %for.body9, label %for.end34, !dbg !1152
currInst :  %7 = sext i32 %m to i64, !dbg !1147
currInst :  %10 = mul nsw i64 %indvars.iv3, %7, !dbg !1165
currInst :  %11 = add nsw i64 %10, %indvars.iv, !dbg !1166
currInst :  %arrayidx19 = getelementptr inbounds double, double* %A, i64 %11, !dbg !1167
currInst :  store double %div, double* %arrayidx19, align 8, !dbg !1168
currInst :  %cmp8 = icmp slt i64 %indvars.iv3, %6, !dbg !1150
currInst :  br i1 %cmp8, label %for.body9, label %for.end34, !dbg !1152
currInst :  %cmp11 = icmp slt i64 %indvars.iv, %5, !dbg !1156
currInst :  br i1 %cmp11, label %for.body12, label %for.end31, !dbg !1158
currInst :  %8 = trunc i64 %indvars.iv3 to i32, !dbg !1159
currInst :  %conv = sitofp i32 %8 to double, !dbg !1159
currInst :  %mul14 = fmul contract double %conv, %conv13, !dbg !1162
currInst :  %div = fdiv double %mul14, %conv15, !dbg !1164
currInst :  store double %div, double* %arrayidx19, align 8, !dbg !1168
currInst :  %conv = sitofp i32 %8 to double, !dbg !1159
currInst :  %mul14 = fmul contract double %conv, %conv13, !dbg !1162
currInst :  %div = fdiv double %mul14, %conv15, !dbg !1164
currInst :  store double %div, double* %arrayidx19, align 8, !dbg !1168
currInst :  %9 = trunc i64 %indvars.iv to i32, !dbg !1161
currInst :  %conv13 = sitofp i32 %9 to double, !dbg !1161
currInst :  %mul14 = fmul contract double %conv, %conv13, !dbg !1162
currInst :  %div = fdiv double %mul14, %conv15, !dbg !1164
currInst :  store double %div, double* %arrayidx19, align 8, !dbg !1168
currInst :  %conv13 = sitofp i32 %9 to double, !dbg !1161
currInst :  %mul14 = fmul contract double %conv, %conv13, !dbg !1162
currInst :  %div = fdiv double %mul14, %conv15, !dbg !1164
currInst :  store double %div, double* %arrayidx19, align 8, !dbg !1168
currInst :  %mul14 = fmul contract double %conv, %conv13, !dbg !1162
currInst :  %div = fdiv double %mul14, %conv15, !dbg !1164
currInst :  store double %div, double* %arrayidx19, align 8, !dbg !1168
currInst :  %conv15 = sitofp i32 %m to double, !dbg !1163
currInst :  %div = fdiv double %mul14, %conv15, !dbg !1164
currInst :  store double %div, double* %arrayidx19, align 8, !dbg !1168
currInst :  %div = fdiv double %mul14, %conv15, !dbg !1164
currInst :  store double %div, double* %arrayidx19, align 8, !dbg !1168
currInst :  %10 = mul nsw i64 %indvars.iv3, %7, !dbg !1165
currInst :  %11 = add nsw i64 %10, %indvars.iv, !dbg !1166
currInst :  %arrayidx19 = getelementptr inbounds double, double* %A, i64 %11, !dbg !1167
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
SUSAN: add () to inst:   %10 = mul nsw i64 %indvars.iv3, %7, !dbg !1165
currInst :  %11 = add nsw i64 %10, %indvars.iv, !dbg !1166
currInst :  %arrayidx19 = getelementptr inbounds double, double* %A, i64 %11, !dbg !1167
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
SUSAN: add () to inst:   %11 = add nsw i64 %10, %indvars.iv, !dbg !1166
currInst :  %arrayidx19 = getelementptr inbounds double, double* %A, i64 %11, !dbg !1167
currInst :  store double %div, double* %arrayidx19, align 8, !dbg !1168
currInst :  %12 = trunc i64 %indvars.iv3 to i32, !dbg !1169
currInst :  %conv20 = sitofp i32 %12 to double, !dbg !1169
currInst :  %mul22 = fmul contract double %conv20, %conv21, !dbg !1171
currInst :  %div24 = fdiv double %mul22, %conv23, !dbg !1173
currInst :  store double %div24, double* %arrayidx28, align 8, !dbg !1177
currInst :  %conv20 = sitofp i32 %12 to double, !dbg !1169
currInst :  %mul22 = fmul contract double %conv20, %conv21, !dbg !1171
currInst :  %div24 = fdiv double %mul22, %conv23, !dbg !1173
currInst :  store double %div24, double* %arrayidx28, align 8, !dbg !1177
currInst :  %13 = trunc i64 %indvars.iv to i32, !dbg !1170
currInst :  %conv21 = sitofp i32 %13 to double, !dbg !1170
currInst :  %mul22 = fmul contract double %conv20, %conv21, !dbg !1171
currInst :  %div24 = fdiv double %mul22, %conv23, !dbg !1173
currInst :  store double %div24, double* %arrayidx28, align 8, !dbg !1177
currInst :  %conv21 = sitofp i32 %13 to double, !dbg !1170
currInst :  %mul22 = fmul contract double %conv20, %conv21, !dbg !1171
currInst :  %div24 = fdiv double %mul22, %conv23, !dbg !1173
currInst :  store double %div24, double* %arrayidx28, align 8, !dbg !1177
currInst :  %mul22 = fmul contract double %conv20, %conv21, !dbg !1171
currInst :  %div24 = fdiv double %mul22, %conv23, !dbg !1173
currInst :  store double %div24, double* %arrayidx28, align 8, !dbg !1177
currInst :  %conv23 = sitofp i32 %n to double, !dbg !1172
currInst :  %div24 = fdiv double %mul22, %conv23, !dbg !1173
currInst :  store double %div24, double* %arrayidx28, align 8, !dbg !1177
currInst :  %div24 = fdiv double %mul22, %conv23, !dbg !1173
currInst :  store double %div24, double* %arrayidx28, align 8, !dbg !1177
currInst :  %mul25 = mul nsw i32 %j.1, %n, !dbg !1174
currInst :  %add26 = add nsw i32 %mul25, %14, !dbg !1175
currInst :  %idxprom27 = sext i32 %add26 to i64, !dbg !1176
currInst :  %arrayidx28 = getelementptr inbounds double, double* %B, i64 %idxprom27, !dbg !1176
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
SUSAN: add () to inst:   %mul25 = mul nsw i32 %j.1, %n, !dbg !1174
currInst :  %14 = trunc i64 %indvars.iv to i32, !dbg !1175
currInst :  %add26 = add nsw i32 %mul25, %14, !dbg !1175
currInst :  %idxprom27 = sext i32 %add26 to i64, !dbg !1176
currInst :  %arrayidx28 = getelementptr inbounds double, double* %B, i64 %idxprom27, !dbg !1176
currInst :  store double %div24, double* %arrayidx28, align 8, !dbg !1177
currInst :  %add26 = add nsw i32 %mul25, %14, !dbg !1175
currInst :  %idxprom27 = sext i32 %add26 to i64, !dbg !1176
currInst :  %arrayidx28 = getelementptr inbounds double, double* %B, i64 %idxprom27, !dbg !1176
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
SUSAN: add () to inst:   %add26 = add nsw i32 %mul25, %14, !dbg !1175
currInst :  %idxprom27 = sext i32 %add26 to i64, !dbg !1176
currInst :  %arrayidx28 = getelementptr inbounds double, double* %B, i64 %idxprom27, !dbg !1176
currInst :  store double %div24, double* %arrayidx28, align 8, !dbg !1177
currInst :  %arrayidx28 = getelementptr inbounds double, double* %B, i64 %idxprom27, !dbg !1176
currInst :  store double %div24, double* %arrayidx28, align 8, !dbg !1177
LP->LV 1694:   %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc32 ], [ 0, %for.end6 ], !dbg !1149
LP->L 1694: Loop at depth 1 containing: %for.cond7<header><exiting>,%for.body9,%for.cond10,%for.end31,%for.inc32<latch>,%for.body12,%for.inc29
    Loop at depth 2 containing: %for.cond10<header><exiting>,%for.body12,%for.inc29<latch>

nestlevel: i
LP->LV 1694:   %indvars.iv9 = phi i64 [ %indvars.iv.next10, %for.inc4 ], [ 0, %entry ], !dbg !1120
LP->L 1694: Loop at depth 1 containing: %for.cond<header><exiting>,%for.body,%for.cond1,%for.end,%for.inc4<latch>,%for.body3,%for.inc
    Loop at depth 2 containing: %for.cond1<header><exiting>,%for.body3,%for.inc<latch>

nestlevel: i
LP->LV 1694:   %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
LP->L 1694: Loop at depth 2 containing: %for.cond10<header><exiting>,%for.body12,%for.inc29<latch>

nestlevel: j
LP->LV 1694:   %indvars.iv6 = phi i64 [ %indvars.iv.next7, %for.inc ], [ 0, %for.body ], !dbg !1128
LP->L 1694: Loop at depth 2 containing: %for.cond1<header><exiting>,%for.body3,%for.inc<latch>

nestlevel: j
SUSAN: getting value name for: 
; Function Attrs: noinline nounwind uwtable
define internal void @_ZL10init_arrayiiPdS_S_(i32 %n, i32 %m, double* %alpha, double* %A, double* %B) #5 !dbg !1167 {
entry:
  call void @llvm.dbg.value(metadata i32 %n, metadata !1170, metadata !DIExpression()), !dbg !1171
  call void @llvm.dbg.value(metadata i32 %m, metadata !1172, metadata !DIExpression()), !dbg !1171
  call void @llvm.dbg.value(metadata double* %alpha, metadata !1173, metadata !DIExpression()), !dbg !1171
  call void @llvm.dbg.value(metadata double* %A, metadata !1174, metadata !DIExpression()), !dbg !1171
  call void @llvm.dbg.value(metadata double* %B, metadata !1175, metadata !DIExpression()), !dbg !1171
  store double 3.241200e+04, double* %alpha, align 8, !dbg !1176
  call void @llvm.dbg.value(metadata i32 0, metadata !1177, metadata !DIExpression()), !dbg !1171
  %0 = sext i32 %n to i64, !dbg !1178
  %1 = sext i32 %m to i64, !dbg !1178
  %2 = sext i32 %n to i64, !dbg !1178
  br label %for.cond, !dbg !1178

for.cond:                                         ; preds = %for.inc4, %entry
  %indvars.iv9 = phi i64 [ %indvars.iv.next10, %for.inc4 ], [ 0, %entry ], !dbg !1180
  call void @llvm.dbg.value(metadata i64 %indvars.iv9, metadata !1177, metadata !DIExpression()), !dbg !1171
  %cmp = icmp slt i64 %indvars.iv9, %1, !dbg !1181
  br i1 %cmp, label %for.body, label %for.end6, !dbg !1183

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.value(metadata i32 0, metadata !1184, metadata !DIExpression()), !dbg !1171
  br label %for.cond1, !dbg !1185

for.cond1:                                        ; preds = %for.inc, %for.body
  %indvars.iv6 = phi i64 [ %indvars.iv.next7, %for.inc ], [ 0, %for.body ], !dbg !1188
  call void @llvm.dbg.value(metadata i64 %indvars.iv6, metadata !1184, metadata !DIExpression()), !dbg !1171
  %cmp2 = icmp slt i64 %indvars.iv6, %0, !dbg !1189
  br i1 %cmp2, label %for.body3, label %for.end, !dbg !1191

for.body3:                                        ; preds = %for.cond1
  %3 = mul nsw i64 %indvars.iv9, %2, !dbg !1192
  %4 = add nsw i64 %3, %indvars.iv6, !dbg !1194
  %arrayidx = getelementptr inbounds double, double* %B, i64 %4, !dbg !1195
  store double 0.000000e+00, double* %arrayidx, align 8, !dbg !1196
  br label %for.inc, !dbg !1197

for.inc:                                          ; preds = %for.body3
  %indvars.iv.next7 = add nuw nsw i64 %indvars.iv6, 1, !dbg !1198
  call void @llvm.dbg.value(metadata i32 undef, metadata !1184, metadata !DIExpression(DW_OP_plus_uconst, 1, DW_OP_stack_value)), !dbg !1171
  br label %for.cond1, !dbg !1199, !llvm.loop !1200

for.end:                                          ; preds = %for.cond1
  br label %for.inc4, !dbg !1202

for.inc4:                                         ; preds = %for.end
  %indvars.iv.next10 = add nuw nsw i64 %indvars.iv9, 1, !dbg !1203
  call void @llvm.dbg.value(metadata i32 undef, metadata !1177, metadata !DIExpression(DW_OP_plus_uconst, 1, DW_OP_stack_value)), !dbg !1171
  br label %for.cond, !dbg !1204, !llvm.loop !1205

for.end6:                                         ; preds = %for.cond
  call void @llvm.dbg.value(metadata i32 0, metadata !1177, metadata !DIExpression()), !dbg !1171
  %5 = sext i32 %m to i64, !dbg !1207
  %6 = sext i32 %n to i64, !dbg !1207
  %7 = sext i32 %m to i64, !dbg !1207
  br label %for.cond7, !dbg !1207

for.cond7:                                        ; preds = %for.inc32, %for.end6
  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc32 ], [ 0, %for.end6 ], !dbg !1209
  call void @llvm.dbg.value(metadata i64 %indvars.iv3, metadata !1177, metadata !DIExpression()), !dbg !1171
  %cmp8 = icmp slt i64 %indvars.iv3, %6, !dbg !1210
  br i1 %cmp8, label %for.body9, label %for.end34, !dbg !1212

for.body9:                                        ; preds = %for.cond7
  call void @llvm.dbg.value(metadata i32 0, metadata !1184, metadata !DIExpression()), !dbg !1171
  br label %for.cond10, !dbg !1213

for.cond10:                                       ; preds = %for.inc29, %for.body9
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1215
  %j.1 = phi i32 [ 0, %for.body9 ], [ %inc30, %for.inc29 ], !dbg !1215
  call void @llvm.dbg.value(metadata i64 %indvars.iv, metadata !1184, metadata !DIExpression()), !dbg !1171
  %cmp11 = icmp slt i64 %indvars.iv, %5, !dbg !1216
  br i1 %cmp11, label %for.body12, label %for.end31, !dbg !1218

for.body12:                                       ; preds = %for.cond10
  %8 = trunc i64 %indvars.iv3 to i32, !dbg !1219
  %conv = sitofp i32 %8 to double, !dbg !1219
  %9 = trunc i64 %indvars.iv to i32, !dbg !1221
  %conv13 = sitofp i32 %9 to double, !dbg !1221
  %mul14 = fmul contract double %conv, %conv13, !dbg !1222
  %conv15 = sitofp i32 %m to double, !dbg !1223
  %div = fdiv double %mul14, %conv15, !dbg !1224
  %10 = mul nsw i64 %indvars.iv3, %7, !dbg !1225
  %11 = add nsw i64 %10, %indvars.iv, !dbg !1226
  %arrayidx19 = getelementptr inbounds double, double* %A, i64 %11, !dbg !1227
  store double %div, double* %arrayidx19, align 8, !dbg !1228
  %12 = trunc i64 %indvars.iv3 to i32, !dbg !1229
  %conv20 = sitofp i32 %12 to double, !dbg !1229
  %13 = trunc i64 %indvars.iv to i32, !dbg !1230
  %conv21 = sitofp i32 %13 to double, !dbg !1230
  %mul22 = fmul contract double %conv20, %conv21, !dbg !1231
  %conv23 = sitofp i32 %n to double, !dbg !1232
  %div24 = fdiv double %mul22, %conv23, !dbg !1233
  %mul25 = mul nsw i32 %j.1, %n, !dbg !1234
  %14 = trunc i64 %indvars.iv to i32, !dbg !1235
  %add26 = add nsw i32 %mul25, %14, !dbg !1235
  %idxprom27 = sext i32 %add26 to i64, !dbg !1236
  %arrayidx28 = getelementptr inbounds double, double* %B, i64 %idxprom27, !dbg !1236
  store double %div24, double* %arrayidx28, align 8, !dbg !1237
  br label %for.inc29, !dbg !1238

for.inc29:                                        ; preds = %for.body12
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !1239
  %inc30 = add nuw nsw i32 %j.1, 1, !dbg !1239
  call void @llvm.dbg.value(metadata i32 %inc30, metadata !1184, metadata !DIExpression()), !dbg !1171
  br label %for.cond10, !dbg !1240, !llvm.loop !1241

for.end31:                                        ; preds = %for.cond10
  br label %for.inc32, !dbg !1242

for.inc32:                                        ; preds = %for.end31
  %indvars.iv.next4 = add nuw nsw i64 %indvars.iv3, 1, !dbg !1243
  call void @llvm.dbg.value(metadata i32 undef, metadata !1177, metadata !DIExpression(DW_OP_plus_uconst, 1, DW_OP_stack_value)), !dbg !1171
  br label %for.cond7, !dbg !1244, !llvm.loop !1245

for.end34:                                        ; preds = %for.cond7
  ret void, !dbg !1247
}

SUSAN: found argument 6346: i32 %n
CBackend: varname: n
  call void @llvm.dbg.value(metadata i32 %n, metadata !1170, metadata !DIExpression()), !dbg !1171
SUSAN: found argument 6346: i32 %m
CBackend: varname: m
  call void @llvm.dbg.value(metadata i32 %m, metadata !1172, metadata !DIExpression()), !dbg !1171
SUSAN: found argument 6346: double* %alpha
CBackend: varname: alpha
  call void @llvm.dbg.value(metadata double* %alpha, metadata !1173, metadata !DIExpression()), !dbg !1171
SUSAN: found argument 6346: double* %A
CBackend: varname: A
  call void @llvm.dbg.value(metadata double* %A, metadata !1174, metadata !DIExpression()), !dbg !1171
SUSAN: found argument 6346: double* %B
CBackend: varname: B
  call void @llvm.dbg.value(metadata double* %B, metadata !1175, metadata !DIExpression()), !dbg !1171
SUSAN: getting value name for:   %indvars.iv9 = phi i64 [ %indvars.iv.next10, %for.inc4 ], [ 0, %entry ], !dbg !1120
inst from IRNaming:   %indvars.iv9 = phi i64 [ %indvars.iv.next10, %for.inc4 ], [ 0, %entry ], !dbg !1120
original name : i
returning name: i
SUSAN: phi related name: i
SUSAN: getting value name for:   %indvars.iv6 = phi i64 [ %indvars.iv.next7, %for.inc ], [ 0, %for.body ], !dbg !1128
inst from IRNaming:   %indvars.iv6 = phi i64 [ %indvars.iv.next7, %for.inc ], [ 0, %for.body ], !dbg !1128
original name : j
returning name: j
SUSAN: phi related name: j
SUSAN: getting value name for:   %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc32 ], [ 0, %for.end6 ], !dbg !1149
inst from IRNaming:   %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc32 ], [ 0, %for.end6 ], !dbg !1149
original name : i
returning name: i
SUSAN: phi related name: i
SUSAN: getting value name for:   %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
inst from IRNaming:   %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
original name : j
returning name: j
SUSAN: phi related name: j
SUSAN: getting value name for:   %j.1 = phi i32 [ 0, %for.body9 ], [ %inc30, %for.inc29 ], !dbg !1155
SUSAN: phi related name: j_2e_1
=========================SUSAN: IR NAMING BEFORE=====================
i32 %n -> n
i32 %m -> m
double* %alpha -> alpha
double* %A -> A
double* %B -> B
  %indvars.iv9 = phi i64 [ %indvars.iv.next10, %for.inc4 ], [ 0, %entry ], !dbg !1120 -> i
  %indvars.iv6 = phi i64 [ %indvars.iv.next7, %for.inc ], [ 0, %for.body ], !dbg !1128 -> j
  %indvars.iv.next7 = add nuw nsw i64 %indvars.iv6, 1, !dbg !1138 -> j
  %indvars.iv.next10 = add nuw nsw i64 %indvars.iv9, 1, !dbg !1143 -> i
  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc32 ], [ 0, %for.end6 ], !dbg !1149 -> i
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155 -> j
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !1179 -> j
  %inc30 = add nuw nsw i32 %j.1, 1, !dbg !1179 -> j
  %inc30 = add nuw nsw i32 %j.1, 1, !dbg !1179 -> j_2e_1
  %indvars.iv.next4 = add nuw nsw i64 %indvars.iv3, 1, !dbg !1183 -> i
SUSAN: inst:  store double %div, double* %arrayidx19, align 8, !dbg !1168
i:  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc32 ], [ 0, %for.end6 ], !dbg !1149
j:  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
j_2e_1:  %inc30 = add nuw nsw i32 %j.1, 1, !dbg !1179
SUSAN: inst:  %12 = trunc i64 %indvars.iv3 to i32, !dbg !1169
i:  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc32 ], [ 0, %for.end6 ], !dbg !1149
j:  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
j_2e_1:  %inc30 = add nuw nsw i32 %j.1, 1, !dbg !1179
SUSAN: inst:  %conv20 = sitofp i32 %12 to double, !dbg !1169
i:  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc32 ], [ 0, %for.end6 ], !dbg !1149
j:  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
j_2e_1:  %inc30 = add nuw nsw i32 %j.1, 1, !dbg !1179
SUSAN: inst:  %13 = trunc i64 %indvars.iv to i32, !dbg !1170
i:  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc32 ], [ 0, %for.end6 ], !dbg !1149
j:  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
j_2e_1:  %inc30 = add nuw nsw i32 %j.1, 1, !dbg !1179
SUSAN: inst:  %conv21 = sitofp i32 %13 to double, !dbg !1170
i:  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc32 ], [ 0, %for.end6 ], !dbg !1149
j:  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
j_2e_1:  %inc30 = add nuw nsw i32 %j.1, 1, !dbg !1179
SUSAN: inst:  %mul22 = fmul contract double %conv20, %conv21, !dbg !1171
i:  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc32 ], [ 0, %for.end6 ], !dbg !1149
j:  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
j_2e_1:  %inc30 = add nuw nsw i32 %j.1, 1, !dbg !1179
SUSAN: inst:  %conv23 = sitofp i32 %n to double, !dbg !1172
i:  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc32 ], [ 0, %for.end6 ], !dbg !1149
j:  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
j_2e_1:  %inc30 = add nuw nsw i32 %j.1, 1, !dbg !1179
SUSAN: inst:  %div24 = fdiv double %mul22, %conv23, !dbg !1173
i:  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc32 ], [ 0, %for.end6 ], !dbg !1149
j:  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
j_2e_1:  %inc30 = add nuw nsw i32 %j.1, 1, !dbg !1179
SUSAN: inst:  %mul25 = mul nsw i32 %j.1, %n, !dbg !1174
i:  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc32 ], [ 0, %for.end6 ], !dbg !1149
j:  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
j_2e_1:  %inc30 = add nuw nsw i32 %j.1, 1, !dbg !1179
SUSAN: inst:  %14 = trunc i64 %indvars.iv to i32, !dbg !1175
i:  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc32 ], [ 0, %for.end6 ], !dbg !1149
j:  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
j_2e_1:  %inc30 = add nuw nsw i32 %j.1, 1, !dbg !1179
SUSAN: inst:  %add26 = add nsw i32 %mul25, %14, !dbg !1175
i:  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc32 ], [ 0, %for.end6 ], !dbg !1149
j:  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
j_2e_1:  %inc30 = add nuw nsw i32 %j.1, 1, !dbg !1179
SUSAN: inst:  %idxprom27 = sext i32 %add26 to i64, !dbg !1176
i:  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc32 ], [ 0, %for.end6 ], !dbg !1149
j:  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
j_2e_1:  %inc30 = add nuw nsw i32 %j.1, 1, !dbg !1179
SUSAN: inst:  %arrayidx28 = getelementptr inbounds double, double* %B, i64 %idxprom27, !dbg !1176
i:  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc32 ], [ 0, %for.end6 ], !dbg !1149
j:  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
j_2e_1:  %inc30 = add nuw nsw i32 %j.1, 1, !dbg !1179
SUSAN: inst:  store double %div24, double* %arrayidx28, align 8, !dbg !1177
i:  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc32 ], [ 0, %for.end6 ], !dbg !1149
j:  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
j_2e_1:  %inc30 = add nuw nsw i32 %j.1, 1, !dbg !1179
SUSAN: inst:  %indvars.iv9 = phi i64 [ %indvars.iv.next10, %for.inc4 ], [ 0, %entry ], !dbg !1120
i:  %indvars.iv9 = phi i64 [ %indvars.iv.next10, %for.inc4 ], [ 0, %entry ], !dbg !1120
j:  %indvars.iv6 = phi i64 [ %indvars.iv.next7, %for.inc ], [ 0, %for.body ], !dbg !1128
SUSAN: inst:  call void @llvm.dbg.value(metadata i32 %n, metadata !1170, metadata !DIExpression()), !dbg !1171
SUSAN: inst:  call void @llvm.dbg.value(metadata i32 %m, metadata !1172, metadata !DIExpression()), !dbg !1171
SUSAN: inst:  call void @llvm.dbg.value(metadata double* %alpha, metadata !1173, metadata !DIExpression()), !dbg !1171
SUSAN: inst:  call void @llvm.dbg.value(metadata double* %A, metadata !1174, metadata !DIExpression()), !dbg !1171
SUSAN: inst:  call void @llvm.dbg.value(metadata double* %B, metadata !1175, metadata !DIExpression()), !dbg !1171
SUSAN: inst:  store double 3.241200e+04, double* %alpha, align 8, !dbg !1116
SUSAN: inst:  call void @llvm.dbg.value(metadata i32 0, metadata !1177, metadata !DIExpression()), !dbg !1171
SUSAN: inst:  %0 = sext i32 %n to i64, !dbg !1118
SUSAN: inst:  %1 = sext i32 %m to i64, !dbg !1118
SUSAN: inst:  %2 = sext i32 %n to i64, !dbg !1118
SUSAN: inst:  br label %for.cond, !dbg !1118
SUSAN: inst:  call void @llvm.dbg.value(metadata i64 %indvars.iv9, metadata !1177, metadata !DIExpression()), !dbg !1171
i:  %indvars.iv9 = phi i64 [ %indvars.iv.next10, %for.inc4 ], [ 0, %entry ], !dbg !1120
j:  %indvars.iv6 = phi i64 [ %indvars.iv.next7, %for.inc ], [ 0, %for.body ], !dbg !1128
SUSAN: inst:  %cmp = icmp slt i64 %indvars.iv9, %1, !dbg !1121
i:  %indvars.iv9 = phi i64 [ %indvars.iv.next10, %for.inc4 ], [ 0, %entry ], !dbg !1120
j:  %indvars.iv6 = phi i64 [ %indvars.iv.next7, %for.inc ], [ 0, %for.body ], !dbg !1128
SUSAN: inst:  br i1 %cmp, label %for.body, label %for.end6, !dbg !1123
i:  %indvars.iv9 = phi i64 [ %indvars.iv.next10, %for.inc4 ], [ 0, %entry ], !dbg !1120
j:  %indvars.iv6 = phi i64 [ %indvars.iv.next7, %for.inc ], [ 0, %for.body ], !dbg !1128
SUSAN: inst:  call void @llvm.dbg.value(metadata i32 0, metadata !1184, metadata !DIExpression()), !dbg !1171
i:  %indvars.iv9 = phi i64 [ %indvars.iv.next10, %for.inc4 ], [ 0, %entry ], !dbg !1120
j:  %indvars.iv6 = phi i64 [ %indvars.iv.next7, %for.inc ], [ 0, %for.body ], !dbg !1128
SUSAN: inst:  br label %for.cond1, !dbg !1125
i:  %indvars.iv9 = phi i64 [ %indvars.iv.next10, %for.inc4 ], [ 0, %entry ], !dbg !1120
j:  %indvars.iv6 = phi i64 [ %indvars.iv.next7, %for.inc ], [ 0, %for.body ], !dbg !1128
SUSAN: inst:  %indvars.iv6 = phi i64 [ %indvars.iv.next7, %for.inc ], [ 0, %for.body ], !dbg !1128
i:  %indvars.iv9 = phi i64 [ %indvars.iv.next10, %for.inc4 ], [ 0, %entry ], !dbg !1120
j:  %indvars.iv6 = phi i64 [ %indvars.iv.next7, %for.inc ], [ 0, %for.body ], !dbg !1128
SUSAN: inst:  call void @llvm.dbg.value(metadata i64 %indvars.iv6, metadata !1184, metadata !DIExpression()), !dbg !1171
i:  %indvars.iv9 = phi i64 [ %indvars.iv.next10, %for.inc4 ], [ 0, %entry ], !dbg !1120
j:  %indvars.iv6 = phi i64 [ %indvars.iv.next7, %for.inc ], [ 0, %for.body ], !dbg !1128
SUSAN: inst:  %cmp2 = icmp slt i64 %indvars.iv6, %0, !dbg !1129
i:  %indvars.iv9 = phi i64 [ %indvars.iv.next10, %for.inc4 ], [ 0, %entry ], !dbg !1120
j:  %indvars.iv6 = phi i64 [ %indvars.iv.next7, %for.inc ], [ 0, %for.body ], !dbg !1128
SUSAN: inst:  br i1 %cmp2, label %for.body3, label %for.end, !dbg !1131
i:  %indvars.iv9 = phi i64 [ %indvars.iv.next10, %for.inc4 ], [ 0, %entry ], !dbg !1120
j:  %indvars.iv6 = phi i64 [ %indvars.iv.next7, %for.inc ], [ 0, %for.body ], !dbg !1128
SUSAN: inst:  %3 = mul nsw i64 %indvars.iv9, %2, !dbg !1132
i:  %indvars.iv9 = phi i64 [ %indvars.iv.next10, %for.inc4 ], [ 0, %entry ], !dbg !1120
j:  %indvars.iv6 = phi i64 [ %indvars.iv.next7, %for.inc ], [ 0, %for.body ], !dbg !1128
SUSAN: inst:  %4 = add nsw i64 %3, %indvars.iv6, !dbg !1134
i:  %indvars.iv9 = phi i64 [ %indvars.iv.next10, %for.inc4 ], [ 0, %entry ], !dbg !1120
j:  %indvars.iv6 = phi i64 [ %indvars.iv.next7, %for.inc ], [ 0, %for.body ], !dbg !1128
SUSAN: inst:  %arrayidx = getelementptr inbounds double, double* %B, i64 %4, !dbg !1135
i:  %indvars.iv9 = phi i64 [ %indvars.iv.next10, %for.inc4 ], [ 0, %entry ], !dbg !1120
j:  %indvars.iv6 = phi i64 [ %indvars.iv.next7, %for.inc ], [ 0, %for.body ], !dbg !1128
SUSAN: inst:  store double 0.000000e+00, double* %arrayidx, align 8, !dbg !1136
i:  %indvars.iv9 = phi i64 [ %indvars.iv.next10, %for.inc4 ], [ 0, %entry ], !dbg !1120
j:  %indvars.iv6 = phi i64 [ %indvars.iv.next7, %for.inc ], [ 0, %for.body ], !dbg !1128
SUSAN: inst:  br label %for.inc, !dbg !1137
i:  %indvars.iv9 = phi i64 [ %indvars.iv.next10, %for.inc4 ], [ 0, %entry ], !dbg !1120
j:  %indvars.iv6 = phi i64 [ %indvars.iv.next7, %for.inc ], [ 0, %for.body ], !dbg !1128
SUSAN: inst:  %indvars.iv.next7 = add nuw nsw i64 %indvars.iv6, 1, !dbg !1138
i:  %indvars.iv9 = phi i64 [ %indvars.iv.next10, %for.inc4 ], [ 0, %entry ], !dbg !1120
j:  %indvars.iv.next7 = add nuw nsw i64 %indvars.iv6, 1, !dbg !1138
SUSAN: inst:  call void @llvm.dbg.value(metadata i32 undef, metadata !1184, metadata !DIExpression(DW_OP_plus_uconst, 1, DW_OP_stack_value)), !dbg !1171
i:  %indvars.iv9 = phi i64 [ %indvars.iv.next10, %for.inc4 ], [ 0, %entry ], !dbg !1120
j:  %indvars.iv.next7 = add nuw nsw i64 %indvars.iv6, 1, !dbg !1138
SUSAN: inst:  br label %for.cond1, !dbg !1139, !llvm.loop !1140
i:  %indvars.iv9 = phi i64 [ %indvars.iv.next10, %for.inc4 ], [ 0, %entry ], !dbg !1120
j:  %indvars.iv.next7 = add nuw nsw i64 %indvars.iv6, 1, !dbg !1138
SUSAN: inst:  br label %for.inc4, !dbg !1142
i:  %indvars.iv9 = phi i64 [ %indvars.iv.next10, %for.inc4 ], [ 0, %entry ], !dbg !1120
j:  %indvars.iv6 = phi i64 [ %indvars.iv.next7, %for.inc ], [ 0, %for.body ], !dbg !1128
SUSAN: inst:  %indvars.iv.next10 = add nuw nsw i64 %indvars.iv9, 1, !dbg !1143
i:  %indvars.iv.next10 = add nuw nsw i64 %indvars.iv9, 1, !dbg !1143
j:  %indvars.iv6 = phi i64 [ %indvars.iv.next7, %for.inc ], [ 0, %for.body ], !dbg !1128
SUSAN: inst:  call void @llvm.dbg.value(metadata i32 undef, metadata !1177, metadata !DIExpression(DW_OP_plus_uconst, 1, DW_OP_stack_value)), !dbg !1171
i:  %indvars.iv.next10 = add nuw nsw i64 %indvars.iv9, 1, !dbg !1143
j:  %indvars.iv6 = phi i64 [ %indvars.iv.next7, %for.inc ], [ 0, %for.body ], !dbg !1128
SUSAN: inst:  br label %for.cond, !dbg !1144, !llvm.loop !1145
i:  %indvars.iv.next10 = add nuw nsw i64 %indvars.iv9, 1, !dbg !1143
j:  %indvars.iv6 = phi i64 [ %indvars.iv.next7, %for.inc ], [ 0, %for.body ], !dbg !1128
SUSAN: inst:  call void @llvm.dbg.value(metadata i32 0, metadata !1177, metadata !DIExpression()), !dbg !1171
i:  %indvars.iv9 = phi i64 [ %indvars.iv.next10, %for.inc4 ], [ 0, %entry ], !dbg !1120
j:  %indvars.iv6 = phi i64 [ %indvars.iv.next7, %for.inc ], [ 0, %for.body ], !dbg !1128
SUSAN: inst:  %5 = sext i32 %m to i64, !dbg !1147
i:  %indvars.iv9 = phi i64 [ %indvars.iv.next10, %for.inc4 ], [ 0, %entry ], !dbg !1120
j:  %indvars.iv6 = phi i64 [ %indvars.iv.next7, %for.inc ], [ 0, %for.body ], !dbg !1128
SUSAN: inst:  %6 = sext i32 %n to i64, !dbg !1147
i:  %indvars.iv9 = phi i64 [ %indvars.iv.next10, %for.inc4 ], [ 0, %entry ], !dbg !1120
j:  %indvars.iv6 = phi i64 [ %indvars.iv.next7, %for.inc ], [ 0, %for.body ], !dbg !1128
SUSAN: inst:  %7 = sext i32 %m to i64, !dbg !1147
i:  %indvars.iv9 = phi i64 [ %indvars.iv.next10, %for.inc4 ], [ 0, %entry ], !dbg !1120
j:  %indvars.iv6 = phi i64 [ %indvars.iv.next7, %for.inc ], [ 0, %for.body ], !dbg !1128
SUSAN: inst:  br label %for.cond7, !dbg !1147
i:  %indvars.iv9 = phi i64 [ %indvars.iv.next10, %for.inc4 ], [ 0, %entry ], !dbg !1120
j:  %indvars.iv6 = phi i64 [ %indvars.iv.next7, %for.inc ], [ 0, %for.body ], !dbg !1128
SUSAN: inst:  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc32 ], [ 0, %for.end6 ], !dbg !1149
i:  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc32 ], [ 0, %for.end6 ], !dbg !1149
j_2e_1:  %inc30 = add nuw nsw i32 %j.1, 1, !dbg !1179
SUSAN: inst:  call void @llvm.dbg.value(metadata i64 %indvars.iv3, metadata !1177, metadata !DIExpression()), !dbg !1171
i:  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc32 ], [ 0, %for.end6 ], !dbg !1149
j_2e_1:  %inc30 = add nuw nsw i32 %j.1, 1, !dbg !1179
SUSAN: inst:  %cmp8 = icmp slt i64 %indvars.iv3, %6, !dbg !1150
i:  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc32 ], [ 0, %for.end6 ], !dbg !1149
j_2e_1:  %inc30 = add nuw nsw i32 %j.1, 1, !dbg !1179
SUSAN: inst:  br i1 %cmp8, label %for.body9, label %for.end34, !dbg !1152
i:  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc32 ], [ 0, %for.end6 ], !dbg !1149
j_2e_1:  %inc30 = add nuw nsw i32 %j.1, 1, !dbg !1179
SUSAN: inst:  call void @llvm.dbg.value(metadata i32 0, metadata !1184, metadata !DIExpression()), !dbg !1171
i:  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc32 ], [ 0, %for.end6 ], !dbg !1149
j_2e_1:  %inc30 = add nuw nsw i32 %j.1, 1, !dbg !1179
SUSAN: inst:  br label %for.cond10, !dbg !1153
i:  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc32 ], [ 0, %for.end6 ], !dbg !1149
j_2e_1:  %inc30 = add nuw nsw i32 %j.1, 1, !dbg !1179
SUSAN: inst:  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
i:  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc32 ], [ 0, %for.end6 ], !dbg !1149
j:  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
j_2e_1:  %inc30 = add nuw nsw i32 %j.1, 1, !dbg !1179
SUSAN: inst:  %j.1 = phi i32 [ 0, %for.body9 ], [ %inc30, %for.inc29 ], !dbg !1155
i:  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc32 ], [ 0, %for.end6 ], !dbg !1149
j:  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
j_2e_1:  %inc30 = add nuw nsw i32 %j.1, 1, !dbg !1179
SUSAN: inst:  call void @llvm.dbg.value(metadata i64 %indvars.iv, metadata !1184, metadata !DIExpression()), !dbg !1171
i:  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc32 ], [ 0, %for.end6 ], !dbg !1149
j:  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
j_2e_1:  %inc30 = add nuw nsw i32 %j.1, 1, !dbg !1179
SUSAN: inst:  %cmp11 = icmp slt i64 %indvars.iv, %5, !dbg !1156
i:  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc32 ], [ 0, %for.end6 ], !dbg !1149
j:  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
j_2e_1:  %inc30 = add nuw nsw i32 %j.1, 1, !dbg !1179
SUSAN: inst:  br i1 %cmp11, label %for.body12, label %for.end31, !dbg !1158
i:  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc32 ], [ 0, %for.end6 ], !dbg !1149
j:  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
j_2e_1:  %inc30 = add nuw nsw i32 %j.1, 1, !dbg !1179
SUSAN: inst:  %8 = trunc i64 %indvars.iv3 to i32, !dbg !1159
i:  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc32 ], [ 0, %for.end6 ], !dbg !1149
j:  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
j_2e_1:  %inc30 = add nuw nsw i32 %j.1, 1, !dbg !1179
SUSAN: inst:  %conv = sitofp i32 %8 to double, !dbg !1159
i:  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc32 ], [ 0, %for.end6 ], !dbg !1149
j:  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
j_2e_1:  %inc30 = add nuw nsw i32 %j.1, 1, !dbg !1179
SUSAN: inst:  %9 = trunc i64 %indvars.iv to i32, !dbg !1161
i:  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc32 ], [ 0, %for.end6 ], !dbg !1149
j:  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
j_2e_1:  %inc30 = add nuw nsw i32 %j.1, 1, !dbg !1179
SUSAN: inst:  %conv13 = sitofp i32 %9 to double, !dbg !1161
i:  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc32 ], [ 0, %for.end6 ], !dbg !1149
j:  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
j_2e_1:  %inc30 = add nuw nsw i32 %j.1, 1, !dbg !1179
SUSAN: inst:  %mul14 = fmul contract double %conv, %conv13, !dbg !1162
i:  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc32 ], [ 0, %for.end6 ], !dbg !1149
j:  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
j_2e_1:  %inc30 = add nuw nsw i32 %j.1, 1, !dbg !1179
SUSAN: inst:  %conv15 = sitofp i32 %m to double, !dbg !1163
i:  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc32 ], [ 0, %for.end6 ], !dbg !1149
j:  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
j_2e_1:  %inc30 = add nuw nsw i32 %j.1, 1, !dbg !1179
SUSAN: inst:  %div = fdiv double %mul14, %conv15, !dbg !1164
i:  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc32 ], [ 0, %for.end6 ], !dbg !1149
j:  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
j_2e_1:  %inc30 = add nuw nsw i32 %j.1, 1, !dbg !1179
SUSAN: inst:  %10 = mul nsw i64 %indvars.iv3, %7, !dbg !1165
i:  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc32 ], [ 0, %for.end6 ], !dbg !1149
j:  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
j_2e_1:  %inc30 = add nuw nsw i32 %j.1, 1, !dbg !1179
SUSAN: inst:  %11 = add nsw i64 %10, %indvars.iv, !dbg !1166
i:  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc32 ], [ 0, %for.end6 ], !dbg !1149
j:  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
j_2e_1:  %inc30 = add nuw nsw i32 %j.1, 1, !dbg !1179
SUSAN: inst:  %arrayidx19 = getelementptr inbounds double, double* %A, i64 %11, !dbg !1167
i:  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc32 ], [ 0, %for.end6 ], !dbg !1149
j:  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
j_2e_1:  %inc30 = add nuw nsw i32 %j.1, 1, !dbg !1179
SUSAN: inst:  br label %for.inc29, !dbg !1178
i:  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc32 ], [ 0, %for.end6 ], !dbg !1149
j:  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
j_2e_1:  %inc30 = add nuw nsw i32 %j.1, 1, !dbg !1179
SUSAN: inst:  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !1179
i:  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc32 ], [ 0, %for.end6 ], !dbg !1149
j:  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !1179
j_2e_1:  %inc30 = add nuw nsw i32 %j.1, 1, !dbg !1179
SUSAN: inst:  %inc30 = add nuw nsw i32 %j.1, 1, !dbg !1179
i:  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc32 ], [ 0, %for.end6 ], !dbg !1149
j:  %inc30 = add nuw nsw i32 %j.1, 1, !dbg !1179
j_2e_1:  %inc30 = add nuw nsw i32 %j.1, 1, !dbg !1179
SUSAN: inst:  call void @llvm.dbg.value(metadata i32 %inc30, metadata !1184, metadata !DIExpression()), !dbg !1171
i:  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc32 ], [ 0, %for.end6 ], !dbg !1149
j:  %inc30 = add nuw nsw i32 %j.1, 1, !dbg !1179
j_2e_1:  %inc30 = add nuw nsw i32 %j.1, 1, !dbg !1179
SUSAN: inst:  br label %for.cond10, !dbg !1180, !llvm.loop !1181
i:  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc32 ], [ 0, %for.end6 ], !dbg !1149
j:  %inc30 = add nuw nsw i32 %j.1, 1, !dbg !1179
j_2e_1:  %inc30 = add nuw nsw i32 %j.1, 1, !dbg !1179
SUSAN: inst:  br label %for.inc32, !dbg !1182
i:  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc32 ], [ 0, %for.end6 ], !dbg !1149
j:  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
j_2e_1:  %inc30 = add nuw nsw i32 %j.1, 1, !dbg !1179
SUSAN: inst:  %indvars.iv.next4 = add nuw nsw i64 %indvars.iv3, 1, !dbg !1183
i:  %indvars.iv.next4 = add nuw nsw i64 %indvars.iv3, 1, !dbg !1183
j:  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
j_2e_1:  %inc30 = add nuw nsw i32 %j.1, 1, !dbg !1179
SUSAN: inst:  call void @llvm.dbg.value(metadata i32 undef, metadata !1177, metadata !DIExpression(DW_OP_plus_uconst, 1, DW_OP_stack_value)), !dbg !1171
i:  %indvars.iv.next4 = add nuw nsw i64 %indvars.iv3, 1, !dbg !1183
j:  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
j_2e_1:  %inc30 = add nuw nsw i32 %j.1, 1, !dbg !1179
SUSAN: inst:  br label %for.cond7, !dbg !1184, !llvm.loop !1185
i:  %indvars.iv.next4 = add nuw nsw i64 %indvars.iv3, 1, !dbg !1183
j:  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
j_2e_1:  %inc30 = add nuw nsw i32 %j.1, 1, !dbg !1179
SUSAN: inst:  ret void, !dbg !1187
i:  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc32 ], [ 0, %for.end6 ], !dbg !1149
j_2e_1:  %inc30 = add nuw nsw i32 %j.1, 1, !dbg !1179
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
=========================SUSAN: IR NAMING=====================
i32 %n -> n
i32 %m -> m
double* %alpha -> alpha
double* %A -> A
double* %B -> B
  %indvars.iv9 = phi i64 [ %indvars.iv.next10, %for.inc4 ], [ 0, %entry ], !dbg !1120 -> i
  %indvars.iv6 = phi i64 [ %indvars.iv.next7, %for.inc ], [ 0, %for.body ], !dbg !1128 -> j
  %indvars.iv.next7 = add nuw nsw i64 %indvars.iv6, 1, !dbg !1138 -> j
  %indvars.iv.next10 = add nuw nsw i64 %indvars.iv9, 1, !dbg !1143 -> i
  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc32 ], [ 0, %for.end6 ], !dbg !1149 -> i
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155 -> j
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !1179 -> j
  %inc30 = add nuw nsw i32 %j.1, 1, !dbg !1179 -> j
  %inc30 = add nuw nsw i32 %j.1, 1, !dbg !1179 -> j_2e_1
  %indvars.iv.next4 = add nuw nsw i64 %indvars.iv3, 1, !dbg !1183 -> i
SUSAN: getting value name for: i32 %n
inst from IRNaming: i32 %n
original name : n
returning name: n
SUSAN: getting value name for: i32 %m
inst from IRNaming: i32 %m
original name : m
returning name: m
SUSAN: getting value name for: double* %alpha
inst from IRNaming: double* %alpha
original name : alpha
returning name: alpha
SUSAN: getting value name for: double* %A
inst from IRNaming: double* %A
original name : A
returning name: A
SUSAN: getting value name for: double* %B
inst from IRNaming: double* %B
original name : B
returning name: B
SUSAN: getting value name for:   %indvars.iv9 = phi i64 [ %indvars.iv.next10, %for.inc4 ], [ 0, %entry ], !dbg !1120
inst from IRNaming:   %indvars.iv9 = phi i64 [ %indvars.iv.next10, %for.inc4 ], [ 0, %entry ], !dbg !1120
original name : i
returning name: i
SUSAN: declaring varName 5298: i
SUSAN: declared locals:
SUSAN: declaring 3252:   %indvars.iv9 = phi i64 [ %indvars.iv.next10, %for.inc4 ], [ 0, %entry ], !dbg !1120
SUSAN: getting value name for:   %indvars.iv9 = phi i64 [ %indvars.iv.next10, %for.inc4 ], [ 0, %entry ], !dbg !1120
inst from IRNaming:   %indvars.iv9 = phi i64 [ %indvars.iv.next10, %for.inc4 ], [ 0, %entry ], !dbg !1120
original name : i
returning name: i
SUSAN: declaring with reconstructed name 3286: i
SUSAN: inst at 5950:   %indvars.iv9 = phi i64 [ %indvars.iv.next10, %for.inc4 ], [ 0, %entry ], !dbg !1120
SUSAN: declaring   %indvars.iv9 = phi i64 [ %indvars.iv.next10, %for.inc4 ], [ 0, %entry ], !dbg !1120
SUSAN: printing type at 5937: i64
SUSAN: getting value name for:   %indvars.iv6 = phi i64 [ %indvars.iv.next7, %for.inc ], [ 0, %for.body ], !dbg !1128
inst from IRNaming:   %indvars.iv6 = phi i64 [ %indvars.iv.next7, %for.inc ], [ 0, %for.body ], !dbg !1128
original name : j
returning name: j
SUSAN: declaring varName 5298: j
SUSAN: declared locals:
i
SUSAN: declaring 3252:   %indvars.iv6 = phi i64 [ %indvars.iv.next7, %for.inc ], [ 0, %for.body ], !dbg !1128
SUSAN: getting value name for:   %indvars.iv6 = phi i64 [ %indvars.iv.next7, %for.inc ], [ 0, %for.body ], !dbg !1128
inst from IRNaming:   %indvars.iv6 = phi i64 [ %indvars.iv.next7, %for.inc ], [ 0, %for.body ], !dbg !1128
original name : j
returning name: j
SUSAN: declaring with reconstructed name 3286: j
SUSAN: inst at 5950:   %indvars.iv6 = phi i64 [ %indvars.iv.next7, %for.inc ], [ 0, %for.body ], !dbg !1128
SUSAN: declaring   %indvars.iv6 = phi i64 [ %indvars.iv.next7, %for.inc ], [ 0, %for.body ], !dbg !1128
SUSAN: printing type at 5937: i64
SUSAN: getting value name for:   %indvars.iv.next7 = add nuw nsw i64 %indvars.iv6, 1, !dbg !1138
inst from IRNaming:   %indvars.iv.next7 = add nuw nsw i64 %indvars.iv6, 1, !dbg !1138
original name : j
returning name: j
SUSAN: declaring varName 5298: j
SUSAN: getting value name for:   %indvars.iv.next10 = add nuw nsw i64 %indvars.iv9, 1, !dbg !1143
inst from IRNaming:   %indvars.iv.next10 = add nuw nsw i64 %indvars.iv9, 1, !dbg !1143
original name : i
returning name: i
SUSAN: declaring varName 5298: i
SUSAN: getting value name for:   %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc32 ], [ 0, %for.end6 ], !dbg !1149
inst from IRNaming:   %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc32 ], [ 0, %for.end6 ], !dbg !1149
original name : i
returning name: i
SUSAN: declaring varName 5298: i
SUSAN: getting value name for:   %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
inst from IRNaming:   %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
original name : j
returning name: j
SUSAN: declaring varName 5298: j
SUSAN: getting value name for:   %j.1 = phi i32 [ 0, %for.body9 ], [ %inc30, %for.inc29 ], !dbg !1155
SUSAN: declaring varName 5298: j_2e_1
SUSAN: declared locals:
i
j
SUSAN: declaring 3252:   %j.1 = phi i32 [ 0, %for.body9 ], [ %inc30, %for.inc29 ], !dbg !1155
SUSAN: getting value name for:   %j.1 = phi i32 [ 0, %for.body9 ], [ %inc30, %for.inc29 ], !dbg !1155
SUSAN: inst at 5950:   %j.1 = phi i32 [ 0, %for.body9 ], [ %inc30, %for.inc29 ], !dbg !1155
SUSAN: declaring   %j.1 = phi i32 [ 0, %for.body9 ], [ %inc30, %for.inc29 ], !dbg !1155
SUSAN: printing type at 5937: i32
SUSAN: getting value name for:   %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !1179
inst from IRNaming:   %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !1179
original name : j
returning name: j
SUSAN: declaring varName 5298: j
SUSAN: getting value name for:   %indvars.iv.next4 = add nuw nsw i64 %indvars.iv3, 1, !dbg !1183
inst from IRNaming:   %indvars.iv.next4 = add nuw nsw i64 %indvars.iv3, 1, !dbg !1183
original name : i
returning name: i
SUSAN: declaring varName 5298: i
SUSAN: am I here 6807??
Linear Region with entry block: entry
SUSAN: printing bb:entry
CBEBackend: printing bb 7082 entry
SUSAN: printing instruction   store double 3.241200e+04, double* %alpha, align 8, !dbg !1116 at 6678
CBEBackend: printing store Inst:   store double 3.241200e+04, double* %alpha, align 8, !dbg !1116
CBackend: here? 10442
CBackend: writeOperand 3595: double* %alpha
SUSAN: getting value name for: double* %alpha
inst from IRNaming: double* %alpha
original name : alpha
returning name: alpha
CBackend: writeoperand here 3674? 
CBackend: here? 10445
CBackend: writeOperand 3595: double 3.241200e+04
CBackend: writeoperand here 3674? 
CBackend: here? 10462
printing unconditional branch   br label %for.cond, !dbg !1118
Loop Region with entry block: for.cond
term 6818:   br i1 %cmp, label %for.body, label %for.end6, !dbg !1123
SUSAN: condrelatedinst:  %indvars.iv9 = phi i64 [ %indvars.iv.next10, %for.inc4 ], [ 0, %entry ], !dbg !1120
SUSAN: found IV 784  %indvars.iv9 = phi i64 [ %indvars.iv.next10, %for.inc4 ], [ 0, %entry ], !dbg !1120
SUSAN: condrelatedinst:  %cmp = icmp slt i64 %indvars.iv9, %1, !dbg !1121
SUSAN: found IV 784  %indvars.iv9 = phi i64 [ %indvars.iv.next10, %for.inc4 ], [ 0, %entry ], !dbg !1120
SUSAN: declaring 3252:   %indvars.iv9 = phi i64 [ %indvars.iv.next10, %for.inc4 ], [ 0, %entry ], !dbg !1120
SUSAN: getting value name for:   %indvars.iv9 = phi i64 [ %indvars.iv.next10, %for.inc4 ], [ 0, %entry ], !dbg !1120
inst from IRNaming:   %indvars.iv9 = phi i64 [ %indvars.iv.next10, %for.inc4 ], [ 0, %entry ], !dbg !1120
original name : i
returning name: i
SUSAN: declaring with reconstructed name 3286: i
CBackend: writeOperand 3595: i64 0
CBackend: writeoperand here 3674? 
SUSAN: getting value name for:   %indvars.iv9 = phi i64 [ %indvars.iv.next10, %for.inc4 ], [ 0, %entry ], !dbg !1120
inst from IRNaming:   %indvars.iv9 = phi i64 [ %indvars.iv.next10, %for.inc4 ], [ 0, %entry ], !dbg !1120
original name : i
returning name: i
SUSAN: visiting cast:   %1 = sext i32 %m to i64, !dbg !1118
CBackend: writeOperand 3595: i32 %m
SUSAN: getting value name for: i32 %m
inst from IRNaming: i32 %m
original name : m
returning name: m
CBackend: writeoperand here 3674? 
SUSAN: declaring 3252:   %indvars.iv.next10 = add nuw nsw i64 %indvars.iv9, 1, !dbg !1143
SUSAN: getting value name for:   %indvars.iv.next10 = add nuw nsw i64 %indvars.iv9, 1, !dbg !1143
inst from IRNaming:   %indvars.iv.next10 = add nuw nsw i64 %indvars.iv9, 1, !dbg !1143
original name : i
returning name: i
SUSAN: declaring with reconstructed name 3286: i
SUSAN: getting value name for:   %indvars.iv.next10 = add nuw nsw i64 %indvars.iv9, 1, !dbg !1143
inst from IRNaming:   %indvars.iv.next10 = add nuw nsw i64 %indvars.iv9, 1, !dbg !1143
original name : i
returning name: i
CBackend: writeOperand 3595:   %indvars.iv9 = phi i64 [ %indvars.iv.next10, %for.inc4 ], [ 0, %entry ], !dbg !1120
SUSAN: found IV 784  %indvars.iv9 = phi i64 [ %indvars.iv.next10, %for.inc4 ], [ 0, %entry ], !dbg !1120
SUSAN: found IV 784  %indvars.iv9 = phi i64 [ %indvars.iv.next10, %for.inc4 ], [ 0, %entry ], !dbg !1120
SUSAN: found IV 784  %indvars.iv9 = phi i64 [ %indvars.iv.next10, %for.inc4 ], [ 0, %entry ], !dbg !1120
SUSAN: getting value name for:   %indvars.iv9 = phi i64 [ %indvars.iv.next10, %for.inc4 ], [ 0, %entry ], !dbg !1120
inst from IRNaming:   %indvars.iv9 = phi i64 [ %indvars.iv.next10, %for.inc4 ], [ 0, %entry ], !dbg !1120
original name : i
returning name: i
SUSAN: found IV 784  %indvars.iv9 = phi i64 [ %indvars.iv.next10, %for.inc4 ], [ 0, %entry ], !dbg !1120
CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595: i64 1
CBackend: writeoperand here 3674? 
Linear Region with entry block: for.body
SUSAN: printing bb:for.body
CBEBackend: printing bb 7082 for.body
SUSAN: found IV 784  %indvars.iv9 = phi i64 [ %indvars.iv.next10, %for.inc4 ], [ 0, %entry ], !dbg !1120
SUSAN: found IV 784  %indvars.iv9 = phi i64 [ %indvars.iv.next10, %for.inc4 ], [ 0, %entry ], !dbg !1120
printing unconditional branch   br label %for.cond1, !dbg !1125
Loop Region with entry block: for.cond1
term 6818:   br i1 %cmp2, label %for.body3, label %for.end, !dbg !1131
SUSAN: condrelatedinst:  %indvars.iv6 = phi i64 [ %indvars.iv.next7, %for.inc ], [ 0, %for.body ], !dbg !1128
SUSAN: found IV 784  %indvars.iv6 = phi i64 [ %indvars.iv.next7, %for.inc ], [ 0, %for.body ], !dbg !1128
SUSAN: condrelatedinst:  %cmp2 = icmp slt i64 %indvars.iv6, %0, !dbg !1129
SUSAN: found IV 784  %indvars.iv6 = phi i64 [ %indvars.iv.next7, %for.inc ], [ 0, %for.body ], !dbg !1128
SUSAN: declaring 3252:   %indvars.iv6 = phi i64 [ %indvars.iv.next7, %for.inc ], [ 0, %for.body ], !dbg !1128
SUSAN: getting value name for:   %indvars.iv6 = phi i64 [ %indvars.iv.next7, %for.inc ], [ 0, %for.body ], !dbg !1128
inst from IRNaming:   %indvars.iv6 = phi i64 [ %indvars.iv.next7, %for.inc ], [ 0, %for.body ], !dbg !1128
original name : j
returning name: j
SUSAN: declaring with reconstructed name 3286: j
CBackend: writeOperand 3595: i64 0
CBackend: writeoperand here 3674? 
SUSAN: getting value name for:   %indvars.iv6 = phi i64 [ %indvars.iv.next7, %for.inc ], [ 0, %for.body ], !dbg !1128
inst from IRNaming:   %indvars.iv6 = phi i64 [ %indvars.iv.next7, %for.inc ], [ 0, %for.body ], !dbg !1128
original name : j
returning name: j
SUSAN: visiting cast:   %0 = sext i32 %n to i64, !dbg !1118
CBackend: writeOperand 3595: i32 %n
SUSAN: getting value name for: i32 %n
inst from IRNaming: i32 %n
original name : n
returning name: n
CBackend: writeoperand here 3674? 
SUSAN: declaring 3252:   %indvars.iv.next7 = add nuw nsw i64 %indvars.iv6, 1, !dbg !1138
SUSAN: getting value name for:   %indvars.iv.next7 = add nuw nsw i64 %indvars.iv6, 1, !dbg !1138
inst from IRNaming:   %indvars.iv.next7 = add nuw nsw i64 %indvars.iv6, 1, !dbg !1138
original name : j
returning name: j
SUSAN: declaring with reconstructed name 3286: j
SUSAN: getting value name for:   %indvars.iv.next7 = add nuw nsw i64 %indvars.iv6, 1, !dbg !1138
inst from IRNaming:   %indvars.iv.next7 = add nuw nsw i64 %indvars.iv6, 1, !dbg !1138
original name : j
returning name: j
CBackend: writeOperand 3595:   %indvars.iv6 = phi i64 [ %indvars.iv.next7, %for.inc ], [ 0, %for.body ], !dbg !1128
SUSAN: found IV 784  %indvars.iv6 = phi i64 [ %indvars.iv.next7, %for.inc ], [ 0, %for.body ], !dbg !1128
SUSAN: found IV 784  %indvars.iv6 = phi i64 [ %indvars.iv.next7, %for.inc ], [ 0, %for.body ], !dbg !1128
SUSAN: found IV 784  %indvars.iv6 = phi i64 [ %indvars.iv.next7, %for.inc ], [ 0, %for.body ], !dbg !1128
SUSAN: getting value name for:   %indvars.iv6 = phi i64 [ %indvars.iv.next7, %for.inc ], [ 0, %for.body ], !dbg !1128
inst from IRNaming:   %indvars.iv6 = phi i64 [ %indvars.iv.next7, %for.inc ], [ 0, %for.body ], !dbg !1128
original name : j
returning name: j
SUSAN: found IV 784  %indvars.iv6 = phi i64 [ %indvars.iv.next7, %for.inc ], [ 0, %for.body ], !dbg !1128
CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595: i64 1
CBackend: writeoperand here 3674? 
Linear Region with entry block: for.body3
SUSAN: printing bb:for.body3
CBEBackend: printing bb 7082 for.body3
SUSAN: found IV 784  %indvars.iv6 = phi i64 [ %indvars.iv.next7, %for.inc ], [ 0, %for.body ], !dbg !1128
SUSAN: found IV 784  %indvars.iv6 = phi i64 [ %indvars.iv.next7, %for.inc ], [ 0, %for.body ], !dbg !1128
SUSAN: printing instruction   store double 0.000000e+00, double* %arrayidx, align 8, !dbg !1136 at 6678
CBEBackend: printing store Inst:   store double 0.000000e+00, double* %arrayidx, align 8, !dbg !1136
CBackend: here? 10442
SUSAN: GEPINST:   %arrayidx = getelementptr inbounds double, double* %B, i64 %4, !dbg !1135
SUSAN: dereferenceTimes = 1
SUSAN: printing GEP:   %arrayidx = getelementptr inbounds double, double* %B, i64 %4, !dbg !1135
SUSAN: accessMemory true
SUSAN: first index is integer/pointertype type
SUSAN: writing ptr 10000:double* %B
SUSAN: writing ptr 9994: double* %B
SUSAN: getting value name for: double* %B
inst from IRNaming: double* %B
original name : B
returning name: B
CBackend: writeOperand 3595:   %4 = add nsw i64 %3, %indvars.iv6, !dbg !1134
SUSAN: found IV 784  %indvars.iv6 = phi i64 [ %indvars.iv.next7, %for.inc ], [ 0, %for.body ], !dbg !1128
SUSAN: found IV 784  %indvars.iv6 = phi i64 [ %indvars.iv.next7, %for.inc ], [ 0, %for.body ], !dbg !1128
CBackend: writeOperand 3595:   %3 = mul nsw i64 %indvars.iv9, %2, !dbg !1132
SUSAN: found IV 784  %indvars.iv6 = phi i64 [ %indvars.iv.next7, %for.inc ], [ 0, %for.body ], !dbg !1128
SUSAN: found IV 784  %indvars.iv6 = phi i64 [ %indvars.iv.next7, %for.inc ], [ 0, %for.body ], !dbg !1128
CBackend: writeOperand 3595:   %indvars.iv9 = phi i64 [ %indvars.iv.next10, %for.inc4 ], [ 0, %entry ], !dbg !1120
SUSAN: found IV 784  %indvars.iv9 = phi i64 [ %indvars.iv.next10, %for.inc4 ], [ 0, %entry ], !dbg !1120
SUSAN: found IV 784  %indvars.iv9 = phi i64 [ %indvars.iv.next10, %for.inc4 ], [ 0, %entry ], !dbg !1120
SUSAN: found IV 784  %indvars.iv9 = phi i64 [ %indvars.iv.next10, %for.inc4 ], [ 0, %entry ], !dbg !1120
SUSAN: getting value name for:   %indvars.iv9 = phi i64 [ %indvars.iv.next10, %for.inc4 ], [ 0, %entry ], !dbg !1120
inst from IRNaming:   %indvars.iv9 = phi i64 [ %indvars.iv.next10, %for.inc4 ], [ 0, %entry ], !dbg !1120
original name : i
returning name: i
SUSAN: found IV 784  %indvars.iv9 = phi i64 [ %indvars.iv.next10, %for.inc4 ], [ 0, %entry ], !dbg !1120
CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595:   %2 = sext i32 %n to i64, !dbg !1118
SUSAN: visiting cast:   %2 = sext i32 %n to i64, !dbg !1118
CBackend: writeOperand 3595: i32 %n
SUSAN: getting value name for: i32 %n
inst from IRNaming: i32 %n
original name : n
returning name: n
CBackend: writeoperand here 3674? 
CBackend: writeoperand here 3674? 
SUSAN: found IV 784  %indvars.iv6 = phi i64 [ %indvars.iv.next7, %for.inc ], [ 0, %for.body ], !dbg !1128
CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595:   %indvars.iv6 = phi i64 [ %indvars.iv.next7, %for.inc ], [ 0, %for.body ], !dbg !1128
SUSAN: found IV 784  %indvars.iv6 = phi i64 [ %indvars.iv.next7, %for.inc ], [ 0, %for.body ], !dbg !1128
SUSAN: found IV 784  %indvars.iv6 = phi i64 [ %indvars.iv.next7, %for.inc ], [ 0, %for.body ], !dbg !1128
SUSAN: found IV 784  %indvars.iv6 = phi i64 [ %indvars.iv.next7, %for.inc ], [ 0, %for.body ], !dbg !1128
SUSAN: getting value name for:   %indvars.iv6 = phi i64 [ %indvars.iv.next7, %for.inc ], [ 0, %for.body ], !dbg !1128
inst from IRNaming:   %indvars.iv6 = phi i64 [ %indvars.iv.next7, %for.inc ], [ 0, %for.body ], !dbg !1128
original name : j
returning name: j
SUSAN: found IV 784  %indvars.iv6 = phi i64 [ %indvars.iv.next7, %for.inc ], [ 0, %for.body ], !dbg !1128
CBackend: writeoperand here 3674? 
SUSAN: found IV 784  %indvars.iv6 = phi i64 [ %indvars.iv.next7, %for.inc ], [ 0, %for.body ], !dbg !1128
CBackend: writeoperand here 3674? 
CBackend: here? 10445
CBackend: writeOperand 3595: double 0.000000e+00
CBackend: writeoperand here 3674? 
CBackend: here? 10462
printing unconditional branch   br label %for.inc, !dbg !1137
CBERegion: printing latchBB for.inc
CBERegion: I 316:   %indvars.iv.next7 = add nuw nsw i64 %indvars.iv6, 1, !dbg !1138
SUSAN: found IV 784  %indvars.iv6 = phi i64 [ %indvars.iv.next7, %for.inc ], [ 0, %for.body ], !dbg !1128
CBERegion: I 316:   call void @llvm.dbg.value(metadata i32 undef, metadata !1184, metadata !DIExpression(DW_OP_plus_uconst, 1, DW_OP_stack_value)), !dbg !1171
SUSAN: found IV 784  %indvars.iv6 = phi i64 [ %indvars.iv.next7, %for.inc ], [ 0, %for.body ], !dbg !1128
SUSAN: found IV 784  %indvars.iv6 = phi i64 [ %indvars.iv.next7, %for.inc ], [ 0, %for.body ], !dbg !1128
CBERegion: I 316:   br label %for.cond1, !dbg !1139, !llvm.loop !1140
SUSAN: found IV 784  %indvars.iv6 = phi i64 [ %indvars.iv.next7, %for.inc ], [ 0, %for.body ], !dbg !1128
SUSAN: found IV 784  %indvars.iv6 = phi i64 [ %indvars.iv.next7, %for.inc ], [ 0, %for.body ], !dbg !1128
Linear Region with entry block: for.end
SUSAN: printing bb:for.end
CBEBackend: printing bb 7082 for.end
printing unconditional branch   br label %for.inc4, !dbg !1142
CBERegion: printing latchBB for.inc4
CBERegion: I 316:   %indvars.iv.next10 = add nuw nsw i64 %indvars.iv9, 1, !dbg !1143
SUSAN: found IV 784  %indvars.iv9 = phi i64 [ %indvars.iv.next10, %for.inc4 ], [ 0, %entry ], !dbg !1120
CBERegion: I 316:   call void @llvm.dbg.value(metadata i32 undef, metadata !1177, metadata !DIExpression(DW_OP_plus_uconst, 1, DW_OP_stack_value)), !dbg !1171
SUSAN: found IV 784  %indvars.iv9 = phi i64 [ %indvars.iv.next10, %for.inc4 ], [ 0, %entry ], !dbg !1120
SUSAN: found IV 784  %indvars.iv9 = phi i64 [ %indvars.iv.next10, %for.inc4 ], [ 0, %entry ], !dbg !1120
CBERegion: I 316:   br label %for.cond, !dbg !1144, !llvm.loop !1145
SUSAN: found IV 784  %indvars.iv9 = phi i64 [ %indvars.iv.next10, %for.inc4 ], [ 0, %entry ], !dbg !1120
SUSAN: found IV 784  %indvars.iv9 = phi i64 [ %indvars.iv.next10, %for.inc4 ], [ 0, %entry ], !dbg !1120
Linear Region with entry block: for.end6
SUSAN: printing bb:for.end6
CBEBackend: printing bb 7082 for.end6
printing unconditional branch   br label %for.cond7, !dbg !1147
Loop Region with entry block: for.cond7
term 6818:   br i1 %cmp8, label %for.body9, label %for.end34, !dbg !1152
SUSAN: condrelatedinst:  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc32 ], [ 0, %for.end6 ], !dbg !1149
SUSAN: found IV 784  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc32 ], [ 0, %for.end6 ], !dbg !1149
SUSAN: condrelatedinst:  %cmp8 = icmp slt i64 %indvars.iv3, %6, !dbg !1150
SUSAN: found IV 784  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc32 ], [ 0, %for.end6 ], !dbg !1149
SUSAN: declaring 3252:   %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc32 ], [ 0, %for.end6 ], !dbg !1149
SUSAN: getting value name for:   %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc32 ], [ 0, %for.end6 ], !dbg !1149
inst from IRNaming:   %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc32 ], [ 0, %for.end6 ], !dbg !1149
original name : i
returning name: i
SUSAN: declaring with reconstructed name 3286: i
CBackend: writeOperand 3595: i64 0
CBackend: writeoperand here 3674? 
SUSAN: getting value name for:   %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc32 ], [ 0, %for.end6 ], !dbg !1149
inst from IRNaming:   %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc32 ], [ 0, %for.end6 ], !dbg !1149
original name : i
returning name: i
SUSAN: visiting cast:   %6 = sext i32 %n to i64, !dbg !1147
CBackend: writeOperand 3595: i32 %n
SUSAN: getting value name for: i32 %n
inst from IRNaming: i32 %n
original name : n
returning name: n
CBackend: writeoperand here 3674? 
SUSAN: declaring 3252:   %indvars.iv.next4 = add nuw nsw i64 %indvars.iv3, 1, !dbg !1183
SUSAN: getting value name for:   %indvars.iv.next4 = add nuw nsw i64 %indvars.iv3, 1, !dbg !1183
inst from IRNaming:   %indvars.iv.next4 = add nuw nsw i64 %indvars.iv3, 1, !dbg !1183
original name : i
returning name: i
SUSAN: declaring with reconstructed name 3286: i
SUSAN: getting value name for:   %indvars.iv.next4 = add nuw nsw i64 %indvars.iv3, 1, !dbg !1183
inst from IRNaming:   %indvars.iv.next4 = add nuw nsw i64 %indvars.iv3, 1, !dbg !1183
original name : i
returning name: i
CBackend: writeOperand 3595:   %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc32 ], [ 0, %for.end6 ], !dbg !1149
SUSAN: found IV 784  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc32 ], [ 0, %for.end6 ], !dbg !1149
SUSAN: found IV 784  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc32 ], [ 0, %for.end6 ], !dbg !1149
SUSAN: found IV 784  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc32 ], [ 0, %for.end6 ], !dbg !1149
SUSAN: getting value name for:   %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc32 ], [ 0, %for.end6 ], !dbg !1149
inst from IRNaming:   %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc32 ], [ 0, %for.end6 ], !dbg !1149
original name : i
returning name: i
SUSAN: found IV 784  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc32 ], [ 0, %for.end6 ], !dbg !1149
CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595: i64 1
CBackend: writeoperand here 3674? 
Linear Region with entry block: for.body9
SUSAN: printing bb:for.body9
CBEBackend: printing bb 7082 for.body9
SUSAN: found IV 784  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc32 ], [ 0, %for.end6 ], !dbg !1149
SUSAN: found IV 784  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc32 ], [ 0, %for.end6 ], !dbg !1149
printing unconditional branch   br label %for.cond10, !dbg !1153
Loop Region with entry block: for.cond10
term 6818:   br i1 %cmp11, label %for.body12, label %for.end31, !dbg !1158
SUSAN: condrelatedinst:  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
SUSAN: condrelatedinst:  %cmp11 = icmp slt i64 %indvars.iv, %5, !dbg !1156
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
SUSAN: declaring 3252:   %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
SUSAN: getting value name for:   %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
inst from IRNaming:   %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
original name : j
returning name: j
SUSAN: declaring with reconstructed name 3286: j
CBackend: writeOperand 3595: i64 0
CBackend: writeoperand here 3674? 
SUSAN: getting value name for:   %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
inst from IRNaming:   %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
original name : j
returning name: j
SUSAN: visiting cast:   %5 = sext i32 %m to i64, !dbg !1147
CBackend: writeOperand 3595: i32 %m
SUSAN: getting value name for: i32 %m
inst from IRNaming: i32 %m
original name : m
returning name: m
CBackend: writeoperand here 3674? 
SUSAN: declaring 3252:   %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !1179
SUSAN: getting value name for:   %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !1179
inst from IRNaming:   %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !1179
original name : j
returning name: j
SUSAN: declaring with reconstructed name 3286: j
SUSAN: getting value name for:   %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !1179
inst from IRNaming:   %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !1179
original name : j
returning name: j
CBackend: writeOperand 3595:   %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
SUSAN: getting value name for:   %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
inst from IRNaming:   %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
original name : j
returning name: j
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595: i64 1
CBackend: writeoperand here 3674? 
Linear Region with entry block: for.body12
SUSAN: printing bb:for.body12
CBEBackend: printing bb 7082 for.body12
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
SUSAN: printing instruction   store double %div, double* %arrayidx19, align 8, !dbg !1168 at 6678
CBEBackend: printing store Inst:   store double %div, double* %arrayidx19, align 8, !dbg !1168
CBackend: here? 10442
SUSAN: GEPINST:   %arrayidx19 = getelementptr inbounds double, double* %A, i64 %11, !dbg !1167
SUSAN: dereferenceTimes = 1
SUSAN: printing GEP:   %arrayidx19 = getelementptr inbounds double, double* %A, i64 %11, !dbg !1167
SUSAN: accessMemory true
SUSAN: first index is integer/pointertype type
SUSAN: writing ptr 10000:double* %A
SUSAN: writing ptr 9994: double* %A
SUSAN: getting value name for: double* %A
inst from IRNaming: double* %A
original name : A
returning name: A
CBackend: writeOperand 3595:   %11 = add nsw i64 %10, %indvars.iv, !dbg !1166
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
CBackend: writeOperand 3595:   %10 = mul nsw i64 %indvars.iv3, %7, !dbg !1165
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
CBackend: writeOperand 3595:   %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc32 ], [ 0, %for.end6 ], !dbg !1149
SUSAN: found IV 784  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc32 ], [ 0, %for.end6 ], !dbg !1149
SUSAN: found IV 784  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc32 ], [ 0, %for.end6 ], !dbg !1149
SUSAN: found IV 784  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc32 ], [ 0, %for.end6 ], !dbg !1149
SUSAN: getting value name for:   %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc32 ], [ 0, %for.end6 ], !dbg !1149
inst from IRNaming:   %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc32 ], [ 0, %for.end6 ], !dbg !1149
original name : i
returning name: i
SUSAN: found IV 784  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc32 ], [ 0, %for.end6 ], !dbg !1149
CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595:   %7 = sext i32 %m to i64, !dbg !1147
SUSAN: visiting cast:   %7 = sext i32 %m to i64, !dbg !1147
CBackend: writeOperand 3595: i32 %m
SUSAN: getting value name for: i32 %m
inst from IRNaming: i32 %m
original name : m
returning name: m
CBackend: writeoperand here 3674? 
CBackend: writeoperand here 3674? 
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595:   %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
SUSAN: getting value name for:   %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
inst from IRNaming:   %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
original name : j
returning name: j
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
CBackend: writeoperand here 3674? 
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
CBackend: writeoperand here 3674? 
CBackend: here? 10445
CBackend: writeOperand 3595:   %div = fdiv double %mul14, %conv15, !dbg !1164
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
CBackend: writeOperand 3595:   %mul14 = fmul contract double %conv, %conv13, !dbg !1162
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
CBackend: writeOperand 3595:   %conv = sitofp i32 %8 to double, !dbg !1159
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
SUSAN: visiting cast:   %conv = sitofp i32 %8 to double, !dbg !1159
CBackend: writeOperand 3595:   %8 = trunc i64 %indvars.iv3 to i32, !dbg !1159
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
SUSAN: visiting cast:   %8 = trunc i64 %indvars.iv3 to i32, !dbg !1159
CBackend: writeOperand 3595:   %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc32 ], [ 0, %for.end6 ], !dbg !1149
SUSAN: found IV 784  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc32 ], [ 0, %for.end6 ], !dbg !1149
SUSAN: found IV 784  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc32 ], [ 0, %for.end6 ], !dbg !1149
SUSAN: found IV 784  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc32 ], [ 0, %for.end6 ], !dbg !1149
SUSAN: getting value name for:   %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc32 ], [ 0, %for.end6 ], !dbg !1149
inst from IRNaming:   %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc32 ], [ 0, %for.end6 ], !dbg !1149
original name : i
returning name: i
SUSAN: found IV 784  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc32 ], [ 0, %for.end6 ], !dbg !1149
CBackend: writeoperand here 3674? 
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
CBackend: writeoperand here 3674? 
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
CBackend: writeoperand here 3674? 
SUSAN: am I here 8049?
CBackend: writeOperand 3595:   %conv13 = sitofp i32 %9 to double, !dbg !1161
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
SUSAN: visiting cast:   %conv13 = sitofp i32 %9 to double, !dbg !1161
CBackend: writeOperand 3595:   %9 = trunc i64 %indvars.iv to i32, !dbg !1161
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
SUSAN: visiting cast:   %9 = trunc i64 %indvars.iv to i32, !dbg !1161
CBackend: writeOperand 3595:   %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
SUSAN: getting value name for:   %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
inst from IRNaming:   %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
original name : j
returning name: j
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
CBackend: writeoperand here 3674? 
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
CBackend: writeoperand here 3674? 
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
CBackend: writeoperand here 3674? 
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
CBackend: writeoperand here 3674? 
SUSAN: am I here 8049?
CBackend: writeOperand 3595:   %conv15 = sitofp i32 %m to double, !dbg !1163
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
SUSAN: visiting cast:   %conv15 = sitofp i32 %m to double, !dbg !1163
CBackend: writeOperand 3595: i32 %m
SUSAN: getting value name for: i32 %m
inst from IRNaming: i32 %m
original name : m
returning name: m
CBackend: writeoperand here 3674? 
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
CBackend: writeoperand here 3674? 
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
CBackend: writeoperand here 3674? 
CBackend: here? 10462
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
SUSAN: printing instruction   store double %div24, double* %arrayidx28, align 8, !dbg !1177 at 6678
CBEBackend: printing store Inst:   store double %div24, double* %arrayidx28, align 8, !dbg !1177
CBackend: here? 10442
SUSAN: GEPINST:   %arrayidx28 = getelementptr inbounds double, double* %B, i64 %idxprom27, !dbg !1176
SUSAN: dereferenceTimes = 1
SUSAN: printing GEP:   %arrayidx28 = getelementptr inbounds double, double* %B, i64 %idxprom27, !dbg !1176
SUSAN: accessMemory true
SUSAN: first index is integer/pointertype type
SUSAN: writing ptr 10000:double* %B
SUSAN: writing ptr 9994: double* %B
SUSAN: getting value name for: double* %B
inst from IRNaming: double* %B
original name : B
returning name: B
CBackend: writeOperand 3595:   %idxprom27 = sext i32 %add26 to i64, !dbg !1176
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
SUSAN: visiting cast:   %idxprom27 = sext i32 %add26 to i64, !dbg !1176
CBackend: writeOperand 3595:   %add26 = add nsw i32 %mul25, %14, !dbg !1175
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
CBackend: writeOperand 3595:   %mul25 = mul nsw i32 %j.1, %n, !dbg !1174
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
CBackend: writeOperand 3595:   %j.1 = phi i32 [ 0, %for.body9 ], [ %inc30, %for.inc29 ], !dbg !1155
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
SUSAN: getting value name for:   %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
inst from IRNaming:   %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
original name : j
returning name: j
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595: i32 %n
SUSAN: getting value name for: i32 %n
inst from IRNaming: i32 %n
original name : n
returning name: n
CBackend: writeoperand here 3674? 
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595:   %14 = trunc i64 %indvars.iv to i32, !dbg !1175
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
SUSAN: visiting cast:   %14 = trunc i64 %indvars.iv to i32, !dbg !1175
CBackend: writeOperand 3595:   %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
SUSAN: getting value name for:   %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
inst from IRNaming:   %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
original name : j
returning name: j
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
CBackend: writeoperand here 3674? 
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
CBackend: writeoperand here 3674? 
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
CBackend: writeoperand here 3674? 
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
CBackend: writeoperand here 3674? 
CBackend: here? 10445
CBackend: writeOperand 3595:   %div24 = fdiv double %mul22, %conv23, !dbg !1173
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
CBackend: writeOperand 3595:   %mul22 = fmul contract double %conv20, %conv21, !dbg !1171
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
CBackend: writeOperand 3595:   %conv20 = sitofp i32 %12 to double, !dbg !1169
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
SUSAN: visiting cast:   %conv20 = sitofp i32 %12 to double, !dbg !1169
CBackend: writeOperand 3595:   %12 = trunc i64 %indvars.iv3 to i32, !dbg !1169
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
SUSAN: visiting cast:   %12 = trunc i64 %indvars.iv3 to i32, !dbg !1169
CBackend: writeOperand 3595:   %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc32 ], [ 0, %for.end6 ], !dbg !1149
SUSAN: found IV 784  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc32 ], [ 0, %for.end6 ], !dbg !1149
SUSAN: found IV 784  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc32 ], [ 0, %for.end6 ], !dbg !1149
SUSAN: found IV 784  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc32 ], [ 0, %for.end6 ], !dbg !1149
SUSAN: getting value name for:   %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc32 ], [ 0, %for.end6 ], !dbg !1149
inst from IRNaming:   %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc32 ], [ 0, %for.end6 ], !dbg !1149
original name : i
returning name: i
SUSAN: found IV 784  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc32 ], [ 0, %for.end6 ], !dbg !1149
CBackend: writeoperand here 3674? 
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
CBackend: writeoperand here 3674? 
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
CBackend: writeoperand here 3674? 
SUSAN: am I here 8049?
CBackend: writeOperand 3595:   %conv21 = sitofp i32 %13 to double, !dbg !1170
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
SUSAN: visiting cast:   %conv21 = sitofp i32 %13 to double, !dbg !1170
CBackend: writeOperand 3595:   %13 = trunc i64 %indvars.iv to i32, !dbg !1170
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
SUSAN: visiting cast:   %13 = trunc i64 %indvars.iv to i32, !dbg !1170
CBackend: writeOperand 3595:   %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
SUSAN: getting value name for:   %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
inst from IRNaming:   %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
original name : j
returning name: j
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
CBackend: writeoperand here 3674? 
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
CBackend: writeoperand here 3674? 
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
CBackend: writeoperand here 3674? 
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
CBackend: writeoperand here 3674? 
SUSAN: am I here 8049?
CBackend: writeOperand 3595:   %conv23 = sitofp i32 %n to double, !dbg !1172
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
SUSAN: visiting cast:   %conv23 = sitofp i32 %n to double, !dbg !1172
CBackend: writeOperand 3595: i32 %n
SUSAN: getting value name for: i32 %n
inst from IRNaming: i32 %n
original name : n
returning name: n
CBackend: writeoperand here 3674? 
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
CBackend: writeoperand here 3674? 
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
CBackend: writeoperand here 3674? 
CBackend: here? 10462
printing unconditional branch   br label %for.inc29, !dbg !1178
CBERegion: printing latchBB for.inc29
CBERegion: I 316:   %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !1179
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
CBERegion: I 316:   %inc30 = add nuw nsw i32 %j.1, 1, !dbg !1179
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
CBERegion: I 316:   call void @llvm.dbg.value(metadata i32 %inc30, metadata !1184, metadata !DIExpression()), !dbg !1171
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
CBERegion: I 316:   br label %for.cond10, !dbg !1180, !llvm.loop !1181
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
Linear Region with entry block: for.end31
SUSAN: printing bb:for.end31
CBEBackend: printing bb 7082 for.end31
printing unconditional branch   br label %for.inc32, !dbg !1182
CBERegion: printing latchBB for.inc32
CBERegion: I 316:   %indvars.iv.next4 = add nuw nsw i64 %indvars.iv3, 1, !dbg !1183
SUSAN: found IV 784  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc32 ], [ 0, %for.end6 ], !dbg !1149
CBERegion: I 316:   call void @llvm.dbg.value(metadata i32 undef, metadata !1177, metadata !DIExpression(DW_OP_plus_uconst, 1, DW_OP_stack_value)), !dbg !1171
SUSAN: found IV 784  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc32 ], [ 0, %for.end6 ], !dbg !1149
SUSAN: found IV 784  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc32 ], [ 0, %for.end6 ], !dbg !1149
CBERegion: I 316:   br label %for.cond7, !dbg !1184, !llvm.loop !1185
SUSAN: found IV 784  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc32 ], [ 0, %for.end6 ], !dbg !1149
SUSAN: found IV 784  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc32 ], [ 0, %for.end6 ], !dbg !1149
Linear Region with entry block: for.end34
SUSAN: printing bb:for.end34
CBEBackend: printing bb 7082 for.end34
CBackend: iterating function 1759: cudaMemcpy
CBackend: iterating function 1759: _ZL6kerneliidPdS_
CBackend: printing function 1770_ZL6kerneliidPdS_
CBackend: here? 1175
SUSAN: found IV 784  %indvar.017 = phi i32 [ 0, %kcall.end ], [ %indvar.next.019, %latch.013 ]
term 6818:   br i1 %exitcond22, label %header.111.preheader, label %kcall.end10, !tulip.doall.loop.grid.collapse !1120
none omp loop ub:   %call3 = call i32 @_ZL10num_blocksii(i32 %m, i32 %6), !dbg !1150
CBackend: here? 1175
SUSAN: found IV 784  %indvar.0 = phi i32 [ 0, %entry ], [ %indvar.next.0, %latch.0 ]
term 6818:   br i1 %exitcond24, label %header.1.preheader, label %kcall.end, !tulip.doall.loop.grid !1120
none omp loop ub:   %call = call i32 @_ZL10num_blocksii(i32 %n, i32 256), !dbg !1118
CBackend: here? 1175
SUSAN: found IV 784  %indvar.114 = phi i32 [ %indvar.next.116, %latch.112 ], [ 0, %header.111.preheader ]
term 6818:   br i1 %exitcond21, label %header.2.preheader, label %latch.013
none omp loop ub:   %call4 = call i32 @_ZL10num_blocksii(i32 %n, i32 %7), !dbg !1152
CBackend: here? 1175
SUSAN: found IV 784  %indvar.1 = phi i32 [ %indvar.next.1, %latch.1 ], [ 0, %header.1.preheader ]
term 6818:   br i1 %exitcond23, label %kcall.configok, label %latch.0, !tulip.doall.loop.block !1120
none omp loop ub: i32 256
CBackend: here? 1175
SUSAN: found IV 784  %indvar.2 = phi i32 [ %indvar.next.2, %latch.2 ], [ 0, %header.2.preheader ]
term 6818:   br i1 %exitcond20, label %header.3.preheader, label %latch.112, !tulip.doall.loop.block.collapse !1120
none omp loop ub: i32 8
CBackend: here? 1175
SUSAN: found IV 784  %indvar.3 = phi i32 [ %indvar.next.3, %latch.3 ], [ 0, %header.3.preheader ]
term 6818:   br i1 %exitcond, label %kcall.configok9, label %latch.2
none omp loop ub: i32 32
=========LOOP PROFILES=========
Loop: Loop at depth 1 containing: %header.0<header><exiting>,%header.1.preheader,%header.1,%latch.0<latch>,%kcall.configok,%latch.1
    Loop at depth 2 containing: %header.1<header><exiting>,%kcall.configok,%latch.1<latch>

isomp: 0
Loop: Loop at depth 4 containing: %header.3<header><exiting>,%kcall.configok9,%latch.3<latch>

isomp: 0
Loop: Loop at depth 2 containing: %header.111<header><exiting>,%header.2.preheader,%header.2,%latch.112<latch>,%header.3.preheader,%header.3,%latch.2,%kcall.configok9,%latch.3
    Loop at depth 3 containing: %header.2<header><exiting>,%header.3.preheader,%header.3,%latch.2<latch>,%kcall.configok9,%latch.3
        Loop at depth 4 containing: %header.3<header><exiting>,%kcall.configok9,%latch.3<latch>

isomp: 0
Loop: Loop at depth 1 containing: %header.010<header><exiting>,%header.111.preheader,%header.111,%latch.013<latch>,%header.2.preheader,%header.2,%latch.112,%header.3.preheader,%header.3,%latch.2,%kcall.configok9,%latch.3
    Loop at depth 2 containing: %header.111<header><exiting>,%header.2.preheader,%header.2,%latch.112<latch>,%header.3.preheader,%header.3,%latch.2,%kcall.configok9,%latch.3
        Loop at depth 3 containing: %header.2<header><exiting>,%header.3.preheader,%header.3,%latch.2<latch>,%kcall.configok9,%latch.3
            Loop at depth 4 containing: %header.3<header><exiting>,%kcall.configok9,%latch.3<latch>

isomp: 0
Loop: Loop at depth 2 containing: %header.1<header><exiting>,%kcall.configok,%latch.1<latch>

isomp: 0
Loop: Loop at depth 3 containing: %header.2<header><exiting>,%header.3.preheader,%header.3,%latch.2<latch>,%kcall.configok9,%latch.3
    Loop at depth 4 containing: %header.3<header><exiting>,%kcall.configok9,%latch.3<latch>

isomp: 0
SUSAN: opnd0  %indvar.0 = phi i32 [ 0, %entry ], [ %indvar.next.0, %latch.0 ]
SUSAN: opnd1  %call = call i32 @_ZL10num_blocksii(i32 %n, i32 256), !dbg !1118
SUSAN: found IV 784  %indvar.0 = phi i32 [ 0, %entry ], [ %indvar.next.0, %latch.0 ]
SUSAN: opnd0  %indvar.1 = phi i32 [ %indvar.next.1, %latch.1 ], [ 0, %header.1.preheader ]
SUSAN: opnd1i32 256
SUSAN: found IV 784  %indvar.1 = phi i32 [ %indvar.next.1, %latch.1 ], [ 0, %header.1.preheader ]
SUSAN: opnd0  %indvar.017 = phi i32 [ 0, %kcall.end ], [ %indvar.next.019, %latch.013 ]
SUSAN: opnd1  %call3 = call i32 @_ZL10num_blocksii(i32 %m, i32 %6), !dbg !1150
SUSAN: found IV 784  %indvar.017 = phi i32 [ 0, %kcall.end ], [ %indvar.next.019, %latch.013 ]
SUSAN: opnd0  %indvar.114 = phi i32 [ %indvar.next.116, %latch.112 ], [ 0, %header.111.preheader ]
SUSAN: opnd1  %call4 = call i32 @_ZL10num_blocksii(i32 %n, i32 %7), !dbg !1152
SUSAN: found IV 784  %indvar.114 = phi i32 [ %indvar.next.116, %latch.112 ], [ 0, %header.111.preheader ]
SUSAN: opnd0  %indvar.2 = phi i32 [ %indvar.next.2, %latch.2 ], [ 0, %header.2.preheader ]
SUSAN: opnd1i32 8
SUSAN: found IV 784  %indvar.2 = phi i32 [ %indvar.next.2, %latch.2 ], [ 0, %header.2.preheader ]
SUSAN: opnd0  %indvar.3 = phi i32 [ %indvar.next.3, %latch.3 ], [ 0, %header.3.preheader ]
SUSAN: opnd1i32 32
SUSAN: found IV 784  %indvar.3 = phi i32 [ %indvar.next.3, %latch.3 ], [ 0, %header.3.preheader ]
SUSAN: BB:
entry:
  %agg.tmp = alloca %struct.dim3, align 4
  %agg.tmp1 = alloca %struct.dim3, align 4
  %agg.tmp.coerce = alloca { i64, i32 }, align 4
  %agg.tmp1.coerce = alloca { i64, i32 }, align 4
  %block = alloca %struct.dim3, align 4
  %grid = alloca %struct.dim3, align 4
  %agg.tmp5 = alloca %struct.dim3, align 4
  %agg.tmp6 = alloca %struct.dim3, align 4
  %agg.tmp5.coerce = alloca { i64, i32 }, align 4
  %agg.tmp6.coerce = alloca { i64, i32 }, align 4
  call void @llvm.dbg.value(metadata i32 %n, metadata !1110, metadata !DIExpression()), !dbg !1111
  call void @llvm.dbg.value(metadata i32 %m, metadata !1112, metadata !DIExpression()), !dbg !1111
  call void @llvm.dbg.value(metadata double %alpha, metadata !1113, metadata !DIExpression()), !dbg !1111
  call void @llvm.dbg.value(metadata double* %B, metadata !1114, metadata !DIExpression()), !dbg !1111
  call void @llvm.dbg.value(metadata double* %A, metadata !1115, metadata !DIExpression()), !dbg !1111
  call void @llvm.dbg.value(metadata i32 256, metadata !1116, metadata !DIExpression()), !dbg !1111
  %call = call i32 @_ZL10num_blocksii(i32 %n, i32 256), !dbg !1118
  %dim3gep.0 = getelementptr %struct.dim3, %struct.dim3* %agg.tmp, i32 0, i32 0
  store i32 %call, i32* %dim3gep.0
  %dim3gep.1 = getelementptr %struct.dim3, %struct.dim3* %agg.tmp, i32 0, i32 1
  store i32 1, i32* %dim3gep.1
  %dim3gep.2 = getelementptr %struct.dim3, %struct.dim3* %agg.tmp, i32 0, i32 2
  store i32 1, i32* %dim3gep.2
  %dim3gep.01 = getelementptr %struct.dim3, %struct.dim3* %agg.tmp1, i32 0, i32 0
  store i32 256, i32* %dim3gep.01
  %dim3gep.12 = getelementptr %struct.dim3, %struct.dim3* %agg.tmp1, i32 0, i32 1
  store i32 1, i32* %dim3gep.12
  %dim3gep.23 = getelementptr %struct.dim3, %struct.dim3* %agg.tmp1, i32 0, i32 2
  store i32 1, i32* %dim3gep.23
  %0 = bitcast { i64, i32 }* %agg.tmp.coerce to i8*, !dbg !1119
  %1 = bitcast %struct.dim3* %agg.tmp to i8*, !dbg !1119
  %2 = call i8* @memcpy(i8* %0, i8* %1, i64 12), !dbg !1119
  %3 = bitcast { i64, i32 }* %agg.tmp1.coerce to i8*, !dbg !1119
  %4 = bitcast %struct.dim3* %agg.tmp1 to i8*, !dbg !1119
  %5 = call i8* @memcpy(i8* %3, i8* %4, i64 12), !dbg !1119
  br label %header.0

SUSAN: BB:
header.0:                                         ; preds = %latch.0, %entry
  %indvar.0 = phi i32 [ 0, %entry ], [ %indvar.next.0, %latch.0 ]
  %exitcond24 = icmp ne i32 %indvar.0, %call
  br i1 %exitcond24, label %header.1.preheader, label %kcall.end, !tulip.doall.loop.grid !1120

SUSAN: BB:
header.1.preheader:                               ; preds = %header.0
  br label %header.1

SUSAN: BB:
header.1:                                         ; preds = %header.1.preheader, %latch.1
  %indvar.1 = phi i32 [ %indvar.next.1, %latch.1 ], [ 0, %header.1.preheader ]
  %exitcond23 = icmp ne i32 %indvar.1, 256
  br i1 %exitcond23, label %kcall.configok, label %latch.0, !tulip.doall.loop.block !1120

SUSAN: BB:
latch.1:                                          ; preds = %kcall.configok
  %indvar.next.1 = add nuw nsw i32 %indvar.1, 1
  br label %header.1

SUSAN: BB:
latch.0:                                          ; preds = %header.1
  %indvar.next.0 = add i32 %indvar.0, 1
  br label %header.0

SUSAN: BB:
kcall.configok:                                   ; preds = %header.1
  call void @_Z15kernel_contractiidPdS_.1(i32 %n, i32 %m, double %alpha, double* %B, double* %A, i32 %call, i32 1, i32 1, i32 256, i32 1, i32 1, i32 %indvar.0, i32 0, i32 0, i32 %indvar.1, i32 0, i32 0)
  br label %latch.1

SUSAN: BB:
kcall.end:                                        ; preds = %header.0
  call void @llvm.dbg.declare(metadata %struct.dim3* %block, metadata !1121, metadata !DIExpression()), !dbg !1146
  %dim3gep.04 = getelementptr %struct.dim3, %struct.dim3* %block, i32 0, i32 0
  store i32 8, i32* %dim3gep.04
  %dim3gep.15 = getelementptr %struct.dim3, %struct.dim3* %block, i32 0, i32 1
  store i32 32, i32* %dim3gep.15
  %dim3gep.26 = getelementptr %struct.dim3, %struct.dim3* %block, i32 0, i32 2
  store i32 1, i32* %dim3gep.26
  call void @llvm.dbg.declare(metadata %struct.dim3* %grid, metadata !1147, metadata !DIExpression()), !dbg !1148
  %x = getelementptr inbounds %struct.dim3, %struct.dim3* %block, i32 0, i32 0, !dbg !1149
  %6 = load i32, i32* %x, align 4, !dbg !1149
  %call3 = call i32 @_ZL10num_blocksii(i32 %m, i32 %6), !dbg !1150
  %y = getelementptr inbounds %struct.dim3, %struct.dim3* %block, i32 0, i32 1, !dbg !1151
  %7 = load i32, i32* %y, align 4, !dbg !1151
  %call4 = call i32 @_ZL10num_blocksii(i32 %n, i32 %7), !dbg !1152
  %dim3gep.07 = getelementptr %struct.dim3, %struct.dim3* %grid, i32 0, i32 0
  store i32 %call3, i32* %dim3gep.07
  %dim3gep.18 = getelementptr %struct.dim3, %struct.dim3* %grid, i32 0, i32 1
  store i32 %call4, i32* %dim3gep.18
  %dim3gep.29 = getelementptr %struct.dim3, %struct.dim3* %grid, i32 0, i32 2
  store i32 1, i32* %dim3gep.29
  %8 = bitcast %struct.dim3* %agg.tmp5 to i8*, !dbg !1153
  %9 = bitcast %struct.dim3* %grid to i8*, !dbg !1153
  %10 = call i8* @memcpy(i8* %8, i8* %9, i64 12), !dbg !1153
  %11 = bitcast %struct.dim3* %agg.tmp6 to i8*, !dbg !1154
  %12 = bitcast %struct.dim3* %block to i8*, !dbg !1154
  %13 = call i8* @memcpy(i8* %11, i8* %12, i64 12), !dbg !1154
  %14 = bitcast { i64, i32 }* %agg.tmp5.coerce to i8*, !dbg !1155
  %15 = bitcast %struct.dim3* %agg.tmp5 to i8*, !dbg !1155
  %16 = call i8* @memcpy(i8* %14, i8* %15, i64 12), !dbg !1155
  %17 = bitcast { i64, i32 }* %agg.tmp6.coerce to i8*, !dbg !1155
  %18 = bitcast %struct.dim3* %agg.tmp6 to i8*, !dbg !1155
  %19 = call i8* @memcpy(i8* %17, i8* %18, i64 12), !dbg !1155
  br label %header.010

SUSAN: BB:
header.010:                                       ; preds = %latch.013, %kcall.end
  %indvar.017 = phi i32 [ 0, %kcall.end ], [ %indvar.next.019, %latch.013 ]
  %exitcond22 = icmp ne i32 %indvar.017, %call3
  br i1 %exitcond22, label %header.111.preheader, label %kcall.end10, !tulip.doall.loop.grid.collapse !1120

SUSAN: BB:
header.111.preheader:                             ; preds = %header.010
  br label %header.111

SUSAN: BB:
header.111:                                       ; preds = %header.111.preheader, %latch.112
  %indvar.114 = phi i32 [ %indvar.next.116, %latch.112 ], [ 0, %header.111.preheader ]
  %exitcond21 = icmp ne i32 %indvar.114, %call4
  br i1 %exitcond21, label %header.2.preheader, label %latch.013

SUSAN: BB:
header.2.preheader:                               ; preds = %header.111
  br label %header.2

SUSAN: BB:
header.2:                                         ; preds = %header.2.preheader, %latch.2
  %indvar.2 = phi i32 [ %indvar.next.2, %latch.2 ], [ 0, %header.2.preheader ]
  %exitcond20 = icmp ne i32 %indvar.2, 8
  br i1 %exitcond20, label %header.3.preheader, label %latch.112, !tulip.doall.loop.block.collapse !1120

SUSAN: BB:
header.3.preheader:                               ; preds = %header.2
  br label %header.3

SUSAN: BB:
header.3:                                         ; preds = %header.3.preheader, %latch.3
  %indvar.3 = phi i32 [ %indvar.next.3, %latch.3 ], [ 0, %header.3.preheader ]
  %exitcond = icmp ne i32 %indvar.3, 32
  br i1 %exitcond, label %kcall.configok9, label %latch.2

SUSAN: BB:
latch.3:                                          ; preds = %kcall.configok9
  %indvar.next.3 = add nuw nsw i32 %indvar.3, 1
  br label %header.3

SUSAN: BB:
latch.2:                                          ; preds = %header.3
  %indvar.next.2 = add nuw nsw i32 %indvar.2, 1
  br label %header.2

SUSAN: BB:
latch.112:                                        ; preds = %header.2
  %indvar.next.116 = add i32 %indvar.114, 1
  br label %header.111

SUSAN: BB:
latch.013:                                        ; preds = %header.111
  %indvar.next.019 = add i32 %indvar.017, 1
  br label %header.010

SUSAN: BB:
kcall.configok9:                                  ; preds = %header.3
  call void @_Z12kernel_alphaiidPdS_.2(i32 %n, i32 %m, double %alpha, double* %B, double* %A, i32 %call3, i32 %call4, i32 1, i32 8, i32 32, i32 1, i32 %indvar.017, i32 %indvar.114, i32 0, i32 %indvar.2, i32 %indvar.3, i32 0)
  br label %latch.3

SUSAN: BB:
kcall.end10:                                      ; preds = %header.010
  ret void, !dbg !1156

SUSAN: trying to get exit for loop: Loop at depth 1 containing: %header.0<header><exiting>,%header.1.preheader,%header.1,%latch.0<latch>,%kcall.configok,%latch.1
    Loop at depth 2 containing: %header.1<header><exiting>,%kcall.configok,%latch.1<latch>

SUSAN exitBB: 
header.0:                                         ; preds = %latch.0, %entry
  %indvar.0 = phi i32 [ 0, %entry ], [ %indvar.next.0, %latch.0 ]
  %exitcond24 = icmp ne i32 %indvar.0, %call
  br i1 %exitcond24, label %header.1.preheader, label %kcall.end, !tulip.doall.loop.grid !1120

SUSAN: trying to get exit for loop: Loop at depth 2 containing: %header.1<header><exiting>,%kcall.configok,%latch.1<latch>

SUSAN exitBB: 
header.1:                                         ; preds = %header.1.preheader, %latch.1
  %indvar.1 = phi i32 [ %indvar.next.1, %latch.1 ], [ 0, %header.1.preheader ]
  %exitcond23 = icmp ne i32 %indvar.1, 256
  br i1 %exitcond23, label %kcall.configok, label %latch.0, !tulip.doall.loop.block !1120

SUSAN: trying to get exit for loop: Loop at depth 1 containing: %header.010<header><exiting>,%header.111.preheader,%header.111,%latch.013<latch>,%header.2.preheader,%header.2,%latch.112,%header.3.preheader,%header.3,%latch.2,%kcall.configok9,%latch.3
    Loop at depth 2 containing: %header.111<header><exiting>,%header.2.preheader,%header.2,%latch.112<latch>,%header.3.preheader,%header.3,%latch.2,%kcall.configok9,%latch.3
        Loop at depth 3 containing: %header.2<header><exiting>,%header.3.preheader,%header.3,%latch.2<latch>,%kcall.configok9,%latch.3
            Loop at depth 4 containing: %header.3<header><exiting>,%kcall.configok9,%latch.3<latch>

SUSAN exitBB: 
header.010:                                       ; preds = %latch.013, %kcall.end
  %indvar.017 = phi i32 [ 0, %kcall.end ], [ %indvar.next.019, %latch.013 ]
  %exitcond22 = icmp ne i32 %indvar.017, %call3
  br i1 %exitcond22, label %header.111.preheader, label %kcall.end10, !tulip.doall.loop.grid.collapse !1120

SUSAN: trying to get exit for loop: Loop at depth 2 containing: %header.111<header><exiting>,%header.2.preheader,%header.2,%latch.112<latch>,%header.3.preheader,%header.3,%latch.2,%kcall.configok9,%latch.3
    Loop at depth 3 containing: %header.2<header><exiting>,%header.3.preheader,%header.3,%latch.2<latch>,%kcall.configok9,%latch.3
        Loop at depth 4 containing: %header.3<header><exiting>,%kcall.configok9,%latch.3<latch>

SUSAN exitBB: 
header.111:                                       ; preds = %header.111.preheader, %latch.112
  %indvar.114 = phi i32 [ %indvar.next.116, %latch.112 ], [ 0, %header.111.preheader ]
  %exitcond21 = icmp ne i32 %indvar.114, %call4
  br i1 %exitcond21, label %header.2.preheader, label %latch.013

SUSAN: trying to get exit for loop: Loop at depth 3 containing: %header.2<header><exiting>,%header.3.preheader,%header.3,%latch.2<latch>,%kcall.configok9,%latch.3
    Loop at depth 4 containing: %header.3<header><exiting>,%kcall.configok9,%latch.3<latch>

SUSAN exitBB: 
header.2:                                         ; preds = %header.2.preheader, %latch.2
  %indvar.2 = phi i32 [ %indvar.next.2, %latch.2 ], [ 0, %header.2.preheader ]
  %exitcond20 = icmp ne i32 %indvar.2, 8
  br i1 %exitcond20, label %header.3.preheader, label %latch.112, !tulip.doall.loop.block.collapse !1120

SUSAN: trying to get exit for loop: Loop at depth 4 containing: %header.3<header><exiting>,%kcall.configok9,%latch.3<latch>

SUSAN exitBB: 
header.3:                                         ; preds = %header.3.preheader, %latch.3
  %indvar.3 = phi i32 [ %indvar.next.3, %latch.3 ], [ 0, %header.3.preheader ]
  %exitcond = icmp ne i32 %indvar.3, 32
  br i1 %exitcond, label %kcall.configok9, label %latch.2

SUSAN: entry block is a linear region! entry
CBERegion: including entry in a linear region
CBERegion: nextBB 
entry:
  %agg.tmp = alloca %struct.dim3, align 4
  %agg.tmp1 = alloca %struct.dim3, align 4
  %agg.tmp.coerce = alloca { i64, i32 }, align 4
  %agg.tmp1.coerce = alloca { i64, i32 }, align 4
  %block = alloca %struct.dim3, align 4
  %grid = alloca %struct.dim3, align 4
  %agg.tmp5 = alloca %struct.dim3, align 4
  %agg.tmp6 = alloca %struct.dim3, align 4
  %agg.tmp5.coerce = alloca { i64, i32 }, align 4
  %agg.tmp6.coerce = alloca { i64, i32 }, align 4
  call void @llvm.dbg.value(metadata i32 %n, metadata !1110, metadata !DIExpression()), !dbg !1111
  call void @llvm.dbg.value(metadata i32 %m, metadata !1112, metadata !DIExpression()), !dbg !1111
  call void @llvm.dbg.value(metadata double %alpha, metadata !1113, metadata !DIExpression()), !dbg !1111
  call void @llvm.dbg.value(metadata double* %B, metadata !1114, metadata !DIExpression()), !dbg !1111
  call void @llvm.dbg.value(metadata double* %A, metadata !1115, metadata !DIExpression()), !dbg !1111
  call void @llvm.dbg.value(metadata i32 256, metadata !1116, metadata !DIExpression()), !dbg !1111
  %call = call i32 @_ZL10num_blocksii(i32 %n, i32 256), !dbg !1118
  %dim3gep.0 = getelementptr %struct.dim3, %struct.dim3* %agg.tmp, i32 0, i32 0
  store i32 %call, i32* %dim3gep.0
  %dim3gep.1 = getelementptr %struct.dim3, %struct.dim3* %agg.tmp, i32 0, i32 1
  store i32 1, i32* %dim3gep.1
  %dim3gep.2 = getelementptr %struct.dim3, %struct.dim3* %agg.tmp, i32 0, i32 2
  store i32 1, i32* %dim3gep.2
  %dim3gep.01 = getelementptr %struct.dim3, %struct.dim3* %agg.tmp1, i32 0, i32 0
  store i32 256, i32* %dim3gep.01
  %dim3gep.12 = getelementptr %struct.dim3, %struct.dim3* %agg.tmp1, i32 0, i32 1
  store i32 1, i32* %dim3gep.12
  %dim3gep.23 = getelementptr %struct.dim3, %struct.dim3* %agg.tmp1, i32 0, i32 2
  store i32 1, i32* %dim3gep.23
  %0 = bitcast { i64, i32 }* %agg.tmp.coerce to i8*, !dbg !1119
  %1 = bitcast %struct.dim3* %agg.tmp to i8*, !dbg !1119
  %2 = call i8* @memcpy(i8* %0, i8* %1, i64 12), !dbg !1119
  %3 = bitcast { i64, i32 }* %agg.tmp1.coerce to i8*, !dbg !1119
  %4 = bitcast %struct.dim3* %agg.tmp1 to i8*, !dbg !1119
  %5 = call i8* @memcpy(i8* %3, i8* %4, i64 12), !dbg !1119
  br label %header.0

SUSAN: nextRegionEntryBB header.0
CBackend: entryBB is a loop: header.0
SUSAN: entry block is a loop region! header.0
creating loop region for entryBB: header.0
SUSAN: loop at 355 Loop at depth 1 containing: %header.0<header><exiting>,%header.1.preheader,%header.1,%latch.0<latch>,%kcall.configok,%latch.1
    Loop at depth 2 containing: %header.1<header><exiting>,%kcall.configok,%latch.1<latch>

SUSAN: found IV 784  %indvar.0 = phi i32 [ 0, %entry ], [ %indvar.next.0, %latch.0 ]
term 6818:   br i1 %exitcond24, label %header.1.preheader, label %kcall.end, !tulip.doall.loop.grid !1120
CBERegion: startBB 393: 
header.1.preheader:                               ; preds = %header.0
  br label %header.1

CBERegion: here? 149
CBackend: entryBB is a loop: header.1.preheader
but not a header!
SUSAN: entry block is a linear region! header.1.preheader
CBERegion: including header.1.preheader in a linear region
CBERegion: nextBB 
header.1.preheader:                               ; preds = %header.0
  br label %header.1

SUSAN: nextRegionEntryBB header.1
for region: Loop at depth 1 containing: %header.0<header><exiting>,%header.1.preheader,%header.1,%latch.0<latch>,%kcall.configok,%latch.1
    Loop at depth 2 containing: %header.1<header><exiting>,%kcall.configok,%latch.1<latch>

CBERegion: here? 149
CBackend: entryBB is a loop: header.1
SUSAN: entry block is a loop region! header.1
creating loop region for entryBB: header.1
SUSAN: loop at 355 Loop at depth 2 containing: %header.1<header><exiting>,%kcall.configok,%latch.1<latch>

SUSAN: found IV 784  %indvar.1 = phi i32 [ %indvar.next.1, %latch.1 ], [ 0, %header.1.preheader ]
term 6818:   br i1 %exitcond23, label %kcall.configok, label %latch.0, !tulip.doall.loop.block !1120
CBERegion: startBB 393: 
kcall.configok:                                   ; preds = %header.1
  call void @_Z15kernel_contractiidPdS_.1(i32 %n, i32 %m, double %alpha, double* %B, double* %A, i32 %call, i32 1, i32 1, i32 256, i32 1, i32 1, i32 %indvar.0, i32 0, i32 0, i32 %indvar.1, i32 0, i32 0)
  br label %latch.1

CBERegion: here? 149
CBackend: entryBB is a loop: kcall.configok
but not a header!
SUSAN: entry block is a linear region! kcall.configok
CBERegion: including kcall.configok in a linear region
CBERegion: nextBB 
kcall.configok:                                   ; preds = %header.1
  call void @_Z15kernel_contractiidPdS_.1(i32 %n, i32 %m, double %alpha, double* %B, double* %A, i32 %call, i32 1, i32 1, i32 256, i32 1, i32 1, i32 %indvar.0, i32 0, i32 0, i32 %indvar.1, i32 0, i32 0)
  br label %latch.1

SUSAN: nextRegionEntryBB latch.1
for region: Loop at depth 2 containing: %header.1<header><exiting>,%kcall.configok,%latch.1<latch>

SUSAN: nextRegionEntryBB latch.0
for region: Loop at depth 1 containing: %header.0<header><exiting>,%header.1.preheader,%header.1,%latch.0<latch>,%kcall.configok,%latch.1
    Loop at depth 2 containing: %header.1<header><exiting>,%kcall.configok,%latch.1<latch>

SUSAN: nextRegionEntryBB kcall.end
SUSAN: entry block is a linear region! kcall.end
CBERegion: including kcall.end in a linear region
CBERegion: nextBB 
kcall.end:                                        ; preds = %header.0
  call void @llvm.dbg.declare(metadata %struct.dim3* %block, metadata !1121, metadata !DIExpression()), !dbg !1146
  %dim3gep.04 = getelementptr %struct.dim3, %struct.dim3* %block, i32 0, i32 0
  store i32 8, i32* %dim3gep.04
  %dim3gep.15 = getelementptr %struct.dim3, %struct.dim3* %block, i32 0, i32 1
  store i32 32, i32* %dim3gep.15
  %dim3gep.26 = getelementptr %struct.dim3, %struct.dim3* %block, i32 0, i32 2
  store i32 1, i32* %dim3gep.26
  call void @llvm.dbg.declare(metadata %struct.dim3* %grid, metadata !1147, metadata !DIExpression()), !dbg !1148
  %x = getelementptr inbounds %struct.dim3, %struct.dim3* %block, i32 0, i32 0, !dbg !1149
  %6 = load i32, i32* %x, align 4, !dbg !1149
  %call3 = call i32 @_ZL10num_blocksii(i32 %m, i32 %6), !dbg !1150
  %y = getelementptr inbounds %struct.dim3, %struct.dim3* %block, i32 0, i32 1, !dbg !1151
  %7 = load i32, i32* %y, align 4, !dbg !1151
  %call4 = call i32 @_ZL10num_blocksii(i32 %n, i32 %7), !dbg !1152
  %dim3gep.07 = getelementptr %struct.dim3, %struct.dim3* %grid, i32 0, i32 0
  store i32 %call3, i32* %dim3gep.07
  %dim3gep.18 = getelementptr %struct.dim3, %struct.dim3* %grid, i32 0, i32 1
  store i32 %call4, i32* %dim3gep.18
  %dim3gep.29 = getelementptr %struct.dim3, %struct.dim3* %grid, i32 0, i32 2
  store i32 1, i32* %dim3gep.29
  %8 = bitcast %struct.dim3* %agg.tmp5 to i8*, !dbg !1153
  %9 = bitcast %struct.dim3* %grid to i8*, !dbg !1153
  %10 = call i8* @memcpy(i8* %8, i8* %9, i64 12), !dbg !1153
  %11 = bitcast %struct.dim3* %agg.tmp6 to i8*, !dbg !1154
  %12 = bitcast %struct.dim3* %block to i8*, !dbg !1154
  %13 = call i8* @memcpy(i8* %11, i8* %12, i64 12), !dbg !1154
  %14 = bitcast { i64, i32 }* %agg.tmp5.coerce to i8*, !dbg !1155
  %15 = bitcast %struct.dim3* %agg.tmp5 to i8*, !dbg !1155
  %16 = call i8* @memcpy(i8* %14, i8* %15, i64 12), !dbg !1155
  %17 = bitcast { i64, i32 }* %agg.tmp6.coerce to i8*, !dbg !1155
  %18 = bitcast %struct.dim3* %agg.tmp6 to i8*, !dbg !1155
  %19 = call i8* @memcpy(i8* %17, i8* %18, i64 12), !dbg !1155
  br label %header.010

SUSAN: nextRegionEntryBB header.010
CBackend: entryBB is a loop: header.010
SUSAN: entry block is a loop region! header.010
creating loop region for entryBB: header.010
SUSAN: loop at 355 Loop at depth 1 containing: %header.010<header><exiting>,%header.111.preheader,%header.111,%latch.013<latch>,%header.2.preheader,%header.2,%latch.112,%header.3.preheader,%header.3,%latch.2,%kcall.configok9,%latch.3
    Loop at depth 2 containing: %header.111<header><exiting>,%header.2.preheader,%header.2,%latch.112<latch>,%header.3.preheader,%header.3,%latch.2,%kcall.configok9,%latch.3
        Loop at depth 3 containing: %header.2<header><exiting>,%header.3.preheader,%header.3,%latch.2<latch>,%kcall.configok9,%latch.3
            Loop at depth 4 containing: %header.3<header><exiting>,%kcall.configok9,%latch.3<latch>

SUSAN: found IV 784  %indvar.017 = phi i32 [ 0, %kcall.end ], [ %indvar.next.019, %latch.013 ]
term 6818:   br i1 %exitcond22, label %header.111.preheader, label %kcall.end10, !tulip.doall.loop.grid.collapse !1120
CBERegion: startBB 393: 
header.111.preheader:                             ; preds = %header.010
  br label %header.111

CBERegion: here? 149
CBackend: entryBB is a loop: header.111.preheader
but not a header!
SUSAN: entry block is a linear region! header.111.preheader
CBERegion: including header.111.preheader in a linear region
CBERegion: nextBB 
header.111.preheader:                             ; preds = %header.010
  br label %header.111

SUSAN: nextRegionEntryBB header.111
for region: Loop at depth 1 containing: %header.010<header><exiting>,%header.111.preheader,%header.111,%latch.013<latch>,%header.2.preheader,%header.2,%latch.112,%header.3.preheader,%header.3,%latch.2,%kcall.configok9,%latch.3
    Loop at depth 2 containing: %header.111<header><exiting>,%header.2.preheader,%header.2,%latch.112<latch>,%header.3.preheader,%header.3,%latch.2,%kcall.configok9,%latch.3
        Loop at depth 3 containing: %header.2<header><exiting>,%header.3.preheader,%header.3,%latch.2<latch>,%kcall.configok9,%latch.3
            Loop at depth 4 containing: %header.3<header><exiting>,%kcall.configok9,%latch.3<latch>

CBERegion: here? 149
CBackend: entryBB is a loop: header.111
SUSAN: entry block is a loop region! header.111
creating loop region for entryBB: header.111
SUSAN: loop at 355 Loop at depth 2 containing: %header.111<header><exiting>,%header.2.preheader,%header.2,%latch.112<latch>,%header.3.preheader,%header.3,%latch.2,%kcall.configok9,%latch.3
    Loop at depth 3 containing: %header.2<header><exiting>,%header.3.preheader,%header.3,%latch.2<latch>,%kcall.configok9,%latch.3
        Loop at depth 4 containing: %header.3<header><exiting>,%kcall.configok9,%latch.3<latch>

SUSAN: found IV 784  %indvar.114 = phi i32 [ %indvar.next.116, %latch.112 ], [ 0, %header.111.preheader ]
term 6818:   br i1 %exitcond21, label %header.2.preheader, label %latch.013
CBERegion: startBB 393: 
header.2.preheader:                               ; preds = %header.111
  br label %header.2

CBERegion: here? 149
CBackend: entryBB is a loop: header.2.preheader
but not a header!
SUSAN: entry block is a linear region! header.2.preheader
CBERegion: including header.2.preheader in a linear region
CBERegion: nextBB 
header.2.preheader:                               ; preds = %header.111
  br label %header.2

SUSAN: nextRegionEntryBB header.2
for region: Loop at depth 2 containing: %header.111<header><exiting>,%header.2.preheader,%header.2,%latch.112<latch>,%header.3.preheader,%header.3,%latch.2,%kcall.configok9,%latch.3
    Loop at depth 3 containing: %header.2<header><exiting>,%header.3.preheader,%header.3,%latch.2<latch>,%kcall.configok9,%latch.3
        Loop at depth 4 containing: %header.3<header><exiting>,%kcall.configok9,%latch.3<latch>

CBERegion: here? 149
CBackend: entryBB is a loop: header.2
SUSAN: entry block is a loop region! header.2
creating loop region for entryBB: header.2
SUSAN: loop at 355 Loop at depth 3 containing: %header.2<header><exiting>,%header.3.preheader,%header.3,%latch.2<latch>,%kcall.configok9,%latch.3
    Loop at depth 4 containing: %header.3<header><exiting>,%kcall.configok9,%latch.3<latch>

SUSAN: found IV 784  %indvar.2 = phi i32 [ %indvar.next.2, %latch.2 ], [ 0, %header.2.preheader ]
term 6818:   br i1 %exitcond20, label %header.3.preheader, label %latch.112, !tulip.doall.loop.block.collapse !1120
CBERegion: startBB 393: 
header.3.preheader:                               ; preds = %header.2
  br label %header.3

CBERegion: here? 149
CBackend: entryBB is a loop: header.3.preheader
but not a header!
SUSAN: entry block is a linear region! header.3.preheader
CBERegion: including header.3.preheader in a linear region
CBERegion: nextBB 
header.3.preheader:                               ; preds = %header.2
  br label %header.3

SUSAN: nextRegionEntryBB header.3
for region: Loop at depth 3 containing: %header.2<header><exiting>,%header.3.preheader,%header.3,%latch.2<latch>,%kcall.configok9,%latch.3
    Loop at depth 4 containing: %header.3<header><exiting>,%kcall.configok9,%latch.3<latch>

CBERegion: here? 149
CBackend: entryBB is a loop: header.3
SUSAN: entry block is a loop region! header.3
creating loop region for entryBB: header.3
SUSAN: loop at 355 Loop at depth 4 containing: %header.3<header><exiting>,%kcall.configok9,%latch.3<latch>

SUSAN: found IV 784  %indvar.3 = phi i32 [ %indvar.next.3, %latch.3 ], [ 0, %header.3.preheader ]
term 6818:   br i1 %exitcond, label %kcall.configok9, label %latch.2
CBERegion: startBB 393: 
kcall.configok9:                                  ; preds = %header.3
  call void @_Z12kernel_alphaiidPdS_.2(i32 %n, i32 %m, double %alpha, double* %B, double* %A, i32 %call3, i32 %call4, i32 1, i32 8, i32 32, i32 1, i32 %indvar.017, i32 %indvar.114, i32 0, i32 %indvar.2, i32 %indvar.3, i32 0)
  br label %latch.3

CBERegion: here? 149
CBackend: entryBB is a loop: kcall.configok9
but not a header!
SUSAN: entry block is a linear region! kcall.configok9
CBERegion: including kcall.configok9 in a linear region
CBERegion: nextBB 
kcall.configok9:                                  ; preds = %header.3
  call void @_Z12kernel_alphaiidPdS_.2(i32 %n, i32 %m, double %alpha, double* %B, double* %A, i32 %call3, i32 %call4, i32 1, i32 8, i32 32, i32 1, i32 %indvar.017, i32 %indvar.114, i32 0, i32 %indvar.2, i32 %indvar.3, i32 0)
  br label %latch.3

SUSAN: nextRegionEntryBB latch.3
for region: Loop at depth 4 containing: %header.3<header><exiting>,%kcall.configok9,%latch.3<latch>

SUSAN: nextRegionEntryBB latch.2
for region: Loop at depth 3 containing: %header.2<header><exiting>,%header.3.preheader,%header.3,%latch.2<latch>,%kcall.configok9,%latch.3
    Loop at depth 4 containing: %header.3<header><exiting>,%kcall.configok9,%latch.3<latch>

SUSAN: nextRegionEntryBB latch.112
for region: Loop at depth 2 containing: %header.111<header><exiting>,%header.2.preheader,%header.2,%latch.112<latch>,%header.3.preheader,%header.3,%latch.2,%kcall.configok9,%latch.3
    Loop at depth 3 containing: %header.2<header><exiting>,%header.3.preheader,%header.3,%latch.2<latch>,%kcall.configok9,%latch.3
        Loop at depth 4 containing: %header.3<header><exiting>,%kcall.configok9,%latch.3<latch>

SUSAN: nextRegionEntryBB latch.013
for region: Loop at depth 1 containing: %header.010<header><exiting>,%header.111.preheader,%header.111,%latch.013<latch>,%header.2.preheader,%header.2,%latch.112,%header.3.preheader,%header.3,%latch.2,%kcall.configok9,%latch.3
    Loop at depth 2 containing: %header.111<header><exiting>,%header.2.preheader,%header.2,%latch.112<latch>,%header.3.preheader,%header.3,%latch.2,%kcall.configok9,%latch.3
        Loop at depth 3 containing: %header.2<header><exiting>,%header.3.preheader,%header.3,%latch.2<latch>,%kcall.configok9,%latch.3
            Loop at depth 4 containing: %header.3<header><exiting>,%kcall.configok9,%latch.3<latch>

SUSAN: nextRegionEntryBB kcall.end10
SUSAN: entry block is a linear region! kcall.end10
SUSAN: found IV 784  %indvar.0 = phi i32 [ 0, %entry ], [ %indvar.next.0, %latch.0 ]
SUSAN: found IV 784  %indvar.3 = phi i32 [ %indvar.next.3, %latch.3 ], [ 0, %header.3.preheader ]
SUSAN: found IV 784  %indvar.114 = phi i32 [ %indvar.next.116, %latch.112 ], [ 0, %header.111.preheader ]
SUSAN: found IV 784  %indvar.017 = phi i32 [ 0, %kcall.end ], [ %indvar.next.019, %latch.013 ]
SUSAN: found IV 784  %indvar.1 = phi i32 [ %indvar.next.1, %latch.1 ], [ 0, %header.1.preheader ]
SUSAN: found IV 784  %indvar.2 = phi i32 [ %indvar.next.2, %latch.2 ], [ 0, %header.2.preheader ]
SUSAN: found IV 784  %indvar.0 = phi i32 [ 0, %entry ], [ %indvar.next.0, %latch.0 ]
SUSAN: found IV 784  %indvar.1 = phi i32 [ %indvar.next.1, %latch.1 ], [ 0, %header.1.preheader ]
SUSAN: found IV 784  %indvar.017 = phi i32 [ 0, %kcall.end ], [ %indvar.next.019, %latch.013 ]
SUSAN: found IV 784  %indvar.114 = phi i32 [ %indvar.next.116, %latch.112 ], [ 0, %header.111.preheader ]
SUSAN: found IV 784  %indvar.2 = phi i32 [ %indvar.next.2, %latch.2 ], [ 0, %header.2.preheader ]
SUSAN: found IV 784  %indvar.3 = phi i32 [ %indvar.next.3, %latch.3 ], [ 0, %header.3.preheader ]
SUSAN: found IV 784  %indvar.017 = phi i32 [ 0, %kcall.end ], [ %indvar.next.019, %latch.013 ]
SUSAN: found IV 784  %indvar.017 = phi i32 [ 0, %kcall.end ], [ %indvar.next.019, %latch.013 ]
SUSAN: found IV 784  %indvar.017 = phi i32 [ 0, %kcall.end ], [ %indvar.next.019, %latch.013 ]
SUSAN: found IV 784  %indvar.017 = phi i32 [ 0, %kcall.end ], [ %indvar.next.019, %latch.013 ]
SUSAN: found IV 784  %indvar.114 = phi i32 [ %indvar.next.116, %latch.112 ], [ 0, %header.111.preheader ]
SUSAN: found IV 784  %indvar.114 = phi i32 [ %indvar.next.116, %latch.112 ], [ 0, %header.111.preheader ]
SUSAN: found IV 784  %indvar.017 = phi i32 [ 0, %kcall.end ], [ %indvar.next.019, %latch.013 ]
SUSAN: found IV 784  %indvar.017 = phi i32 [ 0, %kcall.end ], [ %indvar.next.019, %latch.013 ]
SUSAN: found IV 784  %indvar.017 = phi i32 [ 0, %kcall.end ], [ %indvar.next.019, %latch.013 ]
SUSAN: found IV 784  %indvar.114 = phi i32 [ %indvar.next.116, %latch.112 ], [ 0, %header.111.preheader ]
SUSAN: found IV 784  %indvar.114 = phi i32 [ %indvar.next.116, %latch.112 ], [ 0, %header.111.preheader ]
SUSAN: found IV 784  %indvar.2 = phi i32 [ %indvar.next.2, %latch.2 ], [ 0, %header.2.preheader ]
SUSAN: found IV 784  %indvar.2 = phi i32 [ %indvar.next.2, %latch.2 ], [ 0, %header.2.preheader ]
SUSAN: found IV 784  %indvar.114 = phi i32 [ %indvar.next.116, %latch.112 ], [ 0, %header.111.preheader ]
SUSAN: found IV 784  %indvar.114 = phi i32 [ %indvar.next.116, %latch.112 ], [ 0, %header.111.preheader ]
SUSAN: found IV 784  %indvar.114 = phi i32 [ %indvar.next.116, %latch.112 ], [ 0, %header.111.preheader ]
SUSAN: found IV 784  %indvar.2 = phi i32 [ %indvar.next.2, %latch.2 ], [ 0, %header.2.preheader ]
SUSAN: found IV 784  %indvar.2 = phi i32 [ %indvar.next.2, %latch.2 ], [ 0, %header.2.preheader ]
SUSAN: found IV 784  %indvar.3 = phi i32 [ %indvar.next.3, %latch.3 ], [ 0, %header.3.preheader ]
SUSAN: found IV 784  %indvar.3 = phi i32 [ %indvar.next.3, %latch.3 ], [ 0, %header.3.preheader ]
SUSAN: found IV 784  %indvar.2 = phi i32 [ %indvar.next.2, %latch.2 ], [ 0, %header.2.preheader ]
SUSAN: found IV 784  %indvar.2 = phi i32 [ %indvar.next.2, %latch.2 ], [ 0, %header.2.preheader ]
SUSAN: found IV 784  %indvar.2 = phi i32 [ %indvar.next.2, %latch.2 ], [ 0, %header.2.preheader ]
SUSAN: found IV 784  %indvar.3 = phi i32 [ %indvar.next.3, %latch.3 ], [ 0, %header.3.preheader ]
SUSAN: found IV 784  %indvar.3 = phi i32 [ %indvar.next.3, %latch.3 ], [ 0, %header.3.preheader ]
SUSAN: found IV 784  %indvar.3 = phi i32 [ %indvar.next.3, %latch.3 ], [ 0, %header.3.preheader ]
SUSAN: found IV 784  %indvar.3 = phi i32 [ %indvar.next.3, %latch.3 ], [ 0, %header.3.preheader ]
SUSAN: found IV 784  %indvar.3 = phi i32 [ %indvar.next.3, %latch.3 ], [ 0, %header.3.preheader ]
SUSAN: found IV 784  %indvar.3 = phi i32 [ %indvar.next.3, %latch.3 ], [ 0, %header.3.preheader ]
SUSAN: found IV 784  %indvar.3 = phi i32 [ %indvar.next.3, %latch.3 ], [ 0, %header.3.preheader ]
SUSAN: found IV 784  %indvar.0 = phi i32 [ 0, %entry ], [ %indvar.next.0, %latch.0 ]
SUSAN: found IV 784  %indvar.0 = phi i32 [ 0, %entry ], [ %indvar.next.0, %latch.0 ]
SUSAN: found IV 784  %indvar.0 = phi i32 [ 0, %entry ], [ %indvar.next.0, %latch.0 ]
SUSAN: found IV 784  %indvar.0 = phi i32 [ 0, %entry ], [ %indvar.next.0, %latch.0 ]
SUSAN: found IV 784  %indvar.1 = phi i32 [ %indvar.next.1, %latch.1 ], [ 0, %header.1.preheader ]
SUSAN: found IV 784  %indvar.1 = phi i32 [ %indvar.next.1, %latch.1 ], [ 0, %header.1.preheader ]
SUSAN: found IV 784  %indvar.0 = phi i32 [ 0, %entry ], [ %indvar.next.0, %latch.0 ]
SUSAN: found IV 784  %indvar.0 = phi i32 [ 0, %entry ], [ %indvar.next.0, %latch.0 ]
SUSAN: found IV 784  %indvar.0 = phi i32 [ 0, %entry ], [ %indvar.next.0, %latch.0 ]
SUSAN: found IV 784  %indvar.1 = phi i32 [ %indvar.next.1, %latch.1 ], [ 0, %header.1.preheader ]
SUSAN: found IV 784  %indvar.1 = phi i32 [ %indvar.next.1, %latch.1 ], [ 0, %header.1.preheader ]
SUSAN: found IV 784  %indvar.1 = phi i32 [ %indvar.next.1, %latch.1 ], [ 0, %header.1.preheader ]
SUSAN: found IV 784  %indvar.1 = phi i32 [ %indvar.next.1, %latch.1 ], [ 0, %header.1.preheader ]
SUSAN: found IV 784  %indvar.1 = phi i32 [ %indvar.next.1, %latch.1 ], [ 0, %header.1.preheader ]
SUSAN: found IV 784  %indvar.1 = phi i32 [ %indvar.next.1, %latch.1 ], [ 0, %header.1.preheader ]
SUSAN: found IV 784  %indvar.1 = phi i32 [ %indvar.next.1, %latch.1 ], [ 0, %header.1.preheader ]
SUSAN: CI at 1400:   call void @llvm.dbg.value(metadata i32 %n, metadata !1251, metadata !DIExpression()), !dbg !1252
SUSAN: CI at 1400:   call void @llvm.dbg.value(metadata i32 %m, metadata !1253, metadata !DIExpression()), !dbg !1252
SUSAN: CI at 1400:   call void @llvm.dbg.value(metadata double %alpha, metadata !1254, metadata !DIExpression()), !dbg !1252
SUSAN: CI at 1400:   call void @llvm.dbg.value(metadata double* %B, metadata !1255, metadata !DIExpression()), !dbg !1252
SUSAN: CI at 1400:   call void @llvm.dbg.value(metadata double* %A, metadata !1256, metadata !DIExpression()), !dbg !1252
SUSAN: CI at 1400:   call void @llvm.dbg.value(metadata i32 256, metadata !1257, metadata !DIExpression()), !dbg !1252
SUSAN: CI at 1400:   %call = call i32 @_ZL10num_blocksii(i32 %n, i32 256), !dbg !1118
SUSAN: CI at 1400:   %2 = call i8* @memcpy(i8* %0, i8* %1, i64 12), !dbg !1119
SUSAN: CI at 1400:   %5 = call i8* @memcpy(i8* %3, i8* %4, i64 12), !dbg !1119
SUSAN: CI at 1400:   call void @_Z15kernel_contractiidPdS_.1(i32 %n, i32 %m, double %alpha, double* %B, double* %A, i32 %call, i32 1, i32 1, i32 256, i32 1, i32 1, i32 %indvar.0, i32 0, i32 0, i32 %indvar.1, i32 0, i32 0)
SUSAN: CI at 1400:   call void @llvm.dbg.declare(metadata %struct.dim3* %block, metadata !1261, metadata !DIExpression()), !dbg !1286
SUSAN: CI at 1400:   call void @llvm.dbg.declare(metadata %struct.dim3* %grid, metadata !1287, metadata !DIExpression()), !dbg !1288
SUSAN: CI at 1400:   %call3 = call i32 @_ZL10num_blocksii(i32 %m, i32 %6), !dbg !1150
SUSAN: CI at 1400:   %call4 = call i32 @_ZL10num_blocksii(i32 %n, i32 %7), !dbg !1152
SUSAN: CI at 1400:   %10 = call i8* @memcpy(i8* %8, i8* %9, i64 12), !dbg !1153
SUSAN: CI at 1400:   %13 = call i8* @memcpy(i8* %11, i8* %12, i64 12), !dbg !1154
SUSAN: CI at 1400:   %16 = call i8* @memcpy(i8* %14, i8* %15, i64 12), !dbg !1155
SUSAN: CI at 1400:   %19 = call i8* @memcpy(i8* %17, i8* %18, i64 12), !dbg !1155
SUSAN: CI at 1400:   call void @_Z12kernel_alphaiidPdS_.2(i32 %n, i32 %m, double %alpha, double* %B, double* %A, i32 %call3, i32 %call4, i32 1, i32 8, i32 32, i32 1, i32 %indvar.017, i32 %indvar.114, i32 0, i32 %indvar.2, i32 %indvar.3, i32 0)
SUSAN: found IV 784  %indvar.017 = phi i32 [ 0, %kcall.end ], [ %indvar.next.019, %latch.013 ]
SUSAN: found IV 784  %indvar.017 = phi i32 [ 0, %kcall.end ], [ %indvar.next.019, %latch.013 ]
SUSAN: found IV 784  %indvar.0 = phi i32 [ 0, %entry ], [ %indvar.next.0, %latch.0 ]
SUSAN: found IV 784  %indvar.0 = phi i32 [ 0, %entry ], [ %indvar.next.0, %latch.0 ]
SUSAN: found IV 784  %indvar.114 = phi i32 [ %indvar.next.116, %latch.112 ], [ 0, %header.111.preheader ]
SUSAN: found IV 784  %indvar.114 = phi i32 [ %indvar.next.116, %latch.112 ], [ 0, %header.111.preheader ]
SUSAN: found IV 784  %indvar.1 = phi i32 [ %indvar.next.1, %latch.1 ], [ 0, %header.1.preheader ]
SUSAN: found IV 784  %indvar.1 = phi i32 [ %indvar.next.1, %latch.1 ], [ 0, %header.1.preheader ]
SUSAN: found IV 784  %indvar.2 = phi i32 [ %indvar.next.2, %latch.2 ], [ 0, %header.2.preheader ]
SUSAN: found IV 784  %indvar.2 = phi i32 [ %indvar.next.2, %latch.2 ], [ 0, %header.2.preheader ]
SUSAN: found IV 784  %indvar.3 = phi i32 [ %indvar.next.3, %latch.3 ], [ 0, %header.3.preheader ]
SUSAN: found IV 784  %indvar.3 = phi i32 [ %indvar.next.3, %latch.3 ], [ 0, %header.3.preheader ]
========== IV MAP==========
SUSAN: headPHI:   %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
SUSAN: phi:   %j.1 = phi i32 [ 0, %for.body9 ], [ %inc30, %for.inc29 ], !dbg !1155
SUSAN: found LP for L:Loop at depth 1 containing: %header.010<header><exiting>,%header.111.preheader,%header.111,%latch.013<latch>,%header.2.preheader,%header.2,%latch.112,%header.3.preheader,%header.3,%latch.2,%kcall.configok9,%latch.3
    Loop at depth 2 containing: %header.111<header><exiting>,%header.2.preheader,%header.2,%latch.112<latch>,%header.3.preheader,%header.3,%latch.2,%kcall.configok9,%latch.3
        Loop at depth 3 containing: %header.2<header><exiting>,%header.3.preheader,%header.3,%latch.2<latch>,%kcall.configok9,%latch.3
            Loop at depth 4 containing: %header.3<header><exiting>,%kcall.configok9,%latch.3<latch>

SUSAN: found LP for L:Loop at depth 1 containing: %header.0<header><exiting>,%header.1.preheader,%header.1,%latch.0<latch>,%kcall.configok,%latch.1
    Loop at depth 2 containing: %header.1<header><exiting>,%kcall.configok,%latch.1<latch>

SUSAN: found LP for L:Loop at depth 2 containing: %header.111<header><exiting>,%header.2.preheader,%header.2,%latch.112<latch>,%header.3.preheader,%header.3,%latch.2,%kcall.configok9,%latch.3
    Loop at depth 3 containing: %header.2<header><exiting>,%header.3.preheader,%header.3,%latch.2<latch>,%kcall.configok9,%latch.3
        Loop at depth 4 containing: %header.3<header><exiting>,%kcall.configok9,%latch.3<latch>

SUSAN: found LP for L:Loop at depth 2 containing: %header.1<header><exiting>,%kcall.configok,%latch.1<latch>

SUSAN: found LP for L:Loop at depth 3 containing: %header.2<header><exiting>,%header.3.preheader,%header.3,%latch.2<latch>,%kcall.configok9,%latch.3
    Loop at depth 4 containing: %header.3<header><exiting>,%kcall.configok9,%latch.3<latch>

SUSAN: found LP for L:Loop at depth 4 containing: %header.3<header><exiting>,%kcall.configok9,%latch.3<latch>

currInst :  %agg.tmp.coerce = alloca { i64, i32 }, align 4
currInst :  %0 = bitcast { i64, i32 }* %agg.tmp.coerce to i8*, !dbg !1119
currInst :  %2 = call i8* @memcpy(i8* %0, i8* %1, i64 12), !dbg !1119
currInst :  %agg.tmp1.coerce = alloca { i64, i32 }, align 4
currInst :  %3 = bitcast { i64, i32 }* %agg.tmp1.coerce to i8*, !dbg !1119
currInst :  %5 = call i8* @memcpy(i8* %3, i8* %4, i64 12), !dbg !1119
currInst :  %dim3gep.0 = getelementptr %struct.dim3, %struct.dim3* %agg.tmp, i32 0, i32 0
currInst :  store i32 %call, i32* %dim3gep.0
currInst :  %dim3gep.1 = getelementptr %struct.dim3, %struct.dim3* %agg.tmp, i32 0, i32 1
currInst :  store i32 1, i32* %dim3gep.1
currInst :  %dim3gep.2 = getelementptr %struct.dim3, %struct.dim3* %agg.tmp, i32 0, i32 2
currInst :  store i32 1, i32* %dim3gep.2
currInst :  %dim3gep.01 = getelementptr %struct.dim3, %struct.dim3* %agg.tmp1, i32 0, i32 0
currInst :  store i32 256, i32* %dim3gep.01
currInst :  %dim3gep.12 = getelementptr %struct.dim3, %struct.dim3* %agg.tmp1, i32 0, i32 1
currInst :  store i32 1, i32* %dim3gep.12
currInst :  %dim3gep.23 = getelementptr %struct.dim3, %struct.dim3* %agg.tmp1, i32 0, i32 2
currInst :  store i32 1, i32* %dim3gep.23
currInst :  %0 = bitcast { i64, i32 }* %agg.tmp.coerce to i8*, !dbg !1119
currInst :  %2 = call i8* @memcpy(i8* %0, i8* %1, i64 12), !dbg !1119
currInst :  %1 = bitcast %struct.dim3* %agg.tmp to i8*, !dbg !1119
currInst :  %2 = call i8* @memcpy(i8* %0, i8* %1, i64 12), !dbg !1119
currInst :  %3 = bitcast { i64, i32 }* %agg.tmp1.coerce to i8*, !dbg !1119
currInst :  %5 = call i8* @memcpy(i8* %3, i8* %4, i64 12), !dbg !1119
currInst :  %4 = bitcast %struct.dim3* %agg.tmp1 to i8*, !dbg !1119
currInst :  %5 = call i8* @memcpy(i8* %3, i8* %4, i64 12), !dbg !1119
currInst :  %exitcond24 = icmp ne i32 %indvar.0, %call
currInst :  br i1 %exitcond24, label %header.1.preheader, label %kcall.end, !tulip.doall.loop.grid !1120
currInst :  %exitcond23 = icmp ne i32 %indvar.1, 256
currInst :  br i1 %exitcond23, label %kcall.configok, label %latch.0, !tulip.doall.loop.block !1120
currInst :  %dim3gep.04 = getelementptr %struct.dim3, %struct.dim3* %block, i32 0, i32 0
currInst :  store i32 8, i32* %dim3gep.04
currInst :  %dim3gep.15 = getelementptr %struct.dim3, %struct.dim3* %block, i32 0, i32 1
currInst :  store i32 32, i32* %dim3gep.15
currInst :  %dim3gep.26 = getelementptr %struct.dim3, %struct.dim3* %block, i32 0, i32 2
currInst :  store i32 1, i32* %dim3gep.26
currInst :  %x = getelementptr inbounds %struct.dim3, %struct.dim3* %block, i32 0, i32 0, !dbg !1149
currInst :  %6 = load i32, i32* %x, align 4, !dbg !1149
currInst :  %call3 = call i32 @_ZL10num_blocksii(i32 %m, i32 %6), !dbg !1150
currInst :  %6 = load i32, i32* %x, align 4, !dbg !1149
currInst :  %call3 = call i32 @_ZL10num_blocksii(i32 %m, i32 %6), !dbg !1150
currInst :  %y = getelementptr inbounds %struct.dim3, %struct.dim3* %block, i32 0, i32 1, !dbg !1151
currInst :  %7 = load i32, i32* %y, align 4, !dbg !1151
currInst :  %call4 = call i32 @_ZL10num_blocksii(i32 %n, i32 %7), !dbg !1152
currInst :  %7 = load i32, i32* %y, align 4, !dbg !1151
currInst :  %call4 = call i32 @_ZL10num_blocksii(i32 %n, i32 %7), !dbg !1152
currInst :  %dim3gep.07 = getelementptr %struct.dim3, %struct.dim3* %grid, i32 0, i32 0
currInst :  store i32 %call3, i32* %dim3gep.07
currInst :  %dim3gep.18 = getelementptr %struct.dim3, %struct.dim3* %grid, i32 0, i32 1
currInst :  store i32 %call4, i32* %dim3gep.18
currInst :  %dim3gep.29 = getelementptr %struct.dim3, %struct.dim3* %grid, i32 0, i32 2
currInst :  store i32 1, i32* %dim3gep.29
currInst :  %8 = bitcast %struct.dim3* %agg.tmp5 to i8*, !dbg !1153
currInst :  %10 = call i8* @memcpy(i8* %8, i8* %9, i64 12), !dbg !1153
currInst :  %9 = bitcast %struct.dim3* %grid to i8*, !dbg !1153
currInst :  %10 = call i8* @memcpy(i8* %8, i8* %9, i64 12), !dbg !1153
currInst :  %11 = bitcast %struct.dim3* %agg.tmp6 to i8*, !dbg !1154
currInst :  %13 = call i8* @memcpy(i8* %11, i8* %12, i64 12), !dbg !1154
currInst :  %12 = bitcast %struct.dim3* %block to i8*, !dbg !1154
currInst :  %13 = call i8* @memcpy(i8* %11, i8* %12, i64 12), !dbg !1154
currInst :  %14 = bitcast { i64, i32 }* %agg.tmp5.coerce to i8*, !dbg !1155
currInst :  %16 = call i8* @memcpy(i8* %14, i8* %15, i64 12), !dbg !1155
currInst :  %15 = bitcast %struct.dim3* %agg.tmp5 to i8*, !dbg !1155
currInst :  %16 = call i8* @memcpy(i8* %14, i8* %15, i64 12), !dbg !1155
currInst :  %17 = bitcast { i64, i32 }* %agg.tmp6.coerce to i8*, !dbg !1155
currInst :  %19 = call i8* @memcpy(i8* %17, i8* %18, i64 12), !dbg !1155
currInst :  %18 = bitcast %struct.dim3* %agg.tmp6 to i8*, !dbg !1155
currInst :  %19 = call i8* @memcpy(i8* %17, i8* %18, i64 12), !dbg !1155
currInst :  %exitcond22 = icmp ne i32 %indvar.017, %call3
currInst :  br i1 %exitcond22, label %header.111.preheader, label %kcall.end10, !tulip.doall.loop.grid.collapse !1120
currInst :  %exitcond21 = icmp ne i32 %indvar.114, %call4
currInst :  br i1 %exitcond21, label %header.2.preheader, label %latch.013
currInst :  %exitcond20 = icmp ne i32 %indvar.2, 8
currInst :  br i1 %exitcond20, label %header.3.preheader, label %latch.112, !tulip.doall.loop.block.collapse !1120
currInst :  %exitcond = icmp ne i32 %indvar.3, 32
currInst :  br i1 %exitcond, label %kcall.configok9, label %latch.2
LP->LV 1694:   %indvar.0 = phi i32 [ 0, %entry ], [ %indvar.next.0, %latch.0 ]
LP->L 1694: Loop at depth 1 containing: %header.0<header><exiting>,%header.1.preheader,%header.1,%latch.0<latch>,%kcall.configok,%latch.1
    Loop at depth 2 containing: %header.1<header><exiting>,%kcall.configok,%latch.1<latch>

nestlevel: i
LP->LV 1694:   %indvar.3 = phi i32 [ %indvar.next.3, %latch.3 ], [ 0, %header.3.preheader ]
LP->L 1694: Loop at depth 4 containing: %header.3<header><exiting>,%kcall.configok9,%latch.3<latch>

nestlevel: l
LP->LV 1694:   %indvar.114 = phi i32 [ %indvar.next.116, %latch.112 ], [ 0, %header.111.preheader ]
LP->L 1694: Loop at depth 2 containing: %header.111<header><exiting>,%header.2.preheader,%header.2,%latch.112<latch>,%header.3.preheader,%header.3,%latch.2,%kcall.configok9,%latch.3
    Loop at depth 3 containing: %header.2<header><exiting>,%header.3.preheader,%header.3,%latch.2<latch>,%kcall.configok9,%latch.3
        Loop at depth 4 containing: %header.3<header><exiting>,%kcall.configok9,%latch.3<latch>

nestlevel: j
LP->LV 1694:   %indvar.017 = phi i32 [ 0, %kcall.end ], [ %indvar.next.019, %latch.013 ]
LP->L 1694: Loop at depth 1 containing: %header.010<header><exiting>,%header.111.preheader,%header.111,%latch.013<latch>,%header.2.preheader,%header.2,%latch.112,%header.3.preheader,%header.3,%latch.2,%kcall.configok9,%latch.3
    Loop at depth 2 containing: %header.111<header><exiting>,%header.2.preheader,%header.2,%latch.112<latch>,%header.3.preheader,%header.3,%latch.2,%kcall.configok9,%latch.3
        Loop at depth 3 containing: %header.2<header><exiting>,%header.3.preheader,%header.3,%latch.2<latch>,%kcall.configok9,%latch.3
            Loop at depth 4 containing: %header.3<header><exiting>,%kcall.configok9,%latch.3<latch>

nestlevel: i
LP->LV 1694:   %indvar.1 = phi i32 [ %indvar.next.1, %latch.1 ], [ 0, %header.1.preheader ]
LP->L 1694: Loop at depth 2 containing: %header.1<header><exiting>,%kcall.configok,%latch.1<latch>

nestlevel: j
LP->LV 1694:   %indvar.2 = phi i32 [ %indvar.next.2, %latch.2 ], [ 0, %header.2.preheader ]
LP->L 1694: Loop at depth 3 containing: %header.2<header><exiting>,%header.3.preheader,%header.3,%latch.2<latch>,%kcall.configok9,%latch.3
    Loop at depth 4 containing: %header.3<header><exiting>,%kcall.configok9,%latch.3<latch>

nestlevel: k
SUSAN: getting value name for: 
; Function Attrs: noinline uwtable
define internal void @_ZL6kerneliidPdS_(i32 %n, i32 %m, double %alpha, double* %B, double* %A) #7 !dbg !1248 {
entry:
  %agg.tmp = alloca %struct.dim3, align 4
  %agg.tmp1 = alloca %struct.dim3, align 4
  %agg.tmp.coerce = alloca { i64, i32 }, align 4
  %agg.tmp1.coerce = alloca { i64, i32 }, align 4
  %block = alloca %struct.dim3, align 4
  %grid = alloca %struct.dim3, align 4
  %agg.tmp5 = alloca %struct.dim3, align 4
  %agg.tmp6 = alloca %struct.dim3, align 4
  %agg.tmp5.coerce = alloca { i64, i32 }, align 4
  %agg.tmp6.coerce = alloca { i64, i32 }, align 4
  call void @llvm.dbg.value(metadata i32 %n, metadata !1251, metadata !DIExpression()), !dbg !1252
  call void @llvm.dbg.value(metadata i32 %m, metadata !1253, metadata !DIExpression()), !dbg !1252
  call void @llvm.dbg.value(metadata double %alpha, metadata !1254, metadata !DIExpression()), !dbg !1252
  call void @llvm.dbg.value(metadata double* %B, metadata !1255, metadata !DIExpression()), !dbg !1252
  call void @llvm.dbg.value(metadata double* %A, metadata !1256, metadata !DIExpression()), !dbg !1252
  call void @llvm.dbg.value(metadata i32 256, metadata !1257, metadata !DIExpression()), !dbg !1252
  %call = call i32 @_ZL10num_blocksii(i32 %n, i32 256), !dbg !1259
  %dim3gep.0 = getelementptr %struct.dim3, %struct.dim3* %agg.tmp, i32 0, i32 0
  store i32 %call, i32* %dim3gep.0
  %dim3gep.1 = getelementptr %struct.dim3, %struct.dim3* %agg.tmp, i32 0, i32 1
  store i32 1, i32* %dim3gep.1
  %dim3gep.2 = getelementptr %struct.dim3, %struct.dim3* %agg.tmp, i32 0, i32 2
  store i32 1, i32* %dim3gep.2
  %dim3gep.01 = getelementptr %struct.dim3, %struct.dim3* %agg.tmp1, i32 0, i32 0
  store i32 256, i32* %dim3gep.01
  %dim3gep.12 = getelementptr %struct.dim3, %struct.dim3* %agg.tmp1, i32 0, i32 1
  store i32 1, i32* %dim3gep.12
  %dim3gep.23 = getelementptr %struct.dim3, %struct.dim3* %agg.tmp1, i32 0, i32 2
  store i32 1, i32* %dim3gep.23
  %0 = bitcast { i64, i32 }* %agg.tmp.coerce to i8*, !dbg !1260
  %1 = bitcast %struct.dim3* %agg.tmp to i8*, !dbg !1260
  %2 = call i8* @memcpy(i8* %0, i8* %1, i64 12), !dbg !1260
  %3 = bitcast { i64, i32 }* %agg.tmp1.coerce to i8*, !dbg !1260
  %4 = bitcast %struct.dim3* %agg.tmp1 to i8*, !dbg !1260
  %5 = call i8* @memcpy(i8* %3, i8* %4, i64 12), !dbg !1260
  br label %header.0

header.0:                                         ; preds = %latch.0, %entry
  %indvar.0 = phi i32 [ 0, %entry ], [ %indvar.next.0, %latch.0 ]
  %exitcond24 = icmp ne i32 %indvar.0, %call
  br i1 %exitcond24, label %header.1.preheader, label %kcall.end, !tulip.doall.loop.grid !1149

header.1.preheader:                               ; preds = %header.0
  br label %header.1

header.1:                                         ; preds = %header.1.preheader, %latch.1
  %indvar.1 = phi i32 [ %indvar.next.1, %latch.1 ], [ 0, %header.1.preheader ]
  %exitcond23 = icmp ne i32 %indvar.1, 256
  br i1 %exitcond23, label %kcall.configok, label %latch.0, !tulip.doall.loop.block !1149

latch.1:                                          ; preds = %kcall.configok
  %indvar.next.1 = add nuw nsw i32 %indvar.1, 1
  br label %header.1

latch.0:                                          ; preds = %header.1
  %indvar.next.0 = add i32 %indvar.0, 1
  br label %header.0

kcall.configok:                                   ; preds = %header.1
  call void @_Z15kernel_contractiidPdS_.1(i32 %n, i32 %m, double %alpha, double* %B, double* %A, i32 %call, i32 1, i32 1, i32 256, i32 1, i32 1, i32 %indvar.0, i32 0, i32 0, i32 %indvar.1, i32 0, i32 0)
  br label %latch.1

kcall.end:                                        ; preds = %header.0
  call void @llvm.dbg.declare(metadata %struct.dim3* %block, metadata !1261, metadata !DIExpression()), !dbg !1286
  %dim3gep.04 = getelementptr %struct.dim3, %struct.dim3* %block, i32 0, i32 0
  store i32 8, i32* %dim3gep.04
  %dim3gep.15 = getelementptr %struct.dim3, %struct.dim3* %block, i32 0, i32 1
  store i32 32, i32* %dim3gep.15
  %dim3gep.26 = getelementptr %struct.dim3, %struct.dim3* %block, i32 0, i32 2
  store i32 1, i32* %dim3gep.26
  call void @llvm.dbg.declare(metadata %struct.dim3* %grid, metadata !1287, metadata !DIExpression()), !dbg !1288
  %x = getelementptr inbounds %struct.dim3, %struct.dim3* %block, i32 0, i32 0, !dbg !1289
  %6 = load i32, i32* %x, align 4, !dbg !1289
  %call3 = call i32 @_ZL10num_blocksii(i32 %m, i32 %6), !dbg !1290
  %y = getelementptr inbounds %struct.dim3, %struct.dim3* %block, i32 0, i32 1, !dbg !1291
  %7 = load i32, i32* %y, align 4, !dbg !1291
  %call4 = call i32 @_ZL10num_blocksii(i32 %n, i32 %7), !dbg !1292
  %dim3gep.07 = getelementptr %struct.dim3, %struct.dim3* %grid, i32 0, i32 0
  store i32 %call3, i32* %dim3gep.07
  %dim3gep.18 = getelementptr %struct.dim3, %struct.dim3* %grid, i32 0, i32 1
  store i32 %call4, i32* %dim3gep.18
  %dim3gep.29 = getelementptr %struct.dim3, %struct.dim3* %grid, i32 0, i32 2
  store i32 1, i32* %dim3gep.29
  %8 = bitcast %struct.dim3* %agg.tmp5 to i8*, !dbg !1293
  %9 = bitcast %struct.dim3* %grid to i8*, !dbg !1293
  %10 = call i8* @memcpy(i8* %8, i8* %9, i64 12), !dbg !1293
  %11 = bitcast %struct.dim3* %agg.tmp6 to i8*, !dbg !1294
  %12 = bitcast %struct.dim3* %block to i8*, !dbg !1294
  %13 = call i8* @memcpy(i8* %11, i8* %12, i64 12), !dbg !1294
  %14 = bitcast { i64, i32 }* %agg.tmp5.coerce to i8*, !dbg !1295
  %15 = bitcast %struct.dim3* %agg.tmp5 to i8*, !dbg !1295
  %16 = call i8* @memcpy(i8* %14, i8* %15, i64 12), !dbg !1295
  %17 = bitcast { i64, i32 }* %agg.tmp6.coerce to i8*, !dbg !1295
  %18 = bitcast %struct.dim3* %agg.tmp6 to i8*, !dbg !1295
  %19 = call i8* @memcpy(i8* %17, i8* %18, i64 12), !dbg !1295
  br label %header.010

header.010:                                       ; preds = %latch.013, %kcall.end
  %indvar.017 = phi i32 [ 0, %kcall.end ], [ %indvar.next.019, %latch.013 ]
  %exitcond22 = icmp ne i32 %indvar.017, %call3
  br i1 %exitcond22, label %header.111.preheader, label %kcall.end10, !tulip.doall.loop.grid.collapse !1149

header.111.preheader:                             ; preds = %header.010
  br label %header.111

header.111:                                       ; preds = %header.111.preheader, %latch.112
  %indvar.114 = phi i32 [ %indvar.next.116, %latch.112 ], [ 0, %header.111.preheader ]
  %exitcond21 = icmp ne i32 %indvar.114, %call4
  br i1 %exitcond21, label %header.2.preheader, label %latch.013

header.2.preheader:                               ; preds = %header.111
  br label %header.2

header.2:                                         ; preds = %header.2.preheader, %latch.2
  %indvar.2 = phi i32 [ %indvar.next.2, %latch.2 ], [ 0, %header.2.preheader ]
  %exitcond20 = icmp ne i32 %indvar.2, 8
  br i1 %exitcond20, label %header.3.preheader, label %latch.112, !tulip.doall.loop.block.collapse !1149

header.3.preheader:                               ; preds = %header.2
  br label %header.3

header.3:                                         ; preds = %header.3.preheader, %latch.3
  %indvar.3 = phi i32 [ %indvar.next.3, %latch.3 ], [ 0, %header.3.preheader ]
  %exitcond = icmp ne i32 %indvar.3, 32
  br i1 %exitcond, label %kcall.configok9, label %latch.2

latch.3:                                          ; preds = %kcall.configok9
  %indvar.next.3 = add nuw nsw i32 %indvar.3, 1
  br label %header.3

latch.2:                                          ; preds = %header.3
  %indvar.next.2 = add nuw nsw i32 %indvar.2, 1
  br label %header.2

latch.112:                                        ; preds = %header.2
  %indvar.next.116 = add i32 %indvar.114, 1
  br label %header.111

latch.013:                                        ; preds = %header.111
  %indvar.next.019 = add i32 %indvar.017, 1
  br label %header.010

kcall.configok9:                                  ; preds = %header.3
  call void @_Z12kernel_alphaiidPdS_.2(i32 %n, i32 %m, double %alpha, double* %B, double* %A, i32 %call3, i32 %call4, i32 1, i32 8, i32 32, i32 1, i32 %indvar.017, i32 %indvar.114, i32 0, i32 %indvar.2, i32 %indvar.3, i32 0)
  br label %latch.3

kcall.end10:                                      ; preds = %header.010
  ret void, !dbg !1296
}

SUSAN: found argument 6346: i32 %n
CBackend: varname: n
  call void @llvm.dbg.value(metadata i32 %n, metadata !1251, metadata !DIExpression()), !dbg !1252
SUSAN: found argument 6346: i32 %m
CBackend: varname: m
  call void @llvm.dbg.value(metadata i32 %m, metadata !1253, metadata !DIExpression()), !dbg !1252
SUSAN: found argument 6346: double %alpha
CBackend: varname: alpha
  call void @llvm.dbg.value(metadata double %alpha, metadata !1254, metadata !DIExpression()), !dbg !1252
SUSAN: found argument 6346: double* %B
CBackend: varname: B
  call void @llvm.dbg.value(metadata double* %B, metadata !1255, metadata !DIExpression()), !dbg !1252
SUSAN: found argument 6346: double* %A
CBackend: varname: A
  call void @llvm.dbg.value(metadata double* %A, metadata !1256, metadata !DIExpression()), !dbg !1252
SUSAN: found in IV2Name map   %indvar.0 = phi i32 [ 0, %entry ], [ %indvar.next.0, %latch.0 ]
name:  i
SUSAN: phi related name: i
SUSAN: found in IV2Name map   %indvar.1 = phi i32 [ %indvar.next.1, %latch.1 ], [ 0, %header.1.preheader ]
name:  j
SUSAN: phi related name: j
SUSAN: found in IV2Name map   %indvar.017 = phi i32 [ 0, %kcall.end ], [ %indvar.next.019, %latch.013 ]
name:  i
SUSAN: phi related name: i
SUSAN: found in IV2Name map   %indvar.114 = phi i32 [ %indvar.next.116, %latch.112 ], [ 0, %header.111.preheader ]
name:  j
SUSAN: phi related name: j
SUSAN: found in IV2Name map   %indvar.2 = phi i32 [ %indvar.next.2, %latch.2 ], [ 0, %header.2.preheader ]
name:  k
SUSAN: phi related name: k
SUSAN: found in IV2Name map   %indvar.3 = phi i32 [ %indvar.next.3, %latch.3 ], [ 0, %header.3.preheader ]
name:  l
SUSAN: phi related name: l
=========================SUSAN: IR NAMING BEFORE=====================
i32 %n -> n
i32 %m -> m
double %alpha -> alpha
double* %B -> B
double* %A -> A
  %block = alloca %struct.dim3, align 4 -> block
  %grid = alloca %struct.dim3, align 4 -> grid
  %indvar.next.1 = add nuw nsw i32 %indvar.1, 1 -> j
  %indvar.next.0 = add i32 %indvar.0, 1 -> i
  %indvar.next.3 = add nuw nsw i32 %indvar.3, 1 -> l
  %indvar.next.2 = add nuw nsw i32 %indvar.2, 1 -> k
  %indvar.next.116 = add i32 %indvar.114, 1 -> j
  %indvar.next.019 = add i32 %indvar.017, 1 -> i
SUSAN: inst:  %indvar.0 = phi i32 [ 0, %entry ], [ %indvar.next.0, %latch.0 ]
block:  %block = alloca %struct.dim3, align 4
grid:  %grid = alloca %struct.dim3, align 4
i:  %indvar.next.0 = add i32 %indvar.0, 1
j:  %indvar.next.1 = add nuw nsw i32 %indvar.1, 1
SUSAN: inst:  %agg.tmp = alloca %struct.dim3, align 4
SUSAN: inst:  %agg.tmp1 = alloca %struct.dim3, align 4
SUSAN: inst:  %agg.tmp.coerce = alloca { i64, i32 }, align 4
SUSAN: inst:  %agg.tmp1.coerce = alloca { i64, i32 }, align 4
SUSAN: inst:  %block = alloca %struct.dim3, align 4
block:  %block = alloca %struct.dim3, align 4
SUSAN: inst:  %grid = alloca %struct.dim3, align 4
block:  %block = alloca %struct.dim3, align 4
grid:  %grid = alloca %struct.dim3, align 4
SUSAN: inst:  %agg.tmp5 = alloca %struct.dim3, align 4
block:  %block = alloca %struct.dim3, align 4
grid:  %grid = alloca %struct.dim3, align 4
SUSAN: inst:  %agg.tmp6 = alloca %struct.dim3, align 4
block:  %block = alloca %struct.dim3, align 4
grid:  %grid = alloca %struct.dim3, align 4
SUSAN: inst:  %agg.tmp5.coerce = alloca { i64, i32 }, align 4
block:  %block = alloca %struct.dim3, align 4
grid:  %grid = alloca %struct.dim3, align 4
SUSAN: inst:  %agg.tmp6.coerce = alloca { i64, i32 }, align 4
block:  %block = alloca %struct.dim3, align 4
grid:  %grid = alloca %struct.dim3, align 4
SUSAN: inst:  call void @llvm.dbg.value(metadata i32 %n, metadata !1251, metadata !DIExpression()), !dbg !1252
block:  %block = alloca %struct.dim3, align 4
grid:  %grid = alloca %struct.dim3, align 4
SUSAN: inst:  call void @llvm.dbg.value(metadata i32 %m, metadata !1253, metadata !DIExpression()), !dbg !1252
block:  %block = alloca %struct.dim3, align 4
grid:  %grid = alloca %struct.dim3, align 4
SUSAN: inst:  call void @llvm.dbg.value(metadata double %alpha, metadata !1254, metadata !DIExpression()), !dbg !1252
block:  %block = alloca %struct.dim3, align 4
grid:  %grid = alloca %struct.dim3, align 4
SUSAN: inst:  call void @llvm.dbg.value(metadata double* %B, metadata !1255, metadata !DIExpression()), !dbg !1252
block:  %block = alloca %struct.dim3, align 4
grid:  %grid = alloca %struct.dim3, align 4
SUSAN: inst:  call void @llvm.dbg.value(metadata double* %A, metadata !1256, metadata !DIExpression()), !dbg !1252
block:  %block = alloca %struct.dim3, align 4
grid:  %grid = alloca %struct.dim3, align 4
SUSAN: inst:  call void @llvm.dbg.value(metadata i32 256, metadata !1257, metadata !DIExpression()), !dbg !1252
block:  %block = alloca %struct.dim3, align 4
grid:  %grid = alloca %struct.dim3, align 4
SUSAN: inst:  %call = call i32 @_ZL10num_blocksii(i32 %n, i32 256), !dbg !1118
block:  %block = alloca %struct.dim3, align 4
grid:  %grid = alloca %struct.dim3, align 4
SUSAN: inst:  %dim3gep.0 = getelementptr %struct.dim3, %struct.dim3* %agg.tmp, i32 0, i32 0
block:  %block = alloca %struct.dim3, align 4
grid:  %grid = alloca %struct.dim3, align 4
SUSAN: inst:  store i32 %call, i32* %dim3gep.0
block:  %block = alloca %struct.dim3, align 4
grid:  %grid = alloca %struct.dim3, align 4
SUSAN: inst:  %dim3gep.1 = getelementptr %struct.dim3, %struct.dim3* %agg.tmp, i32 0, i32 1
block:  %block = alloca %struct.dim3, align 4
grid:  %grid = alloca %struct.dim3, align 4
SUSAN: inst:  store i32 1, i32* %dim3gep.1
block:  %block = alloca %struct.dim3, align 4
grid:  %grid = alloca %struct.dim3, align 4
SUSAN: inst:  %dim3gep.2 = getelementptr %struct.dim3, %struct.dim3* %agg.tmp, i32 0, i32 2
block:  %block = alloca %struct.dim3, align 4
grid:  %grid = alloca %struct.dim3, align 4
SUSAN: inst:  store i32 1, i32* %dim3gep.2
block:  %block = alloca %struct.dim3, align 4
grid:  %grid = alloca %struct.dim3, align 4
SUSAN: inst:  %dim3gep.01 = getelementptr %struct.dim3, %struct.dim3* %agg.tmp1, i32 0, i32 0
block:  %block = alloca %struct.dim3, align 4
grid:  %grid = alloca %struct.dim3, align 4
SUSAN: inst:  store i32 256, i32* %dim3gep.01
block:  %block = alloca %struct.dim3, align 4
grid:  %grid = alloca %struct.dim3, align 4
SUSAN: inst:  %dim3gep.12 = getelementptr %struct.dim3, %struct.dim3* %agg.tmp1, i32 0, i32 1
block:  %block = alloca %struct.dim3, align 4
grid:  %grid = alloca %struct.dim3, align 4
SUSAN: inst:  store i32 1, i32* %dim3gep.12
block:  %block = alloca %struct.dim3, align 4
grid:  %grid = alloca %struct.dim3, align 4
SUSAN: inst:  %dim3gep.23 = getelementptr %struct.dim3, %struct.dim3* %agg.tmp1, i32 0, i32 2
block:  %block = alloca %struct.dim3, align 4
grid:  %grid = alloca %struct.dim3, align 4
SUSAN: inst:  store i32 1, i32* %dim3gep.23
block:  %block = alloca %struct.dim3, align 4
grid:  %grid = alloca %struct.dim3, align 4
SUSAN: inst:  %0 = bitcast { i64, i32 }* %agg.tmp.coerce to i8*, !dbg !1119
block:  %block = alloca %struct.dim3, align 4
grid:  %grid = alloca %struct.dim3, align 4
SUSAN: inst:  %1 = bitcast %struct.dim3* %agg.tmp to i8*, !dbg !1119
block:  %block = alloca %struct.dim3, align 4
grid:  %grid = alloca %struct.dim3, align 4
SUSAN: inst:  %3 = bitcast { i64, i32 }* %agg.tmp1.coerce to i8*, !dbg !1119
block:  %block = alloca %struct.dim3, align 4
grid:  %grid = alloca %struct.dim3, align 4
SUSAN: inst:  %4 = bitcast %struct.dim3* %agg.tmp1 to i8*, !dbg !1119
block:  %block = alloca %struct.dim3, align 4
grid:  %grid = alloca %struct.dim3, align 4
SUSAN: inst:  br label %header.0
block:  %block = alloca %struct.dim3, align 4
grid:  %grid = alloca %struct.dim3, align 4
SUSAN: inst:  %exitcond24 = icmp ne i32 %indvar.0, %call
block:  %block = alloca %struct.dim3, align 4
grid:  %grid = alloca %struct.dim3, align 4
i:  %indvar.next.0 = add i32 %indvar.0, 1
j:  %indvar.next.1 = add nuw nsw i32 %indvar.1, 1
SUSAN: inst:  br i1 %exitcond24, label %header.1.preheader, label %kcall.end, !tulip.doall.loop.grid !1120
block:  %block = alloca %struct.dim3, align 4
grid:  %grid = alloca %struct.dim3, align 4
i:  %indvar.next.0 = add i32 %indvar.0, 1
j:  %indvar.next.1 = add nuw nsw i32 %indvar.1, 1
SUSAN: inst:  br label %header.1
block:  %block = alloca %struct.dim3, align 4
grid:  %grid = alloca %struct.dim3, align 4
i:  %indvar.next.0 = add i32 %indvar.0, 1
j:  %indvar.next.1 = add nuw nsw i32 %indvar.1, 1
SUSAN: inst:  %indvar.1 = phi i32 [ %indvar.next.1, %latch.1 ], [ 0, %header.1.preheader ]
block:  %block = alloca %struct.dim3, align 4
grid:  %grid = alloca %struct.dim3, align 4
i:  %indvar.next.0 = add i32 %indvar.0, 1
j:  %indvar.next.1 = add nuw nsw i32 %indvar.1, 1
SUSAN: inst:  %exitcond23 = icmp ne i32 %indvar.1, 256
block:  %block = alloca %struct.dim3, align 4
grid:  %grid = alloca %struct.dim3, align 4
i:  %indvar.next.0 = add i32 %indvar.0, 1
j:  %indvar.next.1 = add nuw nsw i32 %indvar.1, 1
SUSAN: inst:  br i1 %exitcond23, label %kcall.configok, label %latch.0, !tulip.doall.loop.block !1120
block:  %block = alloca %struct.dim3, align 4
grid:  %grid = alloca %struct.dim3, align 4
i:  %indvar.next.0 = add i32 %indvar.0, 1
j:  %indvar.next.1 = add nuw nsw i32 %indvar.1, 1
SUSAN: inst:  %indvar.next.1 = add nuw nsw i32 %indvar.1, 1
block:  %block = alloca %struct.dim3, align 4
grid:  %grid = alloca %struct.dim3, align 4
i:  %indvar.next.0 = add i32 %indvar.0, 1
j:  %indvar.next.1 = add nuw nsw i32 %indvar.1, 1
SUSAN: inst:  br label %header.1
block:  %block = alloca %struct.dim3, align 4
grid:  %grid = alloca %struct.dim3, align 4
i:  %indvar.next.0 = add i32 %indvar.0, 1
j:  %indvar.next.1 = add nuw nsw i32 %indvar.1, 1
SUSAN: inst:  %indvar.next.0 = add i32 %indvar.0, 1
block:  %block = alloca %struct.dim3, align 4
grid:  %grid = alloca %struct.dim3, align 4
i:  %indvar.next.0 = add i32 %indvar.0, 1
j:  %indvar.next.1 = add nuw nsw i32 %indvar.1, 1
SUSAN: inst:  br label %header.0
block:  %block = alloca %struct.dim3, align 4
grid:  %grid = alloca %struct.dim3, align 4
i:  %indvar.next.0 = add i32 %indvar.0, 1
j:  %indvar.next.1 = add nuw nsw i32 %indvar.1, 1
SUSAN: inst:  call void @_Z15kernel_contractiidPdS_.1(i32 %n, i32 %m, double %alpha, double* %B, double* %A, i32 %call, i32 1, i32 1, i32 256, i32 1, i32 1, i32 %indvar.0, i32 0, i32 0, i32 %indvar.1, i32 0, i32 0)
block:  %block = alloca %struct.dim3, align 4
grid:  %grid = alloca %struct.dim3, align 4
i:  %indvar.next.0 = add i32 %indvar.0, 1
j:  %indvar.next.1 = add nuw nsw i32 %indvar.1, 1
SUSAN: inst:  br label %latch.1
block:  %block = alloca %struct.dim3, align 4
grid:  %grid = alloca %struct.dim3, align 4
i:  %indvar.next.0 = add i32 %indvar.0, 1
j:  %indvar.next.1 = add nuw nsw i32 %indvar.1, 1
SUSAN: inst:  call void @llvm.dbg.declare(metadata %struct.dim3* %block, metadata !1261, metadata !DIExpression()), !dbg !1286
block:  %block = alloca %struct.dim3, align 4
grid:  %grid = alloca %struct.dim3, align 4
i:  %indvar.next.0 = add i32 %indvar.0, 1
j:  %indvar.next.1 = add nuw nsw i32 %indvar.1, 1
SUSAN: inst:  %dim3gep.04 = getelementptr %struct.dim3, %struct.dim3* %block, i32 0, i32 0
block:  %block = alloca %struct.dim3, align 4
grid:  %grid = alloca %struct.dim3, align 4
i:  %indvar.next.0 = add i32 %indvar.0, 1
j:  %indvar.next.1 = add nuw nsw i32 %indvar.1, 1
SUSAN: inst:  store i32 8, i32* %dim3gep.04
block:  %block = alloca %struct.dim3, align 4
grid:  %grid = alloca %struct.dim3, align 4
i:  %indvar.next.0 = add i32 %indvar.0, 1
j:  %indvar.next.1 = add nuw nsw i32 %indvar.1, 1
SUSAN: inst:  %dim3gep.15 = getelementptr %struct.dim3, %struct.dim3* %block, i32 0, i32 1
block:  %block = alloca %struct.dim3, align 4
grid:  %grid = alloca %struct.dim3, align 4
i:  %indvar.next.0 = add i32 %indvar.0, 1
j:  %indvar.next.1 = add nuw nsw i32 %indvar.1, 1
SUSAN: inst:  store i32 32, i32* %dim3gep.15
block:  %block = alloca %struct.dim3, align 4
grid:  %grid = alloca %struct.dim3, align 4
i:  %indvar.next.0 = add i32 %indvar.0, 1
j:  %indvar.next.1 = add nuw nsw i32 %indvar.1, 1
SUSAN: inst:  %dim3gep.26 = getelementptr %struct.dim3, %struct.dim3* %block, i32 0, i32 2
block:  %block = alloca %struct.dim3, align 4
grid:  %grid = alloca %struct.dim3, align 4
i:  %indvar.next.0 = add i32 %indvar.0, 1
j:  %indvar.next.1 = add nuw nsw i32 %indvar.1, 1
SUSAN: inst:  store i32 1, i32* %dim3gep.26
block:  %block = alloca %struct.dim3, align 4
grid:  %grid = alloca %struct.dim3, align 4
i:  %indvar.next.0 = add i32 %indvar.0, 1
j:  %indvar.next.1 = add nuw nsw i32 %indvar.1, 1
SUSAN: inst:  call void @llvm.dbg.declare(metadata %struct.dim3* %grid, metadata !1287, metadata !DIExpression()), !dbg !1288
block:  %block = alloca %struct.dim3, align 4
grid:  %grid = alloca %struct.dim3, align 4
i:  %indvar.next.0 = add i32 %indvar.0, 1
j:  %indvar.next.1 = add nuw nsw i32 %indvar.1, 1
SUSAN: inst:  %x = getelementptr inbounds %struct.dim3, %struct.dim3* %block, i32 0, i32 0, !dbg !1149
block:  %block = alloca %struct.dim3, align 4
grid:  %grid = alloca %struct.dim3, align 4
i:  %indvar.next.0 = add i32 %indvar.0, 1
j:  %indvar.next.1 = add nuw nsw i32 %indvar.1, 1
SUSAN: inst:  %6 = load i32, i32* %x, align 4, !dbg !1149
block:  %block = alloca %struct.dim3, align 4
grid:  %grid = alloca %struct.dim3, align 4
i:  %indvar.next.0 = add i32 %indvar.0, 1
j:  %indvar.next.1 = add nuw nsw i32 %indvar.1, 1
SUSAN: inst:  %call3 = call i32 @_ZL10num_blocksii(i32 %m, i32 %6), !dbg !1150
block:  %block = alloca %struct.dim3, align 4
grid:  %grid = alloca %struct.dim3, align 4
i:  %indvar.next.0 = add i32 %indvar.0, 1
j:  %indvar.next.1 = add nuw nsw i32 %indvar.1, 1
SUSAN: inst:  %y = getelementptr inbounds %struct.dim3, %struct.dim3* %block, i32 0, i32 1, !dbg !1151
block:  %block = alloca %struct.dim3, align 4
grid:  %grid = alloca %struct.dim3, align 4
i:  %indvar.next.0 = add i32 %indvar.0, 1
j:  %indvar.next.1 = add nuw nsw i32 %indvar.1, 1
SUSAN: inst:  %7 = load i32, i32* %y, align 4, !dbg !1151
block:  %block = alloca %struct.dim3, align 4
grid:  %grid = alloca %struct.dim3, align 4
i:  %indvar.next.0 = add i32 %indvar.0, 1
j:  %indvar.next.1 = add nuw nsw i32 %indvar.1, 1
SUSAN: inst:  %call4 = call i32 @_ZL10num_blocksii(i32 %n, i32 %7), !dbg !1152
block:  %block = alloca %struct.dim3, align 4
grid:  %grid = alloca %struct.dim3, align 4
i:  %indvar.next.0 = add i32 %indvar.0, 1
j:  %indvar.next.1 = add nuw nsw i32 %indvar.1, 1
SUSAN: inst:  %dim3gep.07 = getelementptr %struct.dim3, %struct.dim3* %grid, i32 0, i32 0
block:  %block = alloca %struct.dim3, align 4
grid:  %grid = alloca %struct.dim3, align 4
i:  %indvar.next.0 = add i32 %indvar.0, 1
j:  %indvar.next.1 = add nuw nsw i32 %indvar.1, 1
SUSAN: inst:  store i32 %call3, i32* %dim3gep.07
block:  %block = alloca %struct.dim3, align 4
grid:  %grid = alloca %struct.dim3, align 4
i:  %indvar.next.0 = add i32 %indvar.0, 1
j:  %indvar.next.1 = add nuw nsw i32 %indvar.1, 1
SUSAN: inst:  %dim3gep.18 = getelementptr %struct.dim3, %struct.dim3* %grid, i32 0, i32 1
block:  %block = alloca %struct.dim3, align 4
grid:  %grid = alloca %struct.dim3, align 4
i:  %indvar.next.0 = add i32 %indvar.0, 1
j:  %indvar.next.1 = add nuw nsw i32 %indvar.1, 1
SUSAN: inst:  store i32 %call4, i32* %dim3gep.18
block:  %block = alloca %struct.dim3, align 4
grid:  %grid = alloca %struct.dim3, align 4
i:  %indvar.next.0 = add i32 %indvar.0, 1
j:  %indvar.next.1 = add nuw nsw i32 %indvar.1, 1
SUSAN: inst:  %dim3gep.29 = getelementptr %struct.dim3, %struct.dim3* %grid, i32 0, i32 2
block:  %block = alloca %struct.dim3, align 4
grid:  %grid = alloca %struct.dim3, align 4
i:  %indvar.next.0 = add i32 %indvar.0, 1
j:  %indvar.next.1 = add nuw nsw i32 %indvar.1, 1
SUSAN: inst:  store i32 1, i32* %dim3gep.29
block:  %block = alloca %struct.dim3, align 4
grid:  %grid = alloca %struct.dim3, align 4
i:  %indvar.next.0 = add i32 %indvar.0, 1
j:  %indvar.next.1 = add nuw nsw i32 %indvar.1, 1
SUSAN: inst:  %8 = bitcast %struct.dim3* %agg.tmp5 to i8*, !dbg !1153
block:  %block = alloca %struct.dim3, align 4
grid:  %grid = alloca %struct.dim3, align 4
i:  %indvar.next.0 = add i32 %indvar.0, 1
j:  %indvar.next.1 = add nuw nsw i32 %indvar.1, 1
SUSAN: inst:  %9 = bitcast %struct.dim3* %grid to i8*, !dbg !1153
block:  %block = alloca %struct.dim3, align 4
grid:  %grid = alloca %struct.dim3, align 4
i:  %indvar.next.0 = add i32 %indvar.0, 1
j:  %indvar.next.1 = add nuw nsw i32 %indvar.1, 1
SUSAN: inst:  %11 = bitcast %struct.dim3* %agg.tmp6 to i8*, !dbg !1154
block:  %block = alloca %struct.dim3, align 4
grid:  %grid = alloca %struct.dim3, align 4
i:  %indvar.next.0 = add i32 %indvar.0, 1
j:  %indvar.next.1 = add nuw nsw i32 %indvar.1, 1
SUSAN: inst:  %12 = bitcast %struct.dim3* %block to i8*, !dbg !1154
block:  %block = alloca %struct.dim3, align 4
grid:  %grid = alloca %struct.dim3, align 4
i:  %indvar.next.0 = add i32 %indvar.0, 1
j:  %indvar.next.1 = add nuw nsw i32 %indvar.1, 1
SUSAN: inst:  %14 = bitcast { i64, i32 }* %agg.tmp5.coerce to i8*, !dbg !1155
block:  %block = alloca %struct.dim3, align 4
grid:  %grid = alloca %struct.dim3, align 4
i:  %indvar.next.0 = add i32 %indvar.0, 1
j:  %indvar.next.1 = add nuw nsw i32 %indvar.1, 1
SUSAN: inst:  %15 = bitcast %struct.dim3* %agg.tmp5 to i8*, !dbg !1155
block:  %block = alloca %struct.dim3, align 4
grid:  %grid = alloca %struct.dim3, align 4
i:  %indvar.next.0 = add i32 %indvar.0, 1
j:  %indvar.next.1 = add nuw nsw i32 %indvar.1, 1
SUSAN: inst:  %17 = bitcast { i64, i32 }* %agg.tmp6.coerce to i8*, !dbg !1155
block:  %block = alloca %struct.dim3, align 4
grid:  %grid = alloca %struct.dim3, align 4
i:  %indvar.next.0 = add i32 %indvar.0, 1
j:  %indvar.next.1 = add nuw nsw i32 %indvar.1, 1
SUSAN: inst:  %18 = bitcast %struct.dim3* %agg.tmp6 to i8*, !dbg !1155
block:  %block = alloca %struct.dim3, align 4
grid:  %grid = alloca %struct.dim3, align 4
i:  %indvar.next.0 = add i32 %indvar.0, 1
j:  %indvar.next.1 = add nuw nsw i32 %indvar.1, 1
SUSAN: inst:  br label %header.010
block:  %block = alloca %struct.dim3, align 4
grid:  %grid = alloca %struct.dim3, align 4
i:  %indvar.next.0 = add i32 %indvar.0, 1
j:  %indvar.next.1 = add nuw nsw i32 %indvar.1, 1
SUSAN: inst:  %indvar.017 = phi i32 [ 0, %kcall.end ], [ %indvar.next.019, %latch.013 ]
block:  %block = alloca %struct.dim3, align 4
grid:  %grid = alloca %struct.dim3, align 4
k:  %indvar.next.2 = add nuw nsw i32 %indvar.2, 1
l:  %indvar.next.3 = add nuw nsw i32 %indvar.3, 1
SUSAN: inst:  %exitcond22 = icmp ne i32 %indvar.017, %call3
block:  %block = alloca %struct.dim3, align 4
grid:  %grid = alloca %struct.dim3, align 4
k:  %indvar.next.2 = add nuw nsw i32 %indvar.2, 1
l:  %indvar.next.3 = add nuw nsw i32 %indvar.3, 1
SUSAN: inst:  br i1 %exitcond22, label %header.111.preheader, label %kcall.end10, !tulip.doall.loop.grid.collapse !1120
block:  %block = alloca %struct.dim3, align 4
grid:  %grid = alloca %struct.dim3, align 4
k:  %indvar.next.2 = add nuw nsw i32 %indvar.2, 1
l:  %indvar.next.3 = add nuw nsw i32 %indvar.3, 1
SUSAN: inst:  br label %header.111
block:  %block = alloca %struct.dim3, align 4
grid:  %grid = alloca %struct.dim3, align 4
k:  %indvar.next.2 = add nuw nsw i32 %indvar.2, 1
l:  %indvar.next.3 = add nuw nsw i32 %indvar.3, 1
SUSAN: inst:  %indvar.114 = phi i32 [ %indvar.next.116, %latch.112 ], [ 0, %header.111.preheader ]
block:  %block = alloca %struct.dim3, align 4
grid:  %grid = alloca %struct.dim3, align 4
j:  %indvar.next.116 = add i32 %indvar.114, 1
k:  %indvar.next.2 = add nuw nsw i32 %indvar.2, 1
l:  %indvar.next.3 = add nuw nsw i32 %indvar.3, 1
SUSAN: inst:  %exitcond21 = icmp ne i32 %indvar.114, %call4
block:  %block = alloca %struct.dim3, align 4
grid:  %grid = alloca %struct.dim3, align 4
j:  %indvar.next.116 = add i32 %indvar.114, 1
k:  %indvar.next.2 = add nuw nsw i32 %indvar.2, 1
l:  %indvar.next.3 = add nuw nsw i32 %indvar.3, 1
SUSAN: inst:  br i1 %exitcond21, label %header.2.preheader, label %latch.013
block:  %block = alloca %struct.dim3, align 4
grid:  %grid = alloca %struct.dim3, align 4
j:  %indvar.next.116 = add i32 %indvar.114, 1
k:  %indvar.next.2 = add nuw nsw i32 %indvar.2, 1
l:  %indvar.next.3 = add nuw nsw i32 %indvar.3, 1
SUSAN: inst:  br label %header.2
block:  %block = alloca %struct.dim3, align 4
grid:  %grid = alloca %struct.dim3, align 4
j:  %indvar.next.116 = add i32 %indvar.114, 1
k:  %indvar.next.2 = add nuw nsw i32 %indvar.2, 1
l:  %indvar.next.3 = add nuw nsw i32 %indvar.3, 1
SUSAN: inst:  %indvar.2 = phi i32 [ %indvar.next.2, %latch.2 ], [ 0, %header.2.preheader ]
block:  %block = alloca %struct.dim3, align 4
grid:  %grid = alloca %struct.dim3, align 4
j:  %indvar.next.116 = add i32 %indvar.114, 1
k:  %indvar.next.2 = add nuw nsw i32 %indvar.2, 1
l:  %indvar.next.3 = add nuw nsw i32 %indvar.3, 1
SUSAN: inst:  %exitcond20 = icmp ne i32 %indvar.2, 8
block:  %block = alloca %struct.dim3, align 4
grid:  %grid = alloca %struct.dim3, align 4
j:  %indvar.next.116 = add i32 %indvar.114, 1
k:  %indvar.next.2 = add nuw nsw i32 %indvar.2, 1
l:  %indvar.next.3 = add nuw nsw i32 %indvar.3, 1
SUSAN: inst:  br i1 %exitcond20, label %header.3.preheader, label %latch.112, !tulip.doall.loop.block.collapse !1120
block:  %block = alloca %struct.dim3, align 4
grid:  %grid = alloca %struct.dim3, align 4
j:  %indvar.next.116 = add i32 %indvar.114, 1
k:  %indvar.next.2 = add nuw nsw i32 %indvar.2, 1
l:  %indvar.next.3 = add nuw nsw i32 %indvar.3, 1
SUSAN: inst:  br label %header.3
block:  %block = alloca %struct.dim3, align 4
grid:  %grid = alloca %struct.dim3, align 4
j:  %indvar.next.116 = add i32 %indvar.114, 1
k:  %indvar.next.2 = add nuw nsw i32 %indvar.2, 1
l:  %indvar.next.3 = add nuw nsw i32 %indvar.3, 1
SUSAN: inst:  %indvar.3 = phi i32 [ %indvar.next.3, %latch.3 ], [ 0, %header.3.preheader ]
block:  %block = alloca %struct.dim3, align 4
grid:  %grid = alloca %struct.dim3, align 4
j:  %indvar.next.116 = add i32 %indvar.114, 1
k:  %indvar.next.2 = add nuw nsw i32 %indvar.2, 1
l:  %indvar.next.3 = add nuw nsw i32 %indvar.3, 1
SUSAN: inst:  %exitcond = icmp ne i32 %indvar.3, 32
block:  %block = alloca %struct.dim3, align 4
grid:  %grid = alloca %struct.dim3, align 4
j:  %indvar.next.116 = add i32 %indvar.114, 1
k:  %indvar.next.2 = add nuw nsw i32 %indvar.2, 1
l:  %indvar.next.3 = add nuw nsw i32 %indvar.3, 1
SUSAN: inst:  br i1 %exitcond, label %kcall.configok9, label %latch.2
block:  %block = alloca %struct.dim3, align 4
grid:  %grid = alloca %struct.dim3, align 4
j:  %indvar.next.116 = add i32 %indvar.114, 1
k:  %indvar.next.2 = add nuw nsw i32 %indvar.2, 1
l:  %indvar.next.3 = add nuw nsw i32 %indvar.3, 1
SUSAN: inst:  %indvar.next.3 = add nuw nsw i32 %indvar.3, 1
block:  %block = alloca %struct.dim3, align 4
grid:  %grid = alloca %struct.dim3, align 4
j:  %indvar.next.116 = add i32 %indvar.114, 1
k:  %indvar.next.2 = add nuw nsw i32 %indvar.2, 1
l:  %indvar.next.3 = add nuw nsw i32 %indvar.3, 1
SUSAN: inst:  br label %header.3
block:  %block = alloca %struct.dim3, align 4
grid:  %grid = alloca %struct.dim3, align 4
j:  %indvar.next.116 = add i32 %indvar.114, 1
k:  %indvar.next.2 = add nuw nsw i32 %indvar.2, 1
l:  %indvar.next.3 = add nuw nsw i32 %indvar.3, 1
SUSAN: inst:  %indvar.next.2 = add nuw nsw i32 %indvar.2, 1
block:  %block = alloca %struct.dim3, align 4
grid:  %grid = alloca %struct.dim3, align 4
j:  %indvar.next.116 = add i32 %indvar.114, 1
k:  %indvar.next.2 = add nuw nsw i32 %indvar.2, 1
l:  %indvar.next.3 = add nuw nsw i32 %indvar.3, 1
SUSAN: inst:  br label %header.2
block:  %block = alloca %struct.dim3, align 4
grid:  %grid = alloca %struct.dim3, align 4
j:  %indvar.next.116 = add i32 %indvar.114, 1
k:  %indvar.next.2 = add nuw nsw i32 %indvar.2, 1
l:  %indvar.next.3 = add nuw nsw i32 %indvar.3, 1
SUSAN: inst:  %indvar.next.116 = add i32 %indvar.114, 1
block:  %block = alloca %struct.dim3, align 4
grid:  %grid = alloca %struct.dim3, align 4
j:  %indvar.next.116 = add i32 %indvar.114, 1
k:  %indvar.next.2 = add nuw nsw i32 %indvar.2, 1
l:  %indvar.next.3 = add nuw nsw i32 %indvar.3, 1
SUSAN: inst:  br label %header.111
block:  %block = alloca %struct.dim3, align 4
grid:  %grid = alloca %struct.dim3, align 4
j:  %indvar.next.116 = add i32 %indvar.114, 1
k:  %indvar.next.2 = add nuw nsw i32 %indvar.2, 1
l:  %indvar.next.3 = add nuw nsw i32 %indvar.3, 1
SUSAN: inst:  %indvar.next.019 = add i32 %indvar.017, 1
block:  %block = alloca %struct.dim3, align 4
grid:  %grid = alloca %struct.dim3, align 4
i:  %indvar.next.019 = add i32 %indvar.017, 1
j:  %indvar.next.116 = add i32 %indvar.114, 1
k:  %indvar.next.2 = add nuw nsw i32 %indvar.2, 1
l:  %indvar.next.3 = add nuw nsw i32 %indvar.3, 1
SUSAN: inst:  br label %header.010
block:  %block = alloca %struct.dim3, align 4
grid:  %grid = alloca %struct.dim3, align 4
i:  %indvar.next.019 = add i32 %indvar.017, 1
j:  %indvar.next.116 = add i32 %indvar.114, 1
k:  %indvar.next.2 = add nuw nsw i32 %indvar.2, 1
l:  %indvar.next.3 = add nuw nsw i32 %indvar.3, 1
SUSAN: inst:  call void @_Z12kernel_alphaiidPdS_.2(i32 %n, i32 %m, double %alpha, double* %B, double* %A, i32 %call3, i32 %call4, i32 1, i32 8, i32 32, i32 1, i32 %indvar.017, i32 %indvar.114, i32 0, i32 %indvar.2, i32 %indvar.3, i32 0)
block:  %block = alloca %struct.dim3, align 4
grid:  %grid = alloca %struct.dim3, align 4
j:  %indvar.next.116 = add i32 %indvar.114, 1
k:  %indvar.next.2 = add nuw nsw i32 %indvar.2, 1
l:  %indvar.next.3 = add nuw nsw i32 %indvar.3, 1
SUSAN: inst:  br label %latch.3
block:  %block = alloca %struct.dim3, align 4
grid:  %grid = alloca %struct.dim3, align 4
j:  %indvar.next.116 = add i32 %indvar.114, 1
k:  %indvar.next.2 = add nuw nsw i32 %indvar.2, 1
l:  %indvar.next.3 = add nuw nsw i32 %indvar.3, 1
SUSAN: inst:  ret void, !dbg !1156
block:  %block = alloca %struct.dim3, align 4
grid:  %grid = alloca %struct.dim3, align 4
k:  %indvar.next.2 = add nuw nsw i32 %indvar.2, 1
l:  %indvar.next.3 = add nuw nsw i32 %indvar.3, 1
SUSAN: inst:  %10 = call i8* @memcpy(i8* %8, i8* %9, i64 12), !dbg !1153
block:  %block = alloca %struct.dim3, align 4
grid:  %grid = alloca %struct.dim3, align 4
i:  %indvar.next.0 = add i32 %indvar.0, 1
j:  %indvar.next.1 = add nuw nsw i32 %indvar.1, 1
SUSAN: inst:  %13 = call i8* @memcpy(i8* %11, i8* %12, i64 12), !dbg !1154
block:  %block = alloca %struct.dim3, align 4
grid:  %grid = alloca %struct.dim3, align 4
i:  %indvar.next.0 = add i32 %indvar.0, 1
j:  %indvar.next.1 = add nuw nsw i32 %indvar.1, 1
SUSAN: inst:  %16 = call i8* @memcpy(i8* %14, i8* %15, i64 12), !dbg !1155
block:  %block = alloca %struct.dim3, align 4
grid:  %grid = alloca %struct.dim3, align 4
i:  %indvar.next.0 = add i32 %indvar.0, 1
j:  %indvar.next.1 = add nuw nsw i32 %indvar.1, 1
SUSAN: inst:  %5 = call i8* @memcpy(i8* %3, i8* %4, i64 12), !dbg !1119
block:  %block = alloca %struct.dim3, align 4
grid:  %grid = alloca %struct.dim3, align 4
SUSAN: inst:  %2 = call i8* @memcpy(i8* %0, i8* %1, i64 12), !dbg !1119
block:  %block = alloca %struct.dim3, align 4
grid:  %grid = alloca %struct.dim3, align 4
SUSAN: inst:  %19 = call i8* @memcpy(i8* %17, i8* %18, i64 12), !dbg !1155
block:  %block = alloca %struct.dim3, align 4
grid:  %grid = alloca %struct.dim3, align 4
i:  %indvar.next.0 = add i32 %indvar.0, 1
j:  %indvar.next.1 = add nuw nsw i32 %indvar.1, 1
=========================SUSAN: IR NAMING=====================
i32 %n -> n
i32 %m -> m
double %alpha -> alpha
double* %B -> B
double* %A -> A
  %block = alloca %struct.dim3, align 4 -> block
  %grid = alloca %struct.dim3, align 4 -> grid
  %indvar.next.1 = add nuw nsw i32 %indvar.1, 1 -> j
  %indvar.next.0 = add i32 %indvar.0, 1 -> i
  %indvar.next.3 = add nuw nsw i32 %indvar.3, 1 -> l
  %indvar.next.2 = add nuw nsw i32 %indvar.2, 1 -> k
  %indvar.next.116 = add i32 %indvar.114, 1 -> j
  %indvar.next.019 = add i32 %indvar.017, 1 -> i
SUSAN: getting value name for: i32 %n
inst from IRNaming: i32 %n
original name : n
returning name: n
SUSAN: getting value name for: i32 %m
inst from IRNaming: i32 %m
original name : m
returning name: m
SUSAN: getting value name for: double %alpha
inst from IRNaming: double %alpha
original name : alpha
returning name: alpha
SUSAN: getting value name for: double* %B
inst from IRNaming: double* %B
original name : B
returning name: B
SUSAN: getting value name for: double* %A
inst from IRNaming: double* %A
original name : A
returning name: A
SUSAN: getting value name for:   %agg.tmp = alloca %struct.dim3, align 4
SUSAN: declaring 3252:   %agg.tmp = alloca %struct.dim3, align 4
SUSAN: getting value name for:   %agg.tmp = alloca %struct.dim3, align 4
SUSAN: declaring varName 5264: agg_2e_tmp
SUSAN: printing type at 5885: %struct.dim3 = type { i32, i32, i32 }
SUSAN: getting value name for:   %agg.tmp1 = alloca %struct.dim3, align 4
SUSAN: declaring 3252:   %agg.tmp1 = alloca %struct.dim3, align 4
SUSAN: getting value name for:   %agg.tmp1 = alloca %struct.dim3, align 4
SUSAN: declaring varName 5264: agg_2e_tmp1
SUSAN: printing type at 5885: %struct.dim3 = type { i32, i32, i32 }
SUSAN: getting value name for:   %agg.tmp.coerce = alloca { i64, i32 }, align 4
SUSAN: declaring 3252:   %agg.tmp.coerce = alloca { i64, i32 }, align 4
SUSAN: getting value name for:   %agg.tmp.coerce = alloca { i64, i32 }, align 4
SUSAN: declaring varName 5264: agg_2e_tmp_2e_coerce
SUSAN: printing type at 5885: { i64, i32 }
SUSAN: getting value name for:   %agg.tmp1.coerce = alloca { i64, i32 }, align 4
SUSAN: declaring 3252:   %agg.tmp1.coerce = alloca { i64, i32 }, align 4
SUSAN: getting value name for:   %agg.tmp1.coerce = alloca { i64, i32 }, align 4
SUSAN: declaring varName 5264: agg_2e_tmp1_2e_coerce
SUSAN: printing type at 5885: { i64, i32 }
SUSAN: getting value name for:   %block = alloca %struct.dim3, align 4
inst from IRNaming:   %block = alloca %struct.dim3, align 4
original name : block
returning name: block
SUSAN: declaring 3252:   %block = alloca %struct.dim3, align 4
SUSAN: getting value name for:   %block = alloca %struct.dim3, align 4
inst from IRNaming:   %block = alloca %struct.dim3, align 4
original name : block
returning name: block
SUSAN: declaring with reconstructed name 3286: block
SUSAN: declaring varName 5264: block
SUSAN: printing type at 5885: %struct.dim3 = type { i32, i32, i32 }
SUSAN: getting value name for:   %grid = alloca %struct.dim3, align 4
inst from IRNaming:   %grid = alloca %struct.dim3, align 4
original name : grid
returning name: grid
SUSAN: declaring 3252:   %grid = alloca %struct.dim3, align 4
SUSAN: getting value name for:   %grid = alloca %struct.dim3, align 4
inst from IRNaming:   %grid = alloca %struct.dim3, align 4
original name : grid
returning name: grid
SUSAN: declaring with reconstructed name 3286: grid
SUSAN: declaring varName 5264: grid
SUSAN: printing type at 5885: %struct.dim3 = type { i32, i32, i32 }
SUSAN: getting value name for:   %agg.tmp5 = alloca %struct.dim3, align 4
SUSAN: declaring 3252:   %agg.tmp5 = alloca %struct.dim3, align 4
SUSAN: getting value name for:   %agg.tmp5 = alloca %struct.dim3, align 4
SUSAN: declaring varName 5264: agg_2e_tmp5
SUSAN: printing type at 5885: %struct.dim3 = type { i32, i32, i32 }
SUSAN: getting value name for:   %agg.tmp6 = alloca %struct.dim3, align 4
SUSAN: declaring 3252:   %agg.tmp6 = alloca %struct.dim3, align 4
SUSAN: getting value name for:   %agg.tmp6 = alloca %struct.dim3, align 4
SUSAN: declaring varName 5264: agg_2e_tmp6
SUSAN: printing type at 5885: %struct.dim3 = type { i32, i32, i32 }
SUSAN: getting value name for:   %agg.tmp5.coerce = alloca { i64, i32 }, align 4
SUSAN: declaring 3252:   %agg.tmp5.coerce = alloca { i64, i32 }, align 4
SUSAN: getting value name for:   %agg.tmp5.coerce = alloca { i64, i32 }, align 4
SUSAN: declaring varName 5264: agg_2e_tmp5_2e_coerce
SUSAN: printing type at 5885: { i64, i32 }
SUSAN: getting value name for:   %agg.tmp6.coerce = alloca { i64, i32 }, align 4
SUSAN: declaring 3252:   %agg.tmp6.coerce = alloca { i64, i32 }, align 4
SUSAN: getting value name for:   %agg.tmp6.coerce = alloca { i64, i32 }, align 4
SUSAN: declaring varName 5264: agg_2e_tmp6_2e_coerce
SUSAN: printing type at 5885: { i64, i32 }
SUSAN: getting value name for:   %call = call i32 @_ZL10num_blocksii(i32 %n, i32 256), !dbg !1118
SUSAN: declaring varName 5298: call
SUSAN: declared locals:
agg_2e_tmp
agg_2e_tmp1
agg_2e_tmp1_2e_coerce
agg_2e_tmp5
agg_2e_tmp5_2e_coerce
agg_2e_tmp6
agg_2e_tmp6_2e_coerce
agg_2e_tmp_2e_coerce
block
grid
SUSAN: declaring 3252:   %call = call i32 @_ZL10num_blocksii(i32 %n, i32 256), !dbg !1118
SUSAN: getting value name for:   %call = call i32 @_ZL10num_blocksii(i32 %n, i32 256), !dbg !1118
SUSAN: inst at 5950:   %call = call i32 @_ZL10num_blocksii(i32 %n, i32 256), !dbg !1118
SUSAN: declaring   %call = call i32 @_ZL10num_blocksii(i32 %n, i32 256), !dbg !1118
SUSAN: printing type at 5937: i32
SUSAN: getting value name for:   %2 = call i8* @memcpy(i8* %0, i8* %1, i64 12), !dbg !1119
SUSAN: declaring varName 5298: _1
SUSAN: declared locals:
agg_2e_tmp
agg_2e_tmp1
agg_2e_tmp1_2e_coerce
agg_2e_tmp5
agg_2e_tmp5_2e_coerce
agg_2e_tmp6
agg_2e_tmp6_2e_coerce
agg_2e_tmp_2e_coerce
block
call
grid
SUSAN: declaring 3252:   %2 = call i8* @memcpy(i8* %0, i8* %1, i64 12), !dbg !1119
SUSAN: getting value name for:   %2 = call i8* @memcpy(i8* %0, i8* %1, i64 12), !dbg !1119
SUSAN: inst at 5950:   %2 = call i8* @memcpy(i8* %0, i8* %1, i64 12), !dbg !1119
SUSAN: declaring   %2 = call i8* @memcpy(i8* %0, i8* %1, i64 12), !dbg !1119
SUSAN: printing type at 5937: i8*
SUSAN: getting value name for:   %5 = call i8* @memcpy(i8* %3, i8* %4, i64 12), !dbg !1119
SUSAN: declaring varName 5298: _2
SUSAN: declared locals:
_1
agg_2e_tmp
agg_2e_tmp1
agg_2e_tmp1_2e_coerce
agg_2e_tmp5
agg_2e_tmp5_2e_coerce
agg_2e_tmp6
agg_2e_tmp6_2e_coerce
agg_2e_tmp_2e_coerce
block
call
grid
SUSAN: declaring 3252:   %5 = call i8* @memcpy(i8* %3, i8* %4, i64 12), !dbg !1119
SUSAN: getting value name for:   %5 = call i8* @memcpy(i8* %3, i8* %4, i64 12), !dbg !1119
SUSAN: inst at 5950:   %5 = call i8* @memcpy(i8* %3, i8* %4, i64 12), !dbg !1119
SUSAN: declaring   %5 = call i8* @memcpy(i8* %3, i8* %4, i64 12), !dbg !1119
SUSAN: printing type at 5937: i8*
SUSAN: found in IV2Name map   %indvar.0 = phi i32 [ 0, %entry ], [ %indvar.next.0, %latch.0 ]
name:  i
SUSAN: declaring varName 5298: i
SUSAN: declared locals:
_1
_2
agg_2e_tmp
agg_2e_tmp1
agg_2e_tmp1_2e_coerce
agg_2e_tmp5
agg_2e_tmp5_2e_coerce
agg_2e_tmp6
agg_2e_tmp6_2e_coerce
agg_2e_tmp_2e_coerce
block
call
grid
SUSAN: declaring 3252:   %indvar.0 = phi i32 [ 0, %entry ], [ %indvar.next.0, %latch.0 ]
SUSAN: found in IV2Name map   %indvar.0 = phi i32 [ 0, %entry ], [ %indvar.next.0, %latch.0 ]
name:  i
SUSAN: reconstructed variable counter increment for iv:i
SUSAN: inst at 5950:   %indvar.0 = phi i32 [ 0, %entry ], [ %indvar.next.0, %latch.0 ]
SUSAN: declaring   %indvar.0 = phi i32 [ 0, %entry ], [ %indvar.next.0, %latch.0 ]
SUSAN: printing type at 5937: i32
SUSAN: found in IV2Name map   %indvar.1 = phi i32 [ %indvar.next.1, %latch.1 ], [ 0, %header.1.preheader ]
name:  j
SUSAN: declaring varName 5298: j
SUSAN: declared locals:
_1
_2
agg_2e_tmp
agg_2e_tmp1
agg_2e_tmp1_2e_coerce
agg_2e_tmp5
agg_2e_tmp5_2e_coerce
agg_2e_tmp6
agg_2e_tmp6_2e_coerce
agg_2e_tmp_2e_coerce
block
call
grid
i
SUSAN: declaring 3252:   %indvar.1 = phi i32 [ %indvar.next.1, %latch.1 ], [ 0, %header.1.preheader ]
SUSAN: found in IV2Name map   %indvar.1 = phi i32 [ %indvar.next.1, %latch.1 ], [ 0, %header.1.preheader ]
name:  j
SUSAN: reconstructed variable counter increment for iv:j
SUSAN: inst at 5950:   %indvar.1 = phi i32 [ %indvar.next.1, %latch.1 ], [ 0, %header.1.preheader ]
SUSAN: declaring   %indvar.1 = phi i32 [ %indvar.next.1, %latch.1 ], [ 0, %header.1.preheader ]
SUSAN: printing type at 5937: i32
SUSAN: getting value name for:   %indvar.next.1 = add nuw nsw i32 %indvar.1, 1
inst from IRNaming:   %indvar.next.1 = add nuw nsw i32 %indvar.1, 1
original name : j
returning name: j
SUSAN: declaring varName 5298: j
SUSAN: getting value name for:   %indvar.next.0 = add i32 %indvar.0, 1
inst from IRNaming:   %indvar.next.0 = add i32 %indvar.0, 1
original name : i
returning name: i
SUSAN: declaring varName 5298: i
SUSAN: getting value name for:   %call3 = call i32 @_ZL10num_blocksii(i32 %m, i32 %6), !dbg !1150
SUSAN: declaring varName 5298: call3
SUSAN: declared locals:
_1
_2
agg_2e_tmp
agg_2e_tmp1
agg_2e_tmp1_2e_coerce
agg_2e_tmp5
agg_2e_tmp5_2e_coerce
agg_2e_tmp6
agg_2e_tmp6_2e_coerce
agg_2e_tmp_2e_coerce
block
call
grid
i
j
SUSAN: declaring 3252:   %call3 = call i32 @_ZL10num_blocksii(i32 %m, i32 %6), !dbg !1150
SUSAN: getting value name for:   %call3 = call i32 @_ZL10num_blocksii(i32 %m, i32 %6), !dbg !1150
SUSAN: inst at 5950:   %call3 = call i32 @_ZL10num_blocksii(i32 %m, i32 %6), !dbg !1150
SUSAN: declaring   %call3 = call i32 @_ZL10num_blocksii(i32 %m, i32 %6), !dbg !1150
SUSAN: printing type at 5937: i32
SUSAN: getting value name for:   %call4 = call i32 @_ZL10num_blocksii(i32 %n, i32 %7), !dbg !1152
SUSAN: declaring varName 5298: call4
SUSAN: declared locals:
_1
_2
agg_2e_tmp
agg_2e_tmp1
agg_2e_tmp1_2e_coerce
agg_2e_tmp5
agg_2e_tmp5_2e_coerce
agg_2e_tmp6
agg_2e_tmp6_2e_coerce
agg_2e_tmp_2e_coerce
block
call
call3
grid
i
j
SUSAN: declaring 3252:   %call4 = call i32 @_ZL10num_blocksii(i32 %n, i32 %7), !dbg !1152
SUSAN: getting value name for:   %call4 = call i32 @_ZL10num_blocksii(i32 %n, i32 %7), !dbg !1152
SUSAN: inst at 5950:   %call4 = call i32 @_ZL10num_blocksii(i32 %n, i32 %7), !dbg !1152
SUSAN: declaring   %call4 = call i32 @_ZL10num_blocksii(i32 %n, i32 %7), !dbg !1152
SUSAN: printing type at 5937: i32
SUSAN: getting value name for:   %10 = call i8* @memcpy(i8* %8, i8* %9, i64 12), !dbg !1153
SUSAN: declaring varName 5298: _3
SUSAN: declared locals:
_1
_2
agg_2e_tmp
agg_2e_tmp1
agg_2e_tmp1_2e_coerce
agg_2e_tmp5
agg_2e_tmp5_2e_coerce
agg_2e_tmp6
agg_2e_tmp6_2e_coerce
agg_2e_tmp_2e_coerce
block
call
call3
call4
grid
i
j
SUSAN: declaring 3252:   %10 = call i8* @memcpy(i8* %8, i8* %9, i64 12), !dbg !1153
SUSAN: getting value name for:   %10 = call i8* @memcpy(i8* %8, i8* %9, i64 12), !dbg !1153
SUSAN: inst at 5950:   %10 = call i8* @memcpy(i8* %8, i8* %9, i64 12), !dbg !1153
SUSAN: declaring   %10 = call i8* @memcpy(i8* %8, i8* %9, i64 12), !dbg !1153
SUSAN: printing type at 5937: i8*
SUSAN: getting value name for:   %13 = call i8* @memcpy(i8* %11, i8* %12, i64 12), !dbg !1154
SUSAN: declaring varName 5298: _4
SUSAN: declared locals:
_1
_2
_3
agg_2e_tmp
agg_2e_tmp1
agg_2e_tmp1_2e_coerce
agg_2e_tmp5
agg_2e_tmp5_2e_coerce
agg_2e_tmp6
agg_2e_tmp6_2e_coerce
agg_2e_tmp_2e_coerce
block
call
call3
call4
grid
i
j
SUSAN: declaring 3252:   %13 = call i8* @memcpy(i8* %11, i8* %12, i64 12), !dbg !1154
SUSAN: getting value name for:   %13 = call i8* @memcpy(i8* %11, i8* %12, i64 12), !dbg !1154
SUSAN: inst at 5950:   %13 = call i8* @memcpy(i8* %11, i8* %12, i64 12), !dbg !1154
SUSAN: declaring   %13 = call i8* @memcpy(i8* %11, i8* %12, i64 12), !dbg !1154
SUSAN: printing type at 5937: i8*
SUSAN: getting value name for:   %16 = call i8* @memcpy(i8* %14, i8* %15, i64 12), !dbg !1155
SUSAN: declaring varName 5298: _5
SUSAN: declared locals:
_1
_2
_3
_4
agg_2e_tmp
agg_2e_tmp1
agg_2e_tmp1_2e_coerce
agg_2e_tmp5
agg_2e_tmp5_2e_coerce
agg_2e_tmp6
agg_2e_tmp6_2e_coerce
agg_2e_tmp_2e_coerce
block
call
call3
call4
grid
i
j
SUSAN: declaring 3252:   %16 = call i8* @memcpy(i8* %14, i8* %15, i64 12), !dbg !1155
SUSAN: getting value name for:   %16 = call i8* @memcpy(i8* %14, i8* %15, i64 12), !dbg !1155
SUSAN: inst at 5950:   %16 = call i8* @memcpy(i8* %14, i8* %15, i64 12), !dbg !1155
SUSAN: declaring   %16 = call i8* @memcpy(i8* %14, i8* %15, i64 12), !dbg !1155
SUSAN: printing type at 5937: i8*
SUSAN: getting value name for:   %19 = call i8* @memcpy(i8* %17, i8* %18, i64 12), !dbg !1155
SUSAN: declaring varName 5298: _6
SUSAN: declared locals:
_1
_2
_3
_4
_5
agg_2e_tmp
agg_2e_tmp1
agg_2e_tmp1_2e_coerce
agg_2e_tmp5
agg_2e_tmp5_2e_coerce
agg_2e_tmp6
agg_2e_tmp6_2e_coerce
agg_2e_tmp_2e_coerce
block
call
call3
call4
grid
i
j
SUSAN: declaring 3252:   %19 = call i8* @memcpy(i8* %17, i8* %18, i64 12), !dbg !1155
SUSAN: getting value name for:   %19 = call i8* @memcpy(i8* %17, i8* %18, i64 12), !dbg !1155
SUSAN: inst at 5950:   %19 = call i8* @memcpy(i8* %17, i8* %18, i64 12), !dbg !1155
SUSAN: declaring   %19 = call i8* @memcpy(i8* %17, i8* %18, i64 12), !dbg !1155
SUSAN: printing type at 5937: i8*
SUSAN: found in IV2Name map   %indvar.017 = phi i32 [ 0, %kcall.end ], [ %indvar.next.019, %latch.013 ]
name:  i
SUSAN: declaring varName 5298: i
SUSAN: found in IV2Name map   %indvar.114 = phi i32 [ %indvar.next.116, %latch.112 ], [ 0, %header.111.preheader ]
name:  j
SUSAN: declaring varName 5298: j
SUSAN: found in IV2Name map   %indvar.2 = phi i32 [ %indvar.next.2, %latch.2 ], [ 0, %header.2.preheader ]
name:  k
SUSAN: declaring varName 5298: k
SUSAN: declared locals:
_1
_2
_3
_4
_5
_6
agg_2e_tmp
agg_2e_tmp1
agg_2e_tmp1_2e_coerce
agg_2e_tmp5
agg_2e_tmp5_2e_coerce
agg_2e_tmp6
agg_2e_tmp6_2e_coerce
agg_2e_tmp_2e_coerce
block
call
call3
call4
grid
i
j
SUSAN: declaring 3252:   %indvar.2 = phi i32 [ %indvar.next.2, %latch.2 ], [ 0, %header.2.preheader ]
SUSAN: found in IV2Name map   %indvar.2 = phi i32 [ %indvar.next.2, %latch.2 ], [ 0, %header.2.preheader ]
name:  k
SUSAN: reconstructed variable counter increment for iv:k
SUSAN: inst at 5950:   %indvar.2 = phi i32 [ %indvar.next.2, %latch.2 ], [ 0, %header.2.preheader ]
SUSAN: declaring   %indvar.2 = phi i32 [ %indvar.next.2, %latch.2 ], [ 0, %header.2.preheader ]
SUSAN: printing type at 5937: i32
SUSAN: found in IV2Name map   %indvar.3 = phi i32 [ %indvar.next.3, %latch.3 ], [ 0, %header.3.preheader ]
name:  l
SUSAN: declaring varName 5298: l
SUSAN: declared locals:
_1
_2
_3
_4
_5
_6
agg_2e_tmp
agg_2e_tmp1
agg_2e_tmp1_2e_coerce
agg_2e_tmp5
agg_2e_tmp5_2e_coerce
agg_2e_tmp6
agg_2e_tmp6_2e_coerce
agg_2e_tmp_2e_coerce
block
call
call3
call4
grid
i
j
k
SUSAN: declaring 3252:   %indvar.3 = phi i32 [ %indvar.next.3, %latch.3 ], [ 0, %header.3.preheader ]
SUSAN: found in IV2Name map   %indvar.3 = phi i32 [ %indvar.next.3, %latch.3 ], [ 0, %header.3.preheader ]
name:  l
SUSAN: reconstructed variable counter increment for iv:l
SUSAN: inst at 5950:   %indvar.3 = phi i32 [ %indvar.next.3, %latch.3 ], [ 0, %header.3.preheader ]
SUSAN: declaring   %indvar.3 = phi i32 [ %indvar.next.3, %latch.3 ], [ 0, %header.3.preheader ]
SUSAN: printing type at 5937: i32
SUSAN: getting value name for:   %indvar.next.3 = add nuw nsw i32 %indvar.3, 1
inst from IRNaming:   %indvar.next.3 = add nuw nsw i32 %indvar.3, 1
original name : l
returning name: l
SUSAN: declaring varName 5298: l
SUSAN: getting value name for:   %indvar.next.2 = add nuw nsw i32 %indvar.2, 1
inst from IRNaming:   %indvar.next.2 = add nuw nsw i32 %indvar.2, 1
original name : k
returning name: k
SUSAN: declaring varName 5298: k
SUSAN: getting value name for:   %indvar.next.116 = add i32 %indvar.114, 1
inst from IRNaming:   %indvar.next.116 = add i32 %indvar.114, 1
original name : j
returning name: j
SUSAN: declaring varName 5298: j
SUSAN: getting value name for:   %indvar.next.019 = add i32 %indvar.017, 1
inst from IRNaming:   %indvar.next.019 = add i32 %indvar.017, 1
original name : i
returning name: i
SUSAN: declaring varName 5298: i
SUSAN: am I here 6807??
Linear Region with entry block: entry
SUSAN: printing bb:entry
CBEBackend: printing bb 7082 entry
SUSAN: printing instruction   %call = call i32 @_ZL10num_blocksii(i32 %n, i32 256), !dbg !1118 at 6678
SUSAN: getting value name for:   %call = call i32 @_ZL10num_blocksii(i32 %n, i32 256), !dbg !1118
CBackend: writeOperand 3595: 
; Function Attrs: noinline nounwind uwtable
define internal i32 @_ZL10num_blocksii(i32 %num, i32 %factor) #5 !dbg !1344 {
entry:
  call void @llvm.dbg.value(metadata i32 %num, metadata !1347, metadata !DIExpression()), !dbg !1348
  call void @llvm.dbg.value(metadata i32 %factor, metadata !1349, metadata !DIExpression()), !dbg !1348
  %add = add nsw i32 %num, %factor, !dbg !1350
  %sub = sub nsw i32 %add, 1, !dbg !1351
  %div = sdiv i32 %sub, %factor, !dbg !1352
  ret i32 %div, !dbg !1353
}

SUSAN: getting value name for: 
; Function Attrs: noinline nounwind uwtable
define internal i32 @_ZL10num_blocksii(i32 %num, i32 %factor) #5 !dbg !1344 {
entry:
  call void @llvm.dbg.value(metadata i32 %num, metadata !1347, metadata !DIExpression()), !dbg !1348
  call void @llvm.dbg.value(metadata i32 %factor, metadata !1349, metadata !DIExpression()), !dbg !1348
  %add = add nsw i32 %num, %factor, !dbg !1350
  %sub = sub nsw i32 %add, 1, !dbg !1351
  %div = sdiv i32 %sub, %factor, !dbg !1352
  ret i32 %div, !dbg !1353
}

CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595: i32 %n
SUSAN: getting value name for: i32 %n
inst from IRNaming: i32 %n
original name : n
returning name: n
CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595: i32 256
CBackend: writeoperand here 3674? 
SUSAN: printing instruction   store i32 %call, i32* %dim3gep.0 at 6678
CBEBackend: printing store Inst:   store i32 %call, i32* %dim3gep.0
CBackend: here? 10442
SUSAN: GEPINST:   %dim3gep.0 = getelementptr %struct.dim3, %struct.dim3* %agg.tmp, i32 0, i32 0
SUSAN: dereferenceTimes = 1
SUSAN: printing GEP:   %dim3gep.0 = getelementptr %struct.dim3, %struct.dim3* %agg.tmp, i32 0, i32 0
SUSAN: accessMemory true
SUSAN: first index is struct or array type
SUSAN: printing Ptr 9975   %agg.tmp = alloca %struct.dim3, align 4
SUSAN: getting value name for:   %agg.tmp = alloca %struct.dim3, align 4
SUSAN: is StructType 10074
CBackend: here? 10445
CBackend: writeOperand 3595:   %call = call i32 @_ZL10num_blocksii(i32 %n, i32 256), !dbg !1118
SUSAN: getting value name for:   %call = call i32 @_ZL10num_blocksii(i32 %n, i32 256), !dbg !1118
CBackend: writeoperand here 3674? 
CBackend: here? 10462
SUSAN: printing instruction   store i32 1, i32* %dim3gep.1 at 6678
CBEBackend: printing store Inst:   store i32 1, i32* %dim3gep.1
CBackend: here? 10442
SUSAN: GEPINST:   %dim3gep.1 = getelementptr %struct.dim3, %struct.dim3* %agg.tmp, i32 0, i32 1
SUSAN: dereferenceTimes = 1
SUSAN: printing GEP:   %dim3gep.1 = getelementptr %struct.dim3, %struct.dim3* %agg.tmp, i32 0, i32 1
SUSAN: accessMemory true
SUSAN: first index is struct or array type
SUSAN: printing Ptr 9975   %agg.tmp = alloca %struct.dim3, align 4
SUSAN: getting value name for:   %agg.tmp = alloca %struct.dim3, align 4
SUSAN: is StructType 10074
CBackend: here? 10445
CBackend: writeOperand 3595: i32 1
CBackend: writeoperand here 3674? 
CBackend: here? 10462
SUSAN: printing instruction   store i32 1, i32* %dim3gep.2 at 6678
CBEBackend: printing store Inst:   store i32 1, i32* %dim3gep.2
CBackend: here? 10442
SUSAN: GEPINST:   %dim3gep.2 = getelementptr %struct.dim3, %struct.dim3* %agg.tmp, i32 0, i32 2
SUSAN: dereferenceTimes = 1
SUSAN: printing GEP:   %dim3gep.2 = getelementptr %struct.dim3, %struct.dim3* %agg.tmp, i32 0, i32 2
SUSAN: accessMemory true
SUSAN: first index is struct or array type
SUSAN: printing Ptr 9975   %agg.tmp = alloca %struct.dim3, align 4
SUSAN: getting value name for:   %agg.tmp = alloca %struct.dim3, align 4
SUSAN: is StructType 10074
CBackend: here? 10445
CBackend: writeOperand 3595: i32 1
CBackend: writeoperand here 3674? 
CBackend: here? 10462
SUSAN: printing instruction   store i32 256, i32* %dim3gep.01 at 6678
CBEBackend: printing store Inst:   store i32 256, i32* %dim3gep.01
CBackend: here? 10442
SUSAN: GEPINST:   %dim3gep.01 = getelementptr %struct.dim3, %struct.dim3* %agg.tmp1, i32 0, i32 0
SUSAN: dereferenceTimes = 1
SUSAN: printing GEP:   %dim3gep.01 = getelementptr %struct.dim3, %struct.dim3* %agg.tmp1, i32 0, i32 0
SUSAN: accessMemory true
SUSAN: first index is struct or array type
SUSAN: printing Ptr 9975   %agg.tmp1 = alloca %struct.dim3, align 4
SUSAN: getting value name for:   %agg.tmp1 = alloca %struct.dim3, align 4
SUSAN: is StructType 10074
CBackend: here? 10445
CBackend: writeOperand 3595: i32 256
CBackend: writeoperand here 3674? 
CBackend: here? 10462
SUSAN: printing instruction   store i32 1, i32* %dim3gep.12 at 6678
CBEBackend: printing store Inst:   store i32 1, i32* %dim3gep.12
CBackend: here? 10442
SUSAN: GEPINST:   %dim3gep.12 = getelementptr %struct.dim3, %struct.dim3* %agg.tmp1, i32 0, i32 1
SUSAN: dereferenceTimes = 1
SUSAN: printing GEP:   %dim3gep.12 = getelementptr %struct.dim3, %struct.dim3* %agg.tmp1, i32 0, i32 1
SUSAN: accessMemory true
SUSAN: first index is struct or array type
SUSAN: printing Ptr 9975   %agg.tmp1 = alloca %struct.dim3, align 4
SUSAN: getting value name for:   %agg.tmp1 = alloca %struct.dim3, align 4
SUSAN: is StructType 10074
CBackend: here? 10445
CBackend: writeOperand 3595: i32 1
CBackend: writeoperand here 3674? 
CBackend: here? 10462
SUSAN: printing instruction   store i32 1, i32* %dim3gep.23 at 6678
CBEBackend: printing store Inst:   store i32 1, i32* %dim3gep.23
CBackend: here? 10442
SUSAN: GEPINST:   %dim3gep.23 = getelementptr %struct.dim3, %struct.dim3* %agg.tmp1, i32 0, i32 2
SUSAN: dereferenceTimes = 1
SUSAN: printing GEP:   %dim3gep.23 = getelementptr %struct.dim3, %struct.dim3* %agg.tmp1, i32 0, i32 2
SUSAN: accessMemory true
SUSAN: first index is struct or array type
SUSAN: printing Ptr 9975   %agg.tmp1 = alloca %struct.dim3, align 4
SUSAN: getting value name for:   %agg.tmp1 = alloca %struct.dim3, align 4
SUSAN: is StructType 10074
CBackend: here? 10445
CBackend: writeOperand 3595: i32 1
CBackend: writeoperand here 3674? 
CBackend: here? 10462
SUSAN: printing instruction   %2 = call i8* @memcpy(i8* %0, i8* %1, i64 12), !dbg !1119 at 6678
CBackend: writeOperand 3595: 
declare i8* @memcpy(i8*, i8*, i64)

SUSAN: getting value name for: 
declare i8* @memcpy(i8*, i8*, i64)

CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595:   %0 = bitcast { i64, i32 }* %agg.tmp.coerce to i8*, !dbg !1119
SUSAN: visiting cast:   %0 = bitcast { i64, i32 }* %agg.tmp.coerce to i8*, !dbg !1119
SUSAN: printing cast from: { i64, i32 }* to i8*
CBackend: writeOperand 3595:   %agg.tmp.coerce = alloca { i64, i32 }, align 4
SUSAN: getting value name for:   %agg.tmp.coerce = alloca { i64, i32 }, align 4
CBackend: writeoperand here 3674? 
CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595:   %1 = bitcast %struct.dim3* %agg.tmp to i8*, !dbg !1119
SUSAN: visiting cast:   %1 = bitcast %struct.dim3* %agg.tmp to i8*, !dbg !1119
SUSAN: printing cast from: %struct.dim3* to i8*
CBackend: writeOperand 3595:   %agg.tmp = alloca %struct.dim3, align 4
SUSAN: getting value name for:   %agg.tmp = alloca %struct.dim3, align 4
CBackend: writeoperand here 3674? 
CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595: i64 12
CBackend: writeoperand here 3674? 
SUSAN: printing instruction   %5 = call i8* @memcpy(i8* %3, i8* %4, i64 12), !dbg !1119 at 6678
CBackend: writeOperand 3595: 
declare i8* @memcpy(i8*, i8*, i64)

SUSAN: getting value name for: 
declare i8* @memcpy(i8*, i8*, i64)

CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595:   %3 = bitcast { i64, i32 }* %agg.tmp1.coerce to i8*, !dbg !1119
SUSAN: visiting cast:   %3 = bitcast { i64, i32 }* %agg.tmp1.coerce to i8*, !dbg !1119
SUSAN: printing cast from: { i64, i32 }* to i8*
CBackend: writeOperand 3595:   %agg.tmp1.coerce = alloca { i64, i32 }, align 4
SUSAN: getting value name for:   %agg.tmp1.coerce = alloca { i64, i32 }, align 4
CBackend: writeoperand here 3674? 
CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595:   %4 = bitcast %struct.dim3* %agg.tmp1 to i8*, !dbg !1119
SUSAN: visiting cast:   %4 = bitcast %struct.dim3* %agg.tmp1 to i8*, !dbg !1119
SUSAN: printing cast from: %struct.dim3* to i8*
CBackend: writeOperand 3595:   %agg.tmp1 = alloca %struct.dim3, align 4
SUSAN: getting value name for:   %agg.tmp1 = alloca %struct.dim3, align 4
CBackend: writeoperand here 3674? 
CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595: i64 12
CBackend: writeoperand here 3674? 
printing unconditional branch   br label %header.0
Loop Region with entry block: header.0
term 6818:   br i1 %exitcond24, label %header.1.preheader, label %kcall.end, !tulip.doall.loop.grid !1120
SUSAN: condrelatedinst:  %indvar.0 = phi i32 [ 0, %entry ], [ %indvar.next.0, %latch.0 ]
SUSAN: found IV 784  %indvar.0 = phi i32 [ 0, %entry ], [ %indvar.next.0, %latch.0 ]
SUSAN: condrelatedinst:  %exitcond24 = icmp ne i32 %indvar.0, %call
SUSAN: found IV 784  %indvar.0 = phi i32 [ 0, %entry ], [ %indvar.next.0, %latch.0 ]
SUSAN: declaring 3252:   %indvar.0 = phi i32 [ 0, %entry ], [ %indvar.next.0, %latch.0 ]
SUSAN: found in IV2Name map   %indvar.0 = phi i32 [ 0, %entry ], [ %indvar.next.0, %latch.0 ]
name:  i
SUSAN: reconstructed variable counter increment for iv:i
CBackend: writeOperand 3595: i32 0
CBackend: writeoperand here 3674? 
SUSAN: found in IV2Name map   %indvar.0 = phi i32 [ 0, %entry ], [ %indvar.next.0, %latch.0 ]
name:  i
SUSAN: getting value name for:   %call = call i32 @_ZL10num_blocksii(i32 %n, i32 256), !dbg !1118
SUSAN: declaring 3252:   %indvar.next.0 = add i32 %indvar.0, 1
SUSAN: getting value name for:   %indvar.next.0 = add i32 %indvar.0, 1
inst from IRNaming:   %indvar.next.0 = add i32 %indvar.0, 1
original name : i
returning name: i
SUSAN: declaring with reconstructed name 3286: i
SUSAN: getting value name for:   %indvar.next.0 = add i32 %indvar.0, 1
inst from IRNaming:   %indvar.next.0 = add i32 %indvar.0, 1
original name : i
returning name: i
CBackend: writeOperand 3595:   %indvar.0 = phi i32 [ 0, %entry ], [ %indvar.next.0, %latch.0 ]
SUSAN: found IV 784  %indvar.0 = phi i32 [ 0, %entry ], [ %indvar.next.0, %latch.0 ]
SUSAN: found IV 784  %indvar.0 = phi i32 [ 0, %entry ], [ %indvar.next.0, %latch.0 ]
SUSAN: found IV 784  %indvar.0 = phi i32 [ 0, %entry ], [ %indvar.next.0, %latch.0 ]
SUSAN: found in IV2Name map   %indvar.0 = phi i32 [ 0, %entry ], [ %indvar.next.0, %latch.0 ]
name:  i
SUSAN: found IV 784  %indvar.0 = phi i32 [ 0, %entry ], [ %indvar.next.0, %latch.0 ]
CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595: i32 1
CBackend: writeoperand here 3674? 
Linear Region with entry block: header.1.preheader
SUSAN: printing bb:header.1.preheader
CBEBackend: printing bb 7082 header.1.preheader
printing unconditional branch   br label %header.1
Loop Region with entry block: header.1
term 6818:   br i1 %exitcond23, label %kcall.configok, label %latch.0, !tulip.doall.loop.block !1120
SUSAN: condrelatedinst:  %indvar.1 = phi i32 [ %indvar.next.1, %latch.1 ], [ 0, %header.1.preheader ]
SUSAN: found IV 784  %indvar.1 = phi i32 [ %indvar.next.1, %latch.1 ], [ 0, %header.1.preheader ]
SUSAN: condrelatedinst:  %exitcond23 = icmp ne i32 %indvar.1, 256
SUSAN: found IV 784  %indvar.1 = phi i32 [ %indvar.next.1, %latch.1 ], [ 0, %header.1.preheader ]
SUSAN: declaring 3252:   %indvar.1 = phi i32 [ %indvar.next.1, %latch.1 ], [ 0, %header.1.preheader ]
SUSAN: found in IV2Name map   %indvar.1 = phi i32 [ %indvar.next.1, %latch.1 ], [ 0, %header.1.preheader ]
name:  j
SUSAN: reconstructed variable counter increment for iv:j
CBackend: writeOperand 3595: i32 0
CBackend: writeoperand here 3674? 
SUSAN: found in IV2Name map   %indvar.1 = phi i32 [ %indvar.next.1, %latch.1 ], [ 0, %header.1.preheader ]
name:  j
SUSAN: declaring 3252:   %indvar.next.1 = add nuw nsw i32 %indvar.1, 1
SUSAN: getting value name for:   %indvar.next.1 = add nuw nsw i32 %indvar.1, 1
inst from IRNaming:   %indvar.next.1 = add nuw nsw i32 %indvar.1, 1
original name : j
returning name: j
SUSAN: declaring with reconstructed name 3286: j
SUSAN: getting value name for:   %indvar.next.1 = add nuw nsw i32 %indvar.1, 1
inst from IRNaming:   %indvar.next.1 = add nuw nsw i32 %indvar.1, 1
original name : j
returning name: j
CBackend: writeOperand 3595:   %indvar.1 = phi i32 [ %indvar.next.1, %latch.1 ], [ 0, %header.1.preheader ]
SUSAN: found IV 784  %indvar.1 = phi i32 [ %indvar.next.1, %latch.1 ], [ 0, %header.1.preheader ]
SUSAN: found IV 784  %indvar.1 = phi i32 [ %indvar.next.1, %latch.1 ], [ 0, %header.1.preheader ]
SUSAN: found IV 784  %indvar.1 = phi i32 [ %indvar.next.1, %latch.1 ], [ 0, %header.1.preheader ]
SUSAN: found in IV2Name map   %indvar.1 = phi i32 [ %indvar.next.1, %latch.1 ], [ 0, %header.1.preheader ]
name:  j
SUSAN: found IV 784  %indvar.1 = phi i32 [ %indvar.next.1, %latch.1 ], [ 0, %header.1.preheader ]
CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595: i32 1
CBackend: writeoperand here 3674? 
Linear Region with entry block: kcall.configok
SUSAN: printing bb:kcall.configok
CBEBackend: printing bb 7082 kcall.configok
SUSAN: found IV 784  %indvar.1 = phi i32 [ %indvar.next.1, %latch.1 ], [ 0, %header.1.preheader ]
SUSAN: found IV 784  %indvar.1 = phi i32 [ %indvar.next.1, %latch.1 ], [ 0, %header.1.preheader ]
SUSAN: printing instruction   call void @_Z15kernel_contractiidPdS_.1(i32 %n, i32 %m, double %alpha, double* %B, double* %A, i32 %call, i32 1, i32 1, i32 256, i32 1, i32 1, i32 %indvar.0, i32 0, i32 0, i32 %indvar.1, i32 0, i32 0) at 6678
CBackend: writeOperand 3595: 
; Function Attrs: convergent noinline nounwind
define dso_local void @_Z15kernel_contractiidPdS_.1(i32 %n, i32 %m, double %alpha, double* %B, double* %A, i32 %gridDim.x, i32 %gridDim.y, i32 %gridDim.z, i32 %blockDim.x, i32 %blockDim.y, i32 %blockDim.z, i32 %blockIdx.x, i32 %blockIdx.y, i32 %blockIdx.z, i32 %threadIdx.x, i32 %threadIdx.y, i32 %threadIdx.z) #9 {
entry:
  call void @llvm.dbg.value(metadata i32 %n, metadata !1354, metadata !DIExpression()), !dbg !1356
  call void @llvm.dbg.value(metadata i32 %m, metadata !1357, metadata !DIExpression()), !dbg !1356
  call void @llvm.dbg.value(metadata double %alpha, metadata !1358, metadata !DIExpression()), !dbg !1356
  call void @llvm.dbg.value(metadata double* %B, metadata !1359, metadata !DIExpression()), !dbg !1356
  call void @llvm.dbg.value(metadata double* %A, metadata !1360, metadata !DIExpression()), !dbg !1356
  %mul = mul i32 %blockDim.x, %blockIdx.x, !dbg !1361
  %add = add i32 %mul, %threadIdx.x, !dbg !1362
  call void @llvm.dbg.value(metadata i32 %add, metadata !1363, metadata !DIExpression()), !dbg !1356
  %cmp = icmp slt i32 %add, %n, !dbg !1364
  br i1 %cmp, label %if.then, label %if.end, !dbg !1366

if.then:                                          ; preds = %entry
  call void @llvm.dbg.value(metadata i32 0, metadata !1367, metadata !DIExpression()), !dbg !1370
  %0 = sext i32 %m to i64, !dbg !1371
  %1 = sext i32 %n to i64, !dbg !1371
  %2 = sext i32 %add to i64, !dbg !1371
  %3 = sext i32 %m to i64, !dbg !1371
  %4 = sext i32 %n to i64, !dbg !1371
  %5 = sext i32 %add to i64, !dbg !1371
  br label %for.cond, !dbg !1371

for.cond:                                         ; preds = %for.inc20, %if.then
  %indvars.iv7 = phi i64 [ %indvars.iv.next8, %for.inc20 ], [ 0, %if.then ], !dbg !1370
  %indvars.iv = phi i32 [ %indvars.iv.next, %for.inc20 ], [ 1, %if.then ], !dbg !1370
  call void @llvm.dbg.value(metadata i64 %indvars.iv7, metadata !1367, metadata !DIExpression()), !dbg !1370
  %6 = sext i32 %indvars.iv to i64, !dbg !1372
  %cmp3 = icmp slt i64 %indvars.iv7, %3, !dbg !1372
  br i1 %cmp3, label %for.body, label %for.end22, !dbg !1374

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.value(metadata i64 %indvars.iv7, metadata !1375, metadata !DIExpression(DW_OP_plus_uconst, 1, DW_OP_stack_value)), !dbg !1377
  %wide.trip.count = sext i32 %m to i64, !dbg !1378
  br label %for.cond5, !dbg !1380

for.cond5:                                        ; preds = %for.inc, %for.body
  %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1377
  call void @llvm.dbg.value(metadata i64 %indvars.iv1, metadata !1375, metadata !DIExpression()), !dbg !1377
  %exitcond = icmp ne i64 %indvars.iv1, %wide.trip.count, !dbg !1378
  br i1 %exitcond, label %for.body7, label %for.end, !dbg !1381

for.body7:                                        ; preds = %for.cond5
  %7 = mul nsw i64 %indvars.iv1, %0, !dbg !1382
  %8 = add nsw i64 %7, %indvars.iv7, !dbg !1383
  %arrayidx = getelementptr inbounds double, double* %A, i64 %8, !dbg !1384
  %9 = load double, double* %arrayidx, align 8, !dbg !1384
  %10 = mul nsw i64 %indvars.iv1, %1, !dbg !1385
  %11 = add nsw i64 %10, %2, !dbg !1386
  %arrayidx13 = getelementptr inbounds double, double* %B, i64 %11, !dbg !1387
  %12 = load double, double* %arrayidx13, align 8, !dbg !1387
  %mul14 = fmul contract double %9, %12, !dbg !1388
  %13 = mul nsw i64 %indvars.iv7, %4, !dbg !1389
  %14 = add nsw i64 %13, %5, !dbg !1390
  %arrayidx18 = getelementptr inbounds double, double* %B, i64 %14, !dbg !1391
  %15 = load double, double* %arrayidx18, align 8, !dbg !1392
  %add19 = fadd contract double %15, %mul14, !dbg !1392
  store double %add19, double* %arrayidx18, align 8, !dbg !1392
  br label %for.inc, !dbg !1391

for.inc:                                          ; preds = %for.body7
  %indvars.iv.next2 = add nsw i64 %indvars.iv1, 1, !dbg !1393
  call void @llvm.dbg.value(metadata i32 undef, metadata !1375, metadata !DIExpression(DW_OP_plus_uconst, 1, DW_OP_stack_value)), !dbg !1377
  br label %for.cond5, !dbg !1394, !llvm.loop !1395

for.end:                                          ; preds = %for.cond5
  br label %for.inc20, !dbg !1396

for.inc20:                                        ; preds = %for.end
  %indvars.iv.next8 = add nuw nsw i64 %indvars.iv7, 1, !dbg !1397
  call void @llvm.dbg.value(metadata i32 undef, metadata !1367, metadata !DIExpression(DW_OP_plus_uconst, 1, DW_OP_stack_value)), !dbg !1370
  %indvars.iv.next = add nuw i32 %indvars.iv, 1, !dbg !1398
  br label %for.cond, !dbg !1398, !llvm.loop !1399

for.end22:                                        ; preds = %for.cond
  br label %if.end, !dbg !1401

if.end:                                           ; preds = %for.end22, %entry
  ret void, !dbg !1402
}

SUSAN: getting value name for: 
; Function Attrs: convergent noinline nounwind
define dso_local void @_Z15kernel_contractiidPdS_.1(i32 %n, i32 %m, double %alpha, double* %B, double* %A, i32 %gridDim.x, i32 %gridDim.y, i32 %gridDim.z, i32 %blockDim.x, i32 %blockDim.y, i32 %blockDim.z, i32 %blockIdx.x, i32 %blockIdx.y, i32 %blockIdx.z, i32 %threadIdx.x, i32 %threadIdx.y, i32 %threadIdx.z) #9 {
entry:
  call void @llvm.dbg.value(metadata i32 %n, metadata !1354, metadata !DIExpression()), !dbg !1356
  call void @llvm.dbg.value(metadata i32 %m, metadata !1357, metadata !DIExpression()), !dbg !1356
  call void @llvm.dbg.value(metadata double %alpha, metadata !1358, metadata !DIExpression()), !dbg !1356
  call void @llvm.dbg.value(metadata double* %B, metadata !1359, metadata !DIExpression()), !dbg !1356
  call void @llvm.dbg.value(metadata double* %A, metadata !1360, metadata !DIExpression()), !dbg !1356
  %mul = mul i32 %blockDim.x, %blockIdx.x, !dbg !1361
  %add = add i32 %mul, %threadIdx.x, !dbg !1362
  call void @llvm.dbg.value(metadata i32 %add, metadata !1363, metadata !DIExpression()), !dbg !1356
  %cmp = icmp slt i32 %add, %n, !dbg !1364
  br i1 %cmp, label %if.then, label %if.end, !dbg !1366

if.then:                                          ; preds = %entry
  call void @llvm.dbg.value(metadata i32 0, metadata !1367, metadata !DIExpression()), !dbg !1370
  %0 = sext i32 %m to i64, !dbg !1371
  %1 = sext i32 %n to i64, !dbg !1371
  %2 = sext i32 %add to i64, !dbg !1371
  %3 = sext i32 %m to i64, !dbg !1371
  %4 = sext i32 %n to i64, !dbg !1371
  %5 = sext i32 %add to i64, !dbg !1371
  br label %for.cond, !dbg !1371

for.cond:                                         ; preds = %for.inc20, %if.then
  %indvars.iv7 = phi i64 [ %indvars.iv.next8, %for.inc20 ], [ 0, %if.then ], !dbg !1370
  %indvars.iv = phi i32 [ %indvars.iv.next, %for.inc20 ], [ 1, %if.then ], !dbg !1370
  call void @llvm.dbg.value(metadata i64 %indvars.iv7, metadata !1367, metadata !DIExpression()), !dbg !1370
  %6 = sext i32 %indvars.iv to i64, !dbg !1372
  %cmp3 = icmp slt i64 %indvars.iv7, %3, !dbg !1372
  br i1 %cmp3, label %for.body, label %for.end22, !dbg !1374

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.value(metadata i64 %indvars.iv7, metadata !1375, metadata !DIExpression(DW_OP_plus_uconst, 1, DW_OP_stack_value)), !dbg !1377
  %wide.trip.count = sext i32 %m to i64, !dbg !1378
  br label %for.cond5, !dbg !1380

for.cond5:                                        ; preds = %for.inc, %for.body
  %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1377
  call void @llvm.dbg.value(metadata i64 %indvars.iv1, metadata !1375, metadata !DIExpression()), !dbg !1377
  %exitcond = icmp ne i64 %indvars.iv1, %wide.trip.count, !dbg !1378
  br i1 %exitcond, label %for.body7, label %for.end, !dbg !1381

for.body7:                                        ; preds = %for.cond5
  %7 = mul nsw i64 %indvars.iv1, %0, !dbg !1382
  %8 = add nsw i64 %7, %indvars.iv7, !dbg !1383
  %arrayidx = getelementptr inbounds double, double* %A, i64 %8, !dbg !1384
  %9 = load double, double* %arrayidx, align 8, !dbg !1384
  %10 = mul nsw i64 %indvars.iv1, %1, !dbg !1385
  %11 = add nsw i64 %10, %2, !dbg !1386
  %arrayidx13 = getelementptr inbounds double, double* %B, i64 %11, !dbg !1387
  %12 = load double, double* %arrayidx13, align 8, !dbg !1387
  %mul14 = fmul contract double %9, %12, !dbg !1388
  %13 = mul nsw i64 %indvars.iv7, %4, !dbg !1389
  %14 = add nsw i64 %13, %5, !dbg !1390
  %arrayidx18 = getelementptr inbounds double, double* %B, i64 %14, !dbg !1391
  %15 = load double, double* %arrayidx18, align 8, !dbg !1392
  %add19 = fadd contract double %15, %mul14, !dbg !1392
  store double %add19, double* %arrayidx18, align 8, !dbg !1392
  br label %for.inc, !dbg !1391

for.inc:                                          ; preds = %for.body7
  %indvars.iv.next2 = add nsw i64 %indvars.iv1, 1, !dbg !1393
  call void @llvm.dbg.value(metadata i32 undef, metadata !1375, metadata !DIExpression(DW_OP_plus_uconst, 1, DW_OP_stack_value)), !dbg !1377
  br label %for.cond5, !dbg !1394, !llvm.loop !1395

for.end:                                          ; preds = %for.cond5
  br label %for.inc20, !dbg !1396

for.inc20:                                        ; preds = %for.end
  %indvars.iv.next8 = add nuw nsw i64 %indvars.iv7, 1, !dbg !1397
  call void @llvm.dbg.value(metadata i32 undef, metadata !1367, metadata !DIExpression(DW_OP_plus_uconst, 1, DW_OP_stack_value)), !dbg !1370
  %indvars.iv.next = add nuw i32 %indvars.iv, 1, !dbg !1398
  br label %for.cond, !dbg !1398, !llvm.loop !1399

for.end22:                                        ; preds = %for.cond
  br label %if.end, !dbg !1401

if.end:                                           ; preds = %for.end22, %entry
  ret void, !dbg !1402
}

CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595: i32 %n
SUSAN: getting value name for: i32 %n
inst from IRNaming: i32 %n
original name : n
returning name: n
CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595: i32 %m
SUSAN: getting value name for: i32 %m
inst from IRNaming: i32 %m
original name : m
returning name: m
CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595: double %alpha
SUSAN: getting value name for: double %alpha
inst from IRNaming: double %alpha
original name : alpha
returning name: alpha
CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595: double* %B
SUSAN: getting value name for: double* %B
inst from IRNaming: double* %B
original name : B
returning name: B
CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595: double* %A
SUSAN: getting value name for: double* %A
inst from IRNaming: double* %A
original name : A
returning name: A
CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595:   %call = call i32 @_ZL10num_blocksii(i32 %n, i32 256), !dbg !1118
SUSAN: getting value name for:   %call = call i32 @_ZL10num_blocksii(i32 %n, i32 256), !dbg !1118
CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595: i32 1
CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595: i32 1
CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595: i32 256
CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595: i32 1
CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595: i32 1
CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595:   %indvar.0 = phi i32 [ 0, %entry ], [ %indvar.next.0, %latch.0 ]
SUSAN: found IV 784  %indvar.0 = phi i32 [ 0, %entry ], [ %indvar.next.0, %latch.0 ]
SUSAN: found IV 784  %indvar.0 = phi i32 [ 0, %entry ], [ %indvar.next.0, %latch.0 ]
SUSAN: found IV 784  %indvar.0 = phi i32 [ 0, %entry ], [ %indvar.next.0, %latch.0 ]
SUSAN: found in IV2Name map   %indvar.0 = phi i32 [ 0, %entry ], [ %indvar.next.0, %latch.0 ]
name:  i
SUSAN: found IV 784  %indvar.0 = phi i32 [ 0, %entry ], [ %indvar.next.0, %latch.0 ]
CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595: i32 0
CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595: i32 0
CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595:   %indvar.1 = phi i32 [ %indvar.next.1, %latch.1 ], [ 0, %header.1.preheader ]
SUSAN: found IV 784  %indvar.1 = phi i32 [ %indvar.next.1, %latch.1 ], [ 0, %header.1.preheader ]
SUSAN: found IV 784  %indvar.1 = phi i32 [ %indvar.next.1, %latch.1 ], [ 0, %header.1.preheader ]
SUSAN: found IV 784  %indvar.1 = phi i32 [ %indvar.next.1, %latch.1 ], [ 0, %header.1.preheader ]
SUSAN: found in IV2Name map   %indvar.1 = phi i32 [ %indvar.next.1, %latch.1 ], [ 0, %header.1.preheader ]
name:  j
SUSAN: found IV 784  %indvar.1 = phi i32 [ %indvar.next.1, %latch.1 ], [ 0, %header.1.preheader ]
CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595: i32 0
CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595: i32 0
CBackend: writeoperand here 3674? 
printing unconditional branch   br label %latch.1
CBERegion: printing latchBB latch.1
CBERegion: I 316:   %indvar.next.1 = add nuw nsw i32 %indvar.1, 1
SUSAN: found IV 784  %indvar.1 = phi i32 [ %indvar.next.1, %latch.1 ], [ 0, %header.1.preheader ]
CBERegion: I 316:   br label %header.1
SUSAN: found IV 784  %indvar.1 = phi i32 [ %indvar.next.1, %latch.1 ], [ 0, %header.1.preheader ]
SUSAN: found IV 784  %indvar.1 = phi i32 [ %indvar.next.1, %latch.1 ], [ 0, %header.1.preheader ]
CBERegion: printing latchBB latch.0
CBERegion: I 316:   %indvar.next.0 = add i32 %indvar.0, 1
SUSAN: found IV 784  %indvar.0 = phi i32 [ 0, %entry ], [ %indvar.next.0, %latch.0 ]
CBERegion: I 316:   br label %header.0
SUSAN: found IV 784  %indvar.0 = phi i32 [ 0, %entry ], [ %indvar.next.0, %latch.0 ]
SUSAN: found IV 784  %indvar.0 = phi i32 [ 0, %entry ], [ %indvar.next.0, %latch.0 ]
Linear Region with entry block: kcall.end
SUSAN: printing bb:kcall.end
CBEBackend: printing bb 7082 kcall.end
SUSAN: printing instruction   store i32 8, i32* %dim3gep.04 at 6678
CBEBackend: printing store Inst:   store i32 8, i32* %dim3gep.04
CBackend: here? 10442
SUSAN: GEPINST:   %dim3gep.04 = getelementptr %struct.dim3, %struct.dim3* %block, i32 0, i32 0
SUSAN: dereferenceTimes = 1
SUSAN: printing GEP:   %dim3gep.04 = getelementptr %struct.dim3, %struct.dim3* %block, i32 0, i32 0
SUSAN: accessMemory true
SUSAN: first index is struct or array type
SUSAN: printing Ptr 9975   %block = alloca %struct.dim3, align 4
SUSAN: getting value name for:   %block = alloca %struct.dim3, align 4
inst from IRNaming:   %block = alloca %struct.dim3, align 4
original name : block
returning name: block
SUSAN: is StructType 10074
CBackend: here? 10445
CBackend: writeOperand 3595: i32 8
CBackend: writeoperand here 3674? 
CBackend: here? 10462
SUSAN: printing instruction   store i32 32, i32* %dim3gep.15 at 6678
CBEBackend: printing store Inst:   store i32 32, i32* %dim3gep.15
CBackend: here? 10442
SUSAN: GEPINST:   %dim3gep.15 = getelementptr %struct.dim3, %struct.dim3* %block, i32 0, i32 1
SUSAN: dereferenceTimes = 1
SUSAN: printing GEP:   %dim3gep.15 = getelementptr %struct.dim3, %struct.dim3* %block, i32 0, i32 1
SUSAN: accessMemory true
SUSAN: first index is struct or array type
SUSAN: printing Ptr 9975   %block = alloca %struct.dim3, align 4
SUSAN: getting value name for:   %block = alloca %struct.dim3, align 4
inst from IRNaming:   %block = alloca %struct.dim3, align 4
original name : block
returning name: block
SUSAN: is StructType 10074
CBackend: here? 10445
CBackend: writeOperand 3595: i32 32
CBackend: writeoperand here 3674? 
CBackend: here? 10462
SUSAN: printing instruction   store i32 1, i32* %dim3gep.26 at 6678
CBEBackend: printing store Inst:   store i32 1, i32* %dim3gep.26
CBackend: here? 10442
SUSAN: GEPINST:   %dim3gep.26 = getelementptr %struct.dim3, %struct.dim3* %block, i32 0, i32 2
SUSAN: dereferenceTimes = 1
SUSAN: printing GEP:   %dim3gep.26 = getelementptr %struct.dim3, %struct.dim3* %block, i32 0, i32 2
SUSAN: accessMemory true
SUSAN: first index is struct or array type
SUSAN: printing Ptr 9975   %block = alloca %struct.dim3, align 4
SUSAN: getting value name for:   %block = alloca %struct.dim3, align 4
inst from IRNaming:   %block = alloca %struct.dim3, align 4
original name : block
returning name: block
SUSAN: is StructType 10074
CBackend: here? 10445
CBackend: writeOperand 3595: i32 1
CBackend: writeoperand here 3674? 
CBackend: here? 10462
SUSAN: printing instruction   %call3 = call i32 @_ZL10num_blocksii(i32 %m, i32 %6), !dbg !1150 at 6678
SUSAN: getting value name for:   %call3 = call i32 @_ZL10num_blocksii(i32 %m, i32 %6), !dbg !1150
CBackend: writeOperand 3595: 
; Function Attrs: noinline nounwind uwtable
define internal i32 @_ZL10num_blocksii(i32 %num, i32 %factor) #5 !dbg !1344 {
entry:
  call void @llvm.dbg.value(metadata i32 %num, metadata !1347, metadata !DIExpression()), !dbg !1348
  call void @llvm.dbg.value(metadata i32 %factor, metadata !1349, metadata !DIExpression()), !dbg !1348
  %add = add nsw i32 %num, %factor, !dbg !1350
  %sub = sub nsw i32 %add, 1, !dbg !1351
  %div = sdiv i32 %sub, %factor, !dbg !1352
  ret i32 %div, !dbg !1353
}

SUSAN: getting value name for: 
; Function Attrs: noinline nounwind uwtable
define internal i32 @_ZL10num_blocksii(i32 %num, i32 %factor) #5 !dbg !1344 {
entry:
  call void @llvm.dbg.value(metadata i32 %num, metadata !1347, metadata !DIExpression()), !dbg !1348
  call void @llvm.dbg.value(metadata i32 %factor, metadata !1349, metadata !DIExpression()), !dbg !1348
  %add = add nsw i32 %num, %factor, !dbg !1350
  %sub = sub nsw i32 %add, 1, !dbg !1351
  %div = sdiv i32 %sub, %factor, !dbg !1352
  ret i32 %div, !dbg !1353
}

CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595: i32 %m
SUSAN: getting value name for: i32 %m
inst from IRNaming: i32 %m
original name : m
returning name: m
CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595:   %6 = load i32, i32* %x, align 4, !dbg !1149
SUSAN: loadInst:   %6 = load i32, i32* %x, align 4, !dbg !1149
SUSAN: GEPINST:   %x = getelementptr inbounds %struct.dim3, %struct.dim3* %block, i32 0, i32 0, !dbg !1149
SUSAN: dereferenceTimes = 1
SUSAN: printing GEP:   %x = getelementptr inbounds %struct.dim3, %struct.dim3* %block, i32 0, i32 0, !dbg !1149
SUSAN: accessMemory true
SUSAN: first index is struct or array type
SUSAN: printing Ptr 9975   %block = alloca %struct.dim3, align 4
SUSAN: getting value name for:   %block = alloca %struct.dim3, align 4
inst from IRNaming:   %block = alloca %struct.dim3, align 4
original name : block
returning name: block
SUSAN: is StructType 10074
CBackend: writeoperand here 3674? 
SUSAN: printing instruction   %call4 = call i32 @_ZL10num_blocksii(i32 %n, i32 %7), !dbg !1152 at 6678
SUSAN: getting value name for:   %call4 = call i32 @_ZL10num_blocksii(i32 %n, i32 %7), !dbg !1152
CBackend: writeOperand 3595: 
; Function Attrs: noinline nounwind uwtable
define internal i32 @_ZL10num_blocksii(i32 %num, i32 %factor) #5 !dbg !1344 {
entry:
  call void @llvm.dbg.value(metadata i32 %num, metadata !1347, metadata !DIExpression()), !dbg !1348
  call void @llvm.dbg.value(metadata i32 %factor, metadata !1349, metadata !DIExpression()), !dbg !1348
  %add = add nsw i32 %num, %factor, !dbg !1350
  %sub = sub nsw i32 %add, 1, !dbg !1351
  %div = sdiv i32 %sub, %factor, !dbg !1352
  ret i32 %div, !dbg !1353
}

SUSAN: getting value name for: 
; Function Attrs: noinline nounwind uwtable
define internal i32 @_ZL10num_blocksii(i32 %num, i32 %factor) #5 !dbg !1344 {
entry:
  call void @llvm.dbg.value(metadata i32 %num, metadata !1347, metadata !DIExpression()), !dbg !1348
  call void @llvm.dbg.value(metadata i32 %factor, metadata !1349, metadata !DIExpression()), !dbg !1348
  %add = add nsw i32 %num, %factor, !dbg !1350
  %sub = sub nsw i32 %add, 1, !dbg !1351
  %div = sdiv i32 %sub, %factor, !dbg !1352
  ret i32 %div, !dbg !1353
}

CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595: i32 %n
SUSAN: getting value name for: i32 %n
inst from IRNaming: i32 %n
original name : n
returning name: n
CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595:   %7 = load i32, i32* %y, align 4, !dbg !1151
SUSAN: loadInst:   %7 = load i32, i32* %y, align 4, !dbg !1151
SUSAN: GEPINST:   %y = getelementptr inbounds %struct.dim3, %struct.dim3* %block, i32 0, i32 1, !dbg !1151
SUSAN: dereferenceTimes = 1
SUSAN: printing GEP:   %y = getelementptr inbounds %struct.dim3, %struct.dim3* %block, i32 0, i32 1, !dbg !1151
SUSAN: accessMemory true
SUSAN: first index is struct or array type
SUSAN: printing Ptr 9975   %block = alloca %struct.dim3, align 4
SUSAN: getting value name for:   %block = alloca %struct.dim3, align 4
inst from IRNaming:   %block = alloca %struct.dim3, align 4
original name : block
returning name: block
SUSAN: is StructType 10074
CBackend: writeoperand here 3674? 
SUSAN: printing instruction   store i32 %call3, i32* %dim3gep.07 at 6678
CBEBackend: printing store Inst:   store i32 %call3, i32* %dim3gep.07
CBackend: here? 10442
SUSAN: GEPINST:   %dim3gep.07 = getelementptr %struct.dim3, %struct.dim3* %grid, i32 0, i32 0
SUSAN: dereferenceTimes = 1
SUSAN: printing GEP:   %dim3gep.07 = getelementptr %struct.dim3, %struct.dim3* %grid, i32 0, i32 0
SUSAN: accessMemory true
SUSAN: first index is struct or array type
SUSAN: printing Ptr 9975   %grid = alloca %struct.dim3, align 4
SUSAN: getting value name for:   %grid = alloca %struct.dim3, align 4
inst from IRNaming:   %grid = alloca %struct.dim3, align 4
original name : grid
returning name: grid
SUSAN: is StructType 10074
CBackend: here? 10445
CBackend: writeOperand 3595:   %call3 = call i32 @_ZL10num_blocksii(i32 %m, i32 %6), !dbg !1150
SUSAN: getting value name for:   %call3 = call i32 @_ZL10num_blocksii(i32 %m, i32 %6), !dbg !1150
CBackend: writeoperand here 3674? 
CBackend: here? 10462
SUSAN: printing instruction   store i32 %call4, i32* %dim3gep.18 at 6678
CBEBackend: printing store Inst:   store i32 %call4, i32* %dim3gep.18
CBackend: here? 10442
SUSAN: GEPINST:   %dim3gep.18 = getelementptr %struct.dim3, %struct.dim3* %grid, i32 0, i32 1
SUSAN: dereferenceTimes = 1
SUSAN: printing GEP:   %dim3gep.18 = getelementptr %struct.dim3, %struct.dim3* %grid, i32 0, i32 1
SUSAN: accessMemory true
SUSAN: first index is struct or array type
SUSAN: printing Ptr 9975   %grid = alloca %struct.dim3, align 4
SUSAN: getting value name for:   %grid = alloca %struct.dim3, align 4
inst from IRNaming:   %grid = alloca %struct.dim3, align 4
original name : grid
returning name: grid
SUSAN: is StructType 10074
CBackend: here? 10445
CBackend: writeOperand 3595:   %call4 = call i32 @_ZL10num_blocksii(i32 %n, i32 %7), !dbg !1152
SUSAN: getting value name for:   %call4 = call i32 @_ZL10num_blocksii(i32 %n, i32 %7), !dbg !1152
CBackend: writeoperand here 3674? 
CBackend: here? 10462
SUSAN: printing instruction   store i32 1, i32* %dim3gep.29 at 6678
CBEBackend: printing store Inst:   store i32 1, i32* %dim3gep.29
CBackend: here? 10442
SUSAN: GEPINST:   %dim3gep.29 = getelementptr %struct.dim3, %struct.dim3* %grid, i32 0, i32 2
SUSAN: dereferenceTimes = 1
SUSAN: printing GEP:   %dim3gep.29 = getelementptr %struct.dim3, %struct.dim3* %grid, i32 0, i32 2
SUSAN: accessMemory true
SUSAN: first index is struct or array type
SUSAN: printing Ptr 9975   %grid = alloca %struct.dim3, align 4
SUSAN: getting value name for:   %grid = alloca %struct.dim3, align 4
inst from IRNaming:   %grid = alloca %struct.dim3, align 4
original name : grid
returning name: grid
SUSAN: is StructType 10074
CBackend: here? 10445
CBackend: writeOperand 3595: i32 1
CBackend: writeoperand here 3674? 
CBackend: here? 10462
SUSAN: printing instruction   %10 = call i8* @memcpy(i8* %8, i8* %9, i64 12), !dbg !1153 at 6678
CBackend: writeOperand 3595: 
declare i8* @memcpy(i8*, i8*, i64)

SUSAN: getting value name for: 
declare i8* @memcpy(i8*, i8*, i64)

CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595:   %8 = bitcast %struct.dim3* %agg.tmp5 to i8*, !dbg !1153
SUSAN: visiting cast:   %8 = bitcast %struct.dim3* %agg.tmp5 to i8*, !dbg !1153
SUSAN: printing cast from: %struct.dim3* to i8*
CBackend: writeOperand 3595:   %agg.tmp5 = alloca %struct.dim3, align 4
SUSAN: getting value name for:   %agg.tmp5 = alloca %struct.dim3, align 4
CBackend: writeoperand here 3674? 
CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595:   %9 = bitcast %struct.dim3* %grid to i8*, !dbg !1153
SUSAN: visiting cast:   %9 = bitcast %struct.dim3* %grid to i8*, !dbg !1153
SUSAN: printing cast from: %struct.dim3* to i8*
CBackend: writeOperand 3595:   %grid = alloca %struct.dim3, align 4
SUSAN: getting value name for:   %grid = alloca %struct.dim3, align 4
inst from IRNaming:   %grid = alloca %struct.dim3, align 4
original name : grid
returning name: grid
CBackend: writeoperand here 3674? 
CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595: i64 12
CBackend: writeoperand here 3674? 
SUSAN: printing instruction   %13 = call i8* @memcpy(i8* %11, i8* %12, i64 12), !dbg !1154 at 6678
CBackend: writeOperand 3595: 
declare i8* @memcpy(i8*, i8*, i64)

SUSAN: getting value name for: 
declare i8* @memcpy(i8*, i8*, i64)

CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595:   %11 = bitcast %struct.dim3* %agg.tmp6 to i8*, !dbg !1154
SUSAN: visiting cast:   %11 = bitcast %struct.dim3* %agg.tmp6 to i8*, !dbg !1154
SUSAN: printing cast from: %struct.dim3* to i8*
CBackend: writeOperand 3595:   %agg.tmp6 = alloca %struct.dim3, align 4
SUSAN: getting value name for:   %agg.tmp6 = alloca %struct.dim3, align 4
CBackend: writeoperand here 3674? 
CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595:   %12 = bitcast %struct.dim3* %block to i8*, !dbg !1154
SUSAN: visiting cast:   %12 = bitcast %struct.dim3* %block to i8*, !dbg !1154
SUSAN: printing cast from: %struct.dim3* to i8*
CBackend: writeOperand 3595:   %block = alloca %struct.dim3, align 4
SUSAN: getting value name for:   %block = alloca %struct.dim3, align 4
inst from IRNaming:   %block = alloca %struct.dim3, align 4
original name : block
returning name: block
CBackend: writeoperand here 3674? 
CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595: i64 12
CBackend: writeoperand here 3674? 
SUSAN: printing instruction   %16 = call i8* @memcpy(i8* %14, i8* %15, i64 12), !dbg !1155 at 6678
CBackend: writeOperand 3595: 
declare i8* @memcpy(i8*, i8*, i64)

SUSAN: getting value name for: 
declare i8* @memcpy(i8*, i8*, i64)

CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595:   %14 = bitcast { i64, i32 }* %agg.tmp5.coerce to i8*, !dbg !1155
SUSAN: visiting cast:   %14 = bitcast { i64, i32 }* %agg.tmp5.coerce to i8*, !dbg !1155
SUSAN: printing cast from: { i64, i32 }* to i8*
CBackend: writeOperand 3595:   %agg.tmp5.coerce = alloca { i64, i32 }, align 4
SUSAN: getting value name for:   %agg.tmp5.coerce = alloca { i64, i32 }, align 4
CBackend: writeoperand here 3674? 
CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595:   %15 = bitcast %struct.dim3* %agg.tmp5 to i8*, !dbg !1155
SUSAN: visiting cast:   %15 = bitcast %struct.dim3* %agg.tmp5 to i8*, !dbg !1155
SUSAN: printing cast from: %struct.dim3* to i8*
CBackend: writeOperand 3595:   %agg.tmp5 = alloca %struct.dim3, align 4
SUSAN: getting value name for:   %agg.tmp5 = alloca %struct.dim3, align 4
CBackend: writeoperand here 3674? 
CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595: i64 12
CBackend: writeoperand here 3674? 
SUSAN: printing instruction   %19 = call i8* @memcpy(i8* %17, i8* %18, i64 12), !dbg !1155 at 6678
CBackend: writeOperand 3595: 
declare i8* @memcpy(i8*, i8*, i64)

SUSAN: getting value name for: 
declare i8* @memcpy(i8*, i8*, i64)

CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595:   %17 = bitcast { i64, i32 }* %agg.tmp6.coerce to i8*, !dbg !1155
SUSAN: visiting cast:   %17 = bitcast { i64, i32 }* %agg.tmp6.coerce to i8*, !dbg !1155
SUSAN: printing cast from: { i64, i32 }* to i8*
CBackend: writeOperand 3595:   %agg.tmp6.coerce = alloca { i64, i32 }, align 4
SUSAN: getting value name for:   %agg.tmp6.coerce = alloca { i64, i32 }, align 4
CBackend: writeoperand here 3674? 
CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595:   %18 = bitcast %struct.dim3* %agg.tmp6 to i8*, !dbg !1155
SUSAN: visiting cast:   %18 = bitcast %struct.dim3* %agg.tmp6 to i8*, !dbg !1155
SUSAN: printing cast from: %struct.dim3* to i8*
CBackend: writeOperand 3595:   %agg.tmp6 = alloca %struct.dim3, align 4
SUSAN: getting value name for:   %agg.tmp6 = alloca %struct.dim3, align 4
CBackend: writeoperand here 3674? 
CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595: i64 12
CBackend: writeoperand here 3674? 
printing unconditional branch   br label %header.010
Loop Region with entry block: header.010
term 6818:   br i1 %exitcond22, label %header.111.preheader, label %kcall.end10, !tulip.doall.loop.grid.collapse !1120
SUSAN: condrelatedinst:  %indvar.017 = phi i32 [ 0, %kcall.end ], [ %indvar.next.019, %latch.013 ]
SUSAN: found IV 784  %indvar.017 = phi i32 [ 0, %kcall.end ], [ %indvar.next.019, %latch.013 ]
SUSAN: condrelatedinst:  %exitcond22 = icmp ne i32 %indvar.017, %call3
SUSAN: found IV 784  %indvar.017 = phi i32 [ 0, %kcall.end ], [ %indvar.next.019, %latch.013 ]
SUSAN: declaring 3252:   %indvar.017 = phi i32 [ 0, %kcall.end ], [ %indvar.next.019, %latch.013 ]
SUSAN: found in IV2Name map   %indvar.017 = phi i32 [ 0, %kcall.end ], [ %indvar.next.019, %latch.013 ]
name:  i
SUSAN: reconstructed variable counter increment for iv:i
CBackend: writeOperand 3595: i32 0
CBackend: writeoperand here 3674? 
SUSAN: found in IV2Name map   %indvar.017 = phi i32 [ 0, %kcall.end ], [ %indvar.next.019, %latch.013 ]
name:  i
SUSAN: getting value name for:   %call3 = call i32 @_ZL10num_blocksii(i32 %m, i32 %6), !dbg !1150
SUSAN: declaring 3252:   %indvar.next.019 = add i32 %indvar.017, 1
SUSAN: getting value name for:   %indvar.next.019 = add i32 %indvar.017, 1
inst from IRNaming:   %indvar.next.019 = add i32 %indvar.017, 1
original name : i
returning name: i
SUSAN: declaring with reconstructed name 3286: i
SUSAN: getting value name for:   %indvar.next.019 = add i32 %indvar.017, 1
inst from IRNaming:   %indvar.next.019 = add i32 %indvar.017, 1
original name : i
returning name: i
CBackend: writeOperand 3595:   %indvar.017 = phi i32 [ 0, %kcall.end ], [ %indvar.next.019, %latch.013 ]
SUSAN: found IV 784  %indvar.017 = phi i32 [ 0, %kcall.end ], [ %indvar.next.019, %latch.013 ]
SUSAN: found IV 784  %indvar.017 = phi i32 [ 0, %kcall.end ], [ %indvar.next.019, %latch.013 ]
SUSAN: found IV 784  %indvar.017 = phi i32 [ 0, %kcall.end ], [ %indvar.next.019, %latch.013 ]
SUSAN: found in IV2Name map   %indvar.017 = phi i32 [ 0, %kcall.end ], [ %indvar.next.019, %latch.013 ]
name:  i
SUSAN: found IV 784  %indvar.017 = phi i32 [ 0, %kcall.end ], [ %indvar.next.019, %latch.013 ]
CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595: i32 1
CBackend: writeoperand here 3674? 
Linear Region with entry block: header.111.preheader
SUSAN: printing bb:header.111.preheader
CBEBackend: printing bb 7082 header.111.preheader
printing unconditional branch   br label %header.111
Loop Region with entry block: header.111
term 6818:   br i1 %exitcond21, label %header.2.preheader, label %latch.013
SUSAN: condrelatedinst:  %indvar.114 = phi i32 [ %indvar.next.116, %latch.112 ], [ 0, %header.111.preheader ]
SUSAN: found IV 784  %indvar.114 = phi i32 [ %indvar.next.116, %latch.112 ], [ 0, %header.111.preheader ]
SUSAN: condrelatedinst:  %exitcond21 = icmp ne i32 %indvar.114, %call4
SUSAN: found IV 784  %indvar.114 = phi i32 [ %indvar.next.116, %latch.112 ], [ 0, %header.111.preheader ]
SUSAN: declaring 3252:   %indvar.114 = phi i32 [ %indvar.next.116, %latch.112 ], [ 0, %header.111.preheader ]
SUSAN: found in IV2Name map   %indvar.114 = phi i32 [ %indvar.next.116, %latch.112 ], [ 0, %header.111.preheader ]
name:  j
SUSAN: reconstructed variable counter increment for iv:j
CBackend: writeOperand 3595: i32 0
CBackend: writeoperand here 3674? 
SUSAN: found in IV2Name map   %indvar.114 = phi i32 [ %indvar.next.116, %latch.112 ], [ 0, %header.111.preheader ]
name:  j
SUSAN: getting value name for:   %call4 = call i32 @_ZL10num_blocksii(i32 %n, i32 %7), !dbg !1152
SUSAN: declaring 3252:   %indvar.next.116 = add i32 %indvar.114, 1
SUSAN: getting value name for:   %indvar.next.116 = add i32 %indvar.114, 1
inst from IRNaming:   %indvar.next.116 = add i32 %indvar.114, 1
original name : j
returning name: j
SUSAN: declaring with reconstructed name 3286: j
SUSAN: getting value name for:   %indvar.next.116 = add i32 %indvar.114, 1
inst from IRNaming:   %indvar.next.116 = add i32 %indvar.114, 1
original name : j
returning name: j
CBackend: writeOperand 3595:   %indvar.114 = phi i32 [ %indvar.next.116, %latch.112 ], [ 0, %header.111.preheader ]
SUSAN: found IV 784  %indvar.114 = phi i32 [ %indvar.next.116, %latch.112 ], [ 0, %header.111.preheader ]
SUSAN: found IV 784  %indvar.114 = phi i32 [ %indvar.next.116, %latch.112 ], [ 0, %header.111.preheader ]
SUSAN: found IV 784  %indvar.114 = phi i32 [ %indvar.next.116, %latch.112 ], [ 0, %header.111.preheader ]
SUSAN: found in IV2Name map   %indvar.114 = phi i32 [ %indvar.next.116, %latch.112 ], [ 0, %header.111.preheader ]
name:  j
SUSAN: found IV 784  %indvar.114 = phi i32 [ %indvar.next.116, %latch.112 ], [ 0, %header.111.preheader ]
CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595: i32 1
CBackend: writeoperand here 3674? 
Linear Region with entry block: header.2.preheader
SUSAN: printing bb:header.2.preheader
CBEBackend: printing bb 7082 header.2.preheader
printing unconditional branch   br label %header.2
Loop Region with entry block: header.2
term 6818:   br i1 %exitcond20, label %header.3.preheader, label %latch.112, !tulip.doall.loop.block.collapse !1120
SUSAN: condrelatedinst:  %indvar.2 = phi i32 [ %indvar.next.2, %latch.2 ], [ 0, %header.2.preheader ]
SUSAN: found IV 784  %indvar.2 = phi i32 [ %indvar.next.2, %latch.2 ], [ 0, %header.2.preheader ]
SUSAN: condrelatedinst:  %exitcond20 = icmp ne i32 %indvar.2, 8
SUSAN: found IV 784  %indvar.2 = phi i32 [ %indvar.next.2, %latch.2 ], [ 0, %header.2.preheader ]
SUSAN: declaring 3252:   %indvar.2 = phi i32 [ %indvar.next.2, %latch.2 ], [ 0, %header.2.preheader ]
SUSAN: found in IV2Name map   %indvar.2 = phi i32 [ %indvar.next.2, %latch.2 ], [ 0, %header.2.preheader ]
name:  k
SUSAN: reconstructed variable counter increment for iv:k
CBackend: writeOperand 3595: i32 0
CBackend: writeoperand here 3674? 
SUSAN: found in IV2Name map   %indvar.2 = phi i32 [ %indvar.next.2, %latch.2 ], [ 0, %header.2.preheader ]
name:  k
SUSAN: declaring 3252:   %indvar.next.2 = add nuw nsw i32 %indvar.2, 1
SUSAN: getting value name for:   %indvar.next.2 = add nuw nsw i32 %indvar.2, 1
inst from IRNaming:   %indvar.next.2 = add nuw nsw i32 %indvar.2, 1
original name : k
returning name: k
SUSAN: declaring with reconstructed name 3286: k
SUSAN: getting value name for:   %indvar.next.2 = add nuw nsw i32 %indvar.2, 1
inst from IRNaming:   %indvar.next.2 = add nuw nsw i32 %indvar.2, 1
original name : k
returning name: k
CBackend: writeOperand 3595:   %indvar.2 = phi i32 [ %indvar.next.2, %latch.2 ], [ 0, %header.2.preheader ]
SUSAN: found IV 784  %indvar.2 = phi i32 [ %indvar.next.2, %latch.2 ], [ 0, %header.2.preheader ]
SUSAN: found IV 784  %indvar.2 = phi i32 [ %indvar.next.2, %latch.2 ], [ 0, %header.2.preheader ]
SUSAN: found IV 784  %indvar.2 = phi i32 [ %indvar.next.2, %latch.2 ], [ 0, %header.2.preheader ]
SUSAN: found in IV2Name map   %indvar.2 = phi i32 [ %indvar.next.2, %latch.2 ], [ 0, %header.2.preheader ]
name:  k
SUSAN: found IV 784  %indvar.2 = phi i32 [ %indvar.next.2, %latch.2 ], [ 0, %header.2.preheader ]
CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595: i32 1
CBackend: writeoperand here 3674? 
Linear Region with entry block: header.3.preheader
SUSAN: printing bb:header.3.preheader
CBEBackend: printing bb 7082 header.3.preheader
printing unconditional branch   br label %header.3
Loop Region with entry block: header.3
term 6818:   br i1 %exitcond, label %kcall.configok9, label %latch.2
SUSAN: condrelatedinst:  %indvar.3 = phi i32 [ %indvar.next.3, %latch.3 ], [ 0, %header.3.preheader ]
SUSAN: found IV 784  %indvar.3 = phi i32 [ %indvar.next.3, %latch.3 ], [ 0, %header.3.preheader ]
SUSAN: condrelatedinst:  %exitcond = icmp ne i32 %indvar.3, 32
SUSAN: found IV 784  %indvar.3 = phi i32 [ %indvar.next.3, %latch.3 ], [ 0, %header.3.preheader ]
SUSAN: declaring 3252:   %indvar.3 = phi i32 [ %indvar.next.3, %latch.3 ], [ 0, %header.3.preheader ]
SUSAN: found in IV2Name map   %indvar.3 = phi i32 [ %indvar.next.3, %latch.3 ], [ 0, %header.3.preheader ]
name:  l
SUSAN: reconstructed variable counter increment for iv:l
CBackend: writeOperand 3595: i32 0
CBackend: writeoperand here 3674? 
SUSAN: found in IV2Name map   %indvar.3 = phi i32 [ %indvar.next.3, %latch.3 ], [ 0, %header.3.preheader ]
name:  l
SUSAN: declaring 3252:   %indvar.next.3 = add nuw nsw i32 %indvar.3, 1
SUSAN: getting value name for:   %indvar.next.3 = add nuw nsw i32 %indvar.3, 1
inst from IRNaming:   %indvar.next.3 = add nuw nsw i32 %indvar.3, 1
original name : l
returning name: l
SUSAN: declaring with reconstructed name 3286: l
SUSAN: getting value name for:   %indvar.next.3 = add nuw nsw i32 %indvar.3, 1
inst from IRNaming:   %indvar.next.3 = add nuw nsw i32 %indvar.3, 1
original name : l
returning name: l
CBackend: writeOperand 3595:   %indvar.3 = phi i32 [ %indvar.next.3, %latch.3 ], [ 0, %header.3.preheader ]
SUSAN: found IV 784  %indvar.3 = phi i32 [ %indvar.next.3, %latch.3 ], [ 0, %header.3.preheader ]
SUSAN: found IV 784  %indvar.3 = phi i32 [ %indvar.next.3, %latch.3 ], [ 0, %header.3.preheader ]
SUSAN: found IV 784  %indvar.3 = phi i32 [ %indvar.next.3, %latch.3 ], [ 0, %header.3.preheader ]
SUSAN: found in IV2Name map   %indvar.3 = phi i32 [ %indvar.next.3, %latch.3 ], [ 0, %header.3.preheader ]
name:  l
SUSAN: found IV 784  %indvar.3 = phi i32 [ %indvar.next.3, %latch.3 ], [ 0, %header.3.preheader ]
CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595: i32 1
CBackend: writeoperand here 3674? 
Linear Region with entry block: kcall.configok9
SUSAN: printing bb:kcall.configok9
CBEBackend: printing bb 7082 kcall.configok9
SUSAN: found IV 784  %indvar.3 = phi i32 [ %indvar.next.3, %latch.3 ], [ 0, %header.3.preheader ]
SUSAN: found IV 784  %indvar.3 = phi i32 [ %indvar.next.3, %latch.3 ], [ 0, %header.3.preheader ]
SUSAN: printing instruction   call void @_Z12kernel_alphaiidPdS_.2(i32 %n, i32 %m, double %alpha, double* %B, double* %A, i32 %call3, i32 %call4, i32 1, i32 8, i32 32, i32 1, i32 %indvar.017, i32 %indvar.114, i32 0, i32 %indvar.2, i32 %indvar.3, i32 0) at 6678
CBackend: writeOperand 3595: 
; Function Attrs: convergent noinline nounwind
define dso_local void @_Z12kernel_alphaiidPdS_.2(i32 %n, i32 %m, double %alpha, double* %B, double* %A, i32 %gridDim.x, i32 %gridDim.y, i32 %gridDim.z, i32 %blockDim.x, i32 %blockDim.y, i32 %blockDim.z, i32 %blockIdx.x, i32 %blockIdx.y, i32 %blockIdx.z, i32 %threadIdx.x, i32 %threadIdx.y, i32 %threadIdx.z) #9 {
entry:
  call void @llvm.dbg.value(metadata i32 %n, metadata !1403, metadata !DIExpression()), !dbg !1405
  call void @llvm.dbg.value(metadata i32 %m, metadata !1406, metadata !DIExpression()), !dbg !1405
  call void @llvm.dbg.value(metadata double %alpha, metadata !1407, metadata !DIExpression()), !dbg !1405
  call void @llvm.dbg.value(metadata double* %B, metadata !1408, metadata !DIExpression()), !dbg !1405
  call void @llvm.dbg.value(metadata double* %A, metadata !1409, metadata !DIExpression()), !dbg !1405
  %mul = mul i32 %blockDim.x, %blockIdx.x, !dbg !1410
  %add = add i32 %mul, %threadIdx.x, !dbg !1411
  call void @llvm.dbg.value(metadata i32 %add, metadata !1412, metadata !DIExpression()), !dbg !1405
  %mul5 = mul i32 %blockDim.y, %blockIdx.y, !dbg !1413
  %add7 = add i32 %mul5, %threadIdx.y, !dbg !1414
  call void @llvm.dbg.value(metadata i32 %add7, metadata !1415, metadata !DIExpression()), !dbg !1405
  %cmp = icmp slt i32 %add, %m, !dbg !1416
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !1418

land.lhs.true:                                    ; preds = %entry
  %cmp8 = icmp slt i32 %add7, %n, !dbg !1419
  br i1 %cmp8, label %if.then, label %if.end, !dbg !1420

if.then:                                          ; preds = %land.lhs.true
  %mul9 = mul nsw i32 %add, %n, !dbg !1421
  %add10 = add nsw i32 %mul9, %add7, !dbg !1422
  %idxprom = sext i32 %add10 to i64, !dbg !1423
  %arrayidx = getelementptr inbounds double, double* %B, i64 %idxprom, !dbg !1423
  %0 = load double, double* %arrayidx, align 8, !dbg !1424
  %mul11 = fmul contract double %0, %alpha, !dbg !1424
  store double %mul11, double* %arrayidx, align 8, !dbg !1424
  br label %if.end, !dbg !1423

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  ret void, !dbg !1425
}

SUSAN: getting value name for: 
; Function Attrs: convergent noinline nounwind
define dso_local void @_Z12kernel_alphaiidPdS_.2(i32 %n, i32 %m, double %alpha, double* %B, double* %A, i32 %gridDim.x, i32 %gridDim.y, i32 %gridDim.z, i32 %blockDim.x, i32 %blockDim.y, i32 %blockDim.z, i32 %blockIdx.x, i32 %blockIdx.y, i32 %blockIdx.z, i32 %threadIdx.x, i32 %threadIdx.y, i32 %threadIdx.z) #9 {
entry:
  call void @llvm.dbg.value(metadata i32 %n, metadata !1403, metadata !DIExpression()), !dbg !1405
  call void @llvm.dbg.value(metadata i32 %m, metadata !1406, metadata !DIExpression()), !dbg !1405
  call void @llvm.dbg.value(metadata double %alpha, metadata !1407, metadata !DIExpression()), !dbg !1405
  call void @llvm.dbg.value(metadata double* %B, metadata !1408, metadata !DIExpression()), !dbg !1405
  call void @llvm.dbg.value(metadata double* %A, metadata !1409, metadata !DIExpression()), !dbg !1405
  %mul = mul i32 %blockDim.x, %blockIdx.x, !dbg !1410
  %add = add i32 %mul, %threadIdx.x, !dbg !1411
  call void @llvm.dbg.value(metadata i32 %add, metadata !1412, metadata !DIExpression()), !dbg !1405
  %mul5 = mul i32 %blockDim.y, %blockIdx.y, !dbg !1413
  %add7 = add i32 %mul5, %threadIdx.y, !dbg !1414
  call void @llvm.dbg.value(metadata i32 %add7, metadata !1415, metadata !DIExpression()), !dbg !1405
  %cmp = icmp slt i32 %add, %m, !dbg !1416
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !1418

land.lhs.true:                                    ; preds = %entry
  %cmp8 = icmp slt i32 %add7, %n, !dbg !1419
  br i1 %cmp8, label %if.then, label %if.end, !dbg !1420

if.then:                                          ; preds = %land.lhs.true
  %mul9 = mul nsw i32 %add, %n, !dbg !1421
  %add10 = add nsw i32 %mul9, %add7, !dbg !1422
  %idxprom = sext i32 %add10 to i64, !dbg !1423
  %arrayidx = getelementptr inbounds double, double* %B, i64 %idxprom, !dbg !1423
  %0 = load double, double* %arrayidx, align 8, !dbg !1424
  %mul11 = fmul contract double %0, %alpha, !dbg !1424
  store double %mul11, double* %arrayidx, align 8, !dbg !1424
  br label %if.end, !dbg !1423

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  ret void, !dbg !1425
}

CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595: i32 %n
SUSAN: getting value name for: i32 %n
inst from IRNaming: i32 %n
original name : n
returning name: n
CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595: i32 %m
SUSAN: getting value name for: i32 %m
inst from IRNaming: i32 %m
original name : m
returning name: m
CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595: double %alpha
SUSAN: getting value name for: double %alpha
inst from IRNaming: double %alpha
original name : alpha
returning name: alpha
CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595: double* %B
SUSAN: getting value name for: double* %B
inst from IRNaming: double* %B
original name : B
returning name: B
CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595: double* %A
SUSAN: getting value name for: double* %A
inst from IRNaming: double* %A
original name : A
returning name: A
CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595:   %call3 = call i32 @_ZL10num_blocksii(i32 %m, i32 %6), !dbg !1150
SUSAN: getting value name for:   %call3 = call i32 @_ZL10num_blocksii(i32 %m, i32 %6), !dbg !1150
CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595:   %call4 = call i32 @_ZL10num_blocksii(i32 %n, i32 %7), !dbg !1152
SUSAN: getting value name for:   %call4 = call i32 @_ZL10num_blocksii(i32 %n, i32 %7), !dbg !1152
CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595: i32 1
CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595: i32 8
CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595: i32 32
CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595: i32 1
CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595:   %indvar.017 = phi i32 [ 0, %kcall.end ], [ %indvar.next.019, %latch.013 ]
SUSAN: found IV 784  %indvar.017 = phi i32 [ 0, %kcall.end ], [ %indvar.next.019, %latch.013 ]
SUSAN: found IV 784  %indvar.017 = phi i32 [ 0, %kcall.end ], [ %indvar.next.019, %latch.013 ]
SUSAN: found IV 784  %indvar.017 = phi i32 [ 0, %kcall.end ], [ %indvar.next.019, %latch.013 ]
SUSAN: found in IV2Name map   %indvar.017 = phi i32 [ 0, %kcall.end ], [ %indvar.next.019, %latch.013 ]
name:  i
SUSAN: found IV 784  %indvar.017 = phi i32 [ 0, %kcall.end ], [ %indvar.next.019, %latch.013 ]
CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595:   %indvar.114 = phi i32 [ %indvar.next.116, %latch.112 ], [ 0, %header.111.preheader ]
SUSAN: found IV 784  %indvar.114 = phi i32 [ %indvar.next.116, %latch.112 ], [ 0, %header.111.preheader ]
SUSAN: found IV 784  %indvar.114 = phi i32 [ %indvar.next.116, %latch.112 ], [ 0, %header.111.preheader ]
SUSAN: found IV 784  %indvar.114 = phi i32 [ %indvar.next.116, %latch.112 ], [ 0, %header.111.preheader ]
SUSAN: found in IV2Name map   %indvar.114 = phi i32 [ %indvar.next.116, %latch.112 ], [ 0, %header.111.preheader ]
name:  j
SUSAN: found IV 784  %indvar.114 = phi i32 [ %indvar.next.116, %latch.112 ], [ 0, %header.111.preheader ]
CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595: i32 0
CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595:   %indvar.2 = phi i32 [ %indvar.next.2, %latch.2 ], [ 0, %header.2.preheader ]
SUSAN: found IV 784  %indvar.2 = phi i32 [ %indvar.next.2, %latch.2 ], [ 0, %header.2.preheader ]
SUSAN: found IV 784  %indvar.2 = phi i32 [ %indvar.next.2, %latch.2 ], [ 0, %header.2.preheader ]
SUSAN: found IV 784  %indvar.2 = phi i32 [ %indvar.next.2, %latch.2 ], [ 0, %header.2.preheader ]
SUSAN: found in IV2Name map   %indvar.2 = phi i32 [ %indvar.next.2, %latch.2 ], [ 0, %header.2.preheader ]
name:  k
SUSAN: found IV 784  %indvar.2 = phi i32 [ %indvar.next.2, %latch.2 ], [ 0, %header.2.preheader ]
CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595:   %indvar.3 = phi i32 [ %indvar.next.3, %latch.3 ], [ 0, %header.3.preheader ]
SUSAN: found IV 784  %indvar.3 = phi i32 [ %indvar.next.3, %latch.3 ], [ 0, %header.3.preheader ]
SUSAN: found IV 784  %indvar.3 = phi i32 [ %indvar.next.3, %latch.3 ], [ 0, %header.3.preheader ]
SUSAN: found IV 784  %indvar.3 = phi i32 [ %indvar.next.3, %latch.3 ], [ 0, %header.3.preheader ]
SUSAN: found in IV2Name map   %indvar.3 = phi i32 [ %indvar.next.3, %latch.3 ], [ 0, %header.3.preheader ]
name:  l
SUSAN: found IV 784  %indvar.3 = phi i32 [ %indvar.next.3, %latch.3 ], [ 0, %header.3.preheader ]
CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595: i32 0
CBackend: writeoperand here 3674? 
printing unconditional branch   br label %latch.3
CBERegion: printing latchBB latch.3
CBERegion: I 316:   %indvar.next.3 = add nuw nsw i32 %indvar.3, 1
SUSAN: found IV 784  %indvar.3 = phi i32 [ %indvar.next.3, %latch.3 ], [ 0, %header.3.preheader ]
CBERegion: I 316:   br label %header.3
SUSAN: found IV 784  %indvar.3 = phi i32 [ %indvar.next.3, %latch.3 ], [ 0, %header.3.preheader ]
SUSAN: found IV 784  %indvar.3 = phi i32 [ %indvar.next.3, %latch.3 ], [ 0, %header.3.preheader ]
CBERegion: printing latchBB latch.2
CBERegion: I 316:   %indvar.next.2 = add nuw nsw i32 %indvar.2, 1
SUSAN: found IV 784  %indvar.2 = phi i32 [ %indvar.next.2, %latch.2 ], [ 0, %header.2.preheader ]
CBERegion: I 316:   br label %header.2
SUSAN: found IV 784  %indvar.2 = phi i32 [ %indvar.next.2, %latch.2 ], [ 0, %header.2.preheader ]
SUSAN: found IV 784  %indvar.2 = phi i32 [ %indvar.next.2, %latch.2 ], [ 0, %header.2.preheader ]
CBERegion: printing latchBB latch.112
CBERegion: I 316:   %indvar.next.116 = add i32 %indvar.114, 1
SUSAN: found IV 784  %indvar.114 = phi i32 [ %indvar.next.116, %latch.112 ], [ 0, %header.111.preheader ]
CBERegion: I 316:   br label %header.111
SUSAN: found IV 784  %indvar.114 = phi i32 [ %indvar.next.116, %latch.112 ], [ 0, %header.111.preheader ]
SUSAN: found IV 784  %indvar.114 = phi i32 [ %indvar.next.116, %latch.112 ], [ 0, %header.111.preheader ]
CBERegion: printing latchBB latch.013
CBERegion: I 316:   %indvar.next.019 = add i32 %indvar.017, 1
SUSAN: found IV 784  %indvar.017 = phi i32 [ 0, %kcall.end ], [ %indvar.next.019, %latch.013 ]
CBERegion: I 316:   br label %header.010
SUSAN: found IV 784  %indvar.017 = phi i32 [ 0, %kcall.end ], [ %indvar.next.019, %latch.013 ]
SUSAN: found IV 784  %indvar.017 = phi i32 [ 0, %kcall.end ], [ %indvar.next.019, %latch.013 ]
Linear Region with entry block: kcall.end10
SUSAN: printing bb:kcall.end10
CBEBackend: printing bb 7082 kcall.end10
CBackend: iterating function 1759: _ZL11print_arrayiiPd
CBackend: printing function 1770_ZL11print_arrayiiPd
SUSAN: added stderr to delete insts
SUSAN: added stderr to delete insts
SUSAN: added stderr to delete insts
CBackend: here? 1175
SUSAN: found IV 784  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc8 ], [ 0, %entry ], !dbg !1117
term 6818:   br i1 %cmp, label %for.body, label %for.end10, !dbg !1120
none omp loop ub:   %1 = sext i32 %m to i64, !dbg !1115
CBackend: here? 1175
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124
term 6818:   br i1 %cmp2, label %for.body3, label %for.end, !dbg !1127
none omp loop ub:   %0 = sext i32 %n to i64, !dbg !1115
=========LOOP PROFILES=========
Loop: Loop at depth 2 containing: %for.cond1<header><exiting>,%for.body3,%if.then,%if.end,%for.inc<latch>

isomp: 0
Loop: Loop at depth 1 containing: %for.cond<header><exiting>,%for.body,%for.cond1,%for.end,%for.inc8<latch>,%for.body3,%if.then,%if.end,%for.inc
    Loop at depth 2 containing: %for.cond1<header><exiting>,%for.body3,%if.then,%if.end,%for.inc<latch>

isomp: 0
SUSAN: opnd0  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc8 ], [ 0, %entry ], !dbg !1117
SUSAN: opnd1  %1 = sext i32 %m to i64, !dbg !1115
SUSAN: found IV 784  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc8 ], [ 0, %entry ], !dbg !1117
SUSAN: opnd0  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124
SUSAN: opnd1  %0 = sext i32 %n to i64, !dbg !1115
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124
SUSAN: opnd0  %rem = srem i32 %10, 20, !dbg !1137
SUSAN: opnd1i32 0
SUSAN: LP->ub:   %0 = sext i32 %n to i64, !dbg !1115
SUSAN: upperbound:   %0 = sext i32 %n to i64, !dbg !1115
SUSAN: LP->ub:   %1 = sext i32 %m to i64, !dbg !1115
SUSAN: upperbound:   %1 = sext i32 %m to i64, !dbg !1115
SUSAN: BB:
entry:
  call void @llvm.dbg.value(metadata i32 %m, metadata !1110, metadata !DIExpression()), !dbg !1111
  call void @llvm.dbg.value(metadata i32 %n, metadata !1112, metadata !DIExpression()), !dbg !1111
  call void @llvm.dbg.value(metadata double* %B, metadata !1113, metadata !DIExpression()), !dbg !1111
  call void @llvm.dbg.value(metadata i32 0, metadata !1114, metadata !DIExpression()), !dbg !1111
  %0 = sext i32 %n to i64, !dbg !1115
  %1 = sext i32 %m to i64, !dbg !1115
  %2 = sext i32 %n to i64, !dbg !1115
  %3 = sext i32 %n to i64, !dbg !1115
  br label %for.cond, !dbg !1115

SUSAN: BB:
for.cond:                                         ; preds = %for.inc8, %entry
  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc8 ], [ 0, %entry ], !dbg !1117
  call void @llvm.dbg.value(metadata i64 %indvars.iv3, metadata !1114, metadata !DIExpression()), !dbg !1111
  %cmp = icmp slt i64 %indvars.iv3, %1, !dbg !1118
  br i1 %cmp, label %for.body, label %for.end10, !dbg !1120

SUSAN: BB:
for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.value(metadata i32 0, metadata !1121, metadata !DIExpression()), !dbg !1111
  br label %for.cond1, !dbg !1122

SUSAN: BB:
for.cond1:                                        ; preds = %for.inc, %for.body
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124
  call void @llvm.dbg.value(metadata i64 %indvars.iv, metadata !1121, metadata !DIExpression()), !dbg !1111
  %cmp2 = icmp slt i64 %indvars.iv, %0, !dbg !1125
  br i1 %cmp2, label %for.body3, label %for.end, !dbg !1127

SUSAN: BB:
for.body3:                                        ; preds = %for.cond1
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !1128
  %5 = mul nsw i64 %indvars.iv3, %2, !dbg !1130
  %6 = add nsw i64 %5, %indvars.iv, !dbg !1131
  %arrayidx = getelementptr inbounds double, double* %B, i64 %6, !dbg !1132
  %7 = load double, double* %arrayidx, align 8, !dbg !1132
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %4, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), double %7), !dbg !1133
  %8 = mul nsw i64 %indvars.iv3, %3, !dbg !1134
  %9 = add nsw i64 %8, %indvars.iv, !dbg !1136
  %10 = trunc i64 %9 to i32, !dbg !1137
  %rem = srem i32 %10, 20, !dbg !1137
  %cmp6 = icmp eq i32 %rem, 0, !dbg !1138
  br i1 %cmp6, label %if.then, label %if.end, !dbg !1139

SUSAN: BB:
if.then:                                          ; preds = %for.body3
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !1140
  %call7 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %11, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !1141
  br label %if.end, !dbg !1141

SUSAN: BB:
if.end:                                           ; preds = %if.then, %for.body3
  br label %for.inc, !dbg !1142

SUSAN: BB:
for.inc:                                          ; preds = %if.end
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !1143
  call void @llvm.dbg.value(metadata i32 undef, metadata !1121, metadata !DIExpression(DW_OP_plus_uconst, 1, DW_OP_stack_value)), !dbg !1111
  br label %for.cond1, !dbg !1144, !llvm.loop !1145

SUSAN: BB:
for.end:                                          ; preds = %for.cond1
  br label %for.inc8, !dbg !1146

SUSAN: BB:
for.inc8:                                         ; preds = %for.end
  %indvars.iv.next4 = add nuw nsw i64 %indvars.iv3, 1, !dbg !1147
  call void @llvm.dbg.value(metadata i32 undef, metadata !1114, metadata !DIExpression(DW_OP_plus_uconst, 1, DW_OP_stack_value)), !dbg !1111
  br label %for.cond, !dbg !1148, !llvm.loop !1149

SUSAN: BB:
for.end10:                                        ; preds = %for.cond
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !1151
  %call11 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %12, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !1152
  ret void, !dbg !1153

SUSAN: trying to get exit for loop: Loop at depth 1 containing: %for.cond<header><exiting>,%for.body,%for.cond1,%for.end,%for.inc8<latch>,%for.body3,%if.then,%if.end,%for.inc
    Loop at depth 2 containing: %for.cond1<header><exiting>,%for.body3,%if.then,%if.end,%for.inc<latch>

SUSAN exitBB: 
for.cond:                                         ; preds = %for.inc8, %entry
  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc8 ], [ 0, %entry ], !dbg !1117
  call void @llvm.dbg.value(metadata i64 %indvars.iv3, metadata !1114, metadata !DIExpression()), !dbg !1111
  %cmp = icmp slt i64 %indvars.iv3, %1, !dbg !1118
  br i1 %cmp, label %for.body, label %for.end10, !dbg !1120

SUSAN: trying to get exit for loop: Loop at depth 2 containing: %for.cond1<header><exiting>,%for.body3,%if.then,%if.end,%for.inc<latch>

SUSAN exitBB: 
for.cond1:                                        ; preds = %for.inc, %for.body
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124
  call void @llvm.dbg.value(metadata i64 %indvars.iv, metadata !1121, metadata !DIExpression()), !dbg !1111
  %cmp2 = icmp slt i64 %indvars.iv, %0, !dbg !1125
  br i1 %cmp2, label %for.body3, label %for.end, !dbg !1127

SUSAN: entry block is a linear region! entry
CBERegion: including entry in a linear region
CBERegion: nextBB 
entry:
  call void @llvm.dbg.value(metadata i32 %m, metadata !1110, metadata !DIExpression()), !dbg !1111
  call void @llvm.dbg.value(metadata i32 %n, metadata !1112, metadata !DIExpression()), !dbg !1111
  call void @llvm.dbg.value(metadata double* %B, metadata !1113, metadata !DIExpression()), !dbg !1111
  call void @llvm.dbg.value(metadata i32 0, metadata !1114, metadata !DIExpression()), !dbg !1111
  %0 = sext i32 %n to i64, !dbg !1115
  %1 = sext i32 %m to i64, !dbg !1115
  %2 = sext i32 %n to i64, !dbg !1115
  %3 = sext i32 %n to i64, !dbg !1115
  br label %for.cond, !dbg !1115

SUSAN: nextRegionEntryBB for.cond
CBackend: entryBB is a loop: for.cond
SUSAN: entry block is a loop region! for.cond
creating loop region for entryBB: for.cond
SUSAN: loop at 355 Loop at depth 1 containing: %for.cond<header><exiting>,%for.body,%for.cond1,%for.end,%for.inc8<latch>,%for.body3,%if.then,%if.end,%for.inc
    Loop at depth 2 containing: %for.cond1<header><exiting>,%for.body3,%if.then,%if.end,%for.inc<latch>

SUSAN: found IV 784  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc8 ], [ 0, %entry ], !dbg !1117
term 6818:   br i1 %cmp, label %for.body, label %for.end10, !dbg !1120
CBERegion: startBB 393: 
for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.value(metadata i32 0, metadata !1121, metadata !DIExpression()), !dbg !1111
  br label %for.cond1, !dbg !1122

CBERegion: here? 149
CBackend: entryBB is a loop: for.body
but not a header!
SUSAN: entry block is a linear region! for.body
CBERegion: including for.body in a linear region
CBERegion: nextBB 
for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.value(metadata i32 0, metadata !1121, metadata !DIExpression()), !dbg !1111
  br label %for.cond1, !dbg !1122

SUSAN: nextRegionEntryBB for.cond1
for region: Loop at depth 1 containing: %for.cond<header><exiting>,%for.body,%for.cond1,%for.end,%for.inc8<latch>,%for.body3,%if.then,%if.end,%for.inc
    Loop at depth 2 containing: %for.cond1<header><exiting>,%for.body3,%if.then,%if.end,%for.inc<latch>

CBERegion: here? 149
CBackend: entryBB is a loop: for.cond1
SUSAN: entry block is a loop region! for.cond1
creating loop region for entryBB: for.cond1
SUSAN: loop at 355 Loop at depth 2 containing: %for.cond1<header><exiting>,%for.body3,%if.then,%if.end,%for.inc<latch>

SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124
term 6818:   br i1 %cmp2, label %for.body3, label %for.end, !dbg !1127
CBERegion: startBB 393: 
for.body3:                                        ; preds = %for.cond1
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !1128
  %5 = mul nsw i64 %indvars.iv3, %2, !dbg !1130
  %6 = add nsw i64 %5, %indvars.iv, !dbg !1131
  %arrayidx = getelementptr inbounds double, double* %B, i64 %6, !dbg !1132
  %7 = load double, double* %arrayidx, align 8, !dbg !1132
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %4, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), double %7), !dbg !1133
  %8 = mul nsw i64 %indvars.iv3, %3, !dbg !1134
  %9 = add nsw i64 %8, %indvars.iv, !dbg !1136
  %10 = trunc i64 %9 to i32, !dbg !1137
  %rem = srem i32 %10, 20, !dbg !1137
  %cmp6 = icmp eq i32 %rem, 0, !dbg !1138
  br i1 %cmp6, label %if.then, label %if.end, !dbg !1139

CBERegion: here? 149
CBackend: entryBB is a loop: for.body3
but not a header!
SUSAN: entry block is an if-else region! for.body3
creating if-else region for entryBB: for.body3
0
0
SUSAN: marking both branches
CBackend: entryBB is a loop: if.then
but not a header!
SUSAN: entry block is a linear region! if.then
CBERegion: including if.then in a linear region
CBERegion: nextBB 
if.then:                                          ; preds = %for.body3
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !1140
  %call7 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %11, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !1141
  br label %if.end, !dbg !1141

CBERegion: including if.end in a linear region
CBERegion: nextBB 
if.end:                                           ; preds = %if.then, %for.body3
  br label %for.inc, !dbg !1142

SUSAN: currbb 562: for.inc
CBERegion: nextEntryBB 121: for.inc
=================SUSAN: END OF marking region : for.body3==================
SUSAN: nextRegionEntryBB for.inc
for region: Loop at depth 2 containing: %for.cond1<header><exiting>,%for.body3,%if.then,%if.end,%for.inc<latch>

SUSAN: nextRegionEntryBB for.end
for region: Loop at depth 1 containing: %for.cond<header><exiting>,%for.body,%for.cond1,%for.end,%for.inc8<latch>,%for.body3,%if.then,%if.end,%for.inc
    Loop at depth 2 containing: %for.cond1<header><exiting>,%for.body3,%if.then,%if.end,%for.inc<latch>

CBERegion: here? 149
CBackend: entryBB is a loop: for.end
but not a header!
SUSAN: entry block is a linear region! for.end
CBERegion: including for.end in a linear region
CBERegion: nextBB 
for.end:                                          ; preds = %for.cond1
  br label %for.inc8, !dbg !1146

SUSAN: nextRegionEntryBB for.inc8
for region: Loop at depth 1 containing: %for.cond<header><exiting>,%for.body,%for.cond1,%for.end,%for.inc8<latch>,%for.body3,%if.then,%if.end,%for.inc
    Loop at depth 2 containing: %for.cond1<header><exiting>,%for.body3,%if.then,%if.end,%for.inc<latch>

SUSAN: nextRegionEntryBB for.end10
SUSAN: entry block is a linear region! for.end10
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124
SUSAN: found IV 784  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc8 ], [ 0, %entry ], !dbg !1117
SUSAN: found IV 784  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc8 ], [ 0, %entry ], !dbg !1117
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124
SUSAN: found IV 784  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc8 ], [ 0, %entry ], !dbg !1117
SUSAN: found IV 784  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc8 ], [ 0, %entry ], !dbg !1117
SUSAN: found IV 784  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc8 ], [ 0, %entry ], !dbg !1117
SUSAN: found IV 784  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc8 ], [ 0, %entry ], !dbg !1117
SUSAN: found IV 784  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc8 ], [ 0, %entry ], !dbg !1117
SUSAN: found IV 784  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc8 ], [ 0, %entry ], !dbg !1117
SUSAN: found IV 784  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc8 ], [ 0, %entry ], !dbg !1117
SUSAN: found IV 784  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc8 ], [ 0, %entry ], !dbg !1117
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124
SUSAN: found IV 784  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc8 ], [ 0, %entry ], !dbg !1117
SUSAN: found IV 784  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc8 ], [ 0, %entry ], !dbg !1117
SUSAN: found IV 784  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc8 ], [ 0, %entry ], !dbg !1117
SUSAN: found IV 784  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc8 ], [ 0, %entry ], !dbg !1117
SUSAN: found IV 784  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc8 ], [ 0, %entry ], !dbg !1117
SUSAN: found IV 784  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc8 ], [ 0, %entry ], !dbg !1117
SUSAN: found IV 784  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc8 ], [ 0, %entry ], !dbg !1117
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124
SUSAN: CI at 1400:   call void @llvm.dbg.value(metadata i32 %m, metadata !1300, metadata !DIExpression()), !dbg !1301
SUSAN: CI at 1400:   call void @llvm.dbg.value(metadata i32 %n, metadata !1302, metadata !DIExpression()), !dbg !1301
SUSAN: CI at 1400:   call void @llvm.dbg.value(metadata double* %B, metadata !1303, metadata !DIExpression()), !dbg !1301
SUSAN: CI at 1400:   call void @llvm.dbg.value(metadata i32 0, metadata !1304, metadata !DIExpression()), !dbg !1301
SUSAN: CI at 1400:   call void @llvm.dbg.value(metadata i64 %indvars.iv3, metadata !1304, metadata !DIExpression()), !dbg !1301
SUSAN: CI at 1400:   call void @llvm.dbg.value(metadata i32 0, metadata !1311, metadata !DIExpression()), !dbg !1301
SUSAN: CI at 1400:   call void @llvm.dbg.value(metadata i64 %indvars.iv, metadata !1311, metadata !DIExpression()), !dbg !1301
SUSAN: CI at 1400:   %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %4, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), double %7), !dbg !1133
SUSAN: CI at 1400:   %call7 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %11, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !1141
SUSAN: CI at 1400:   call void @llvm.dbg.value(metadata i32 undef, metadata !1311, metadata !DIExpression(DW_OP_plus_uconst, 1, DW_OP_stack_value)), !dbg !1301
SUSAN: CI at 1400:   call void @llvm.dbg.value(metadata i32 undef, metadata !1304, metadata !DIExpression(DW_OP_plus_uconst, 1, DW_OP_stack_value)), !dbg !1301
SUSAN: CI at 1400:   %call11 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %12, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !1152
SUSAN: found IV 784  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc8 ], [ 0, %entry ], !dbg !1117
SUSAN: found IV 784  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc8 ], [ 0, %entry ], !dbg !1117
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124
========== IV MAP==========
SUSAN: headPHI:   %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
SUSAN: phi:   %j.1 = phi i32 [ 0, %for.body9 ], [ %inc30, %for.inc29 ], !dbg !1155
SUSAN: found LP for L:Loop at depth 1 containing: %for.cond<header><exiting>,%for.body,%for.cond1,%for.end,%for.inc8<latch>,%for.body3,%if.then,%if.end,%for.inc
    Loop at depth 2 containing: %for.cond1<header><exiting>,%for.body3,%if.then,%if.end,%for.inc<latch>

SUSAN: found LP for L:Loop at depth 2 containing: %for.cond1<header><exiting>,%for.body3,%if.then,%if.end,%for.inc<latch>

currInst :  %0 = sext i32 %n to i64, !dbg !1115
currInst :  %cmp2 = icmp slt i64 %indvars.iv, %0, !dbg !1125
currInst :  br i1 %cmp2, label %for.body3, label %for.end, !dbg !1127
currInst :  %1 = sext i32 %m to i64, !dbg !1115
currInst :  %cmp = icmp slt i64 %indvars.iv3, %1, !dbg !1118
currInst :  br i1 %cmp, label %for.body, label %for.end10, !dbg !1120
currInst :  %2 = sext i32 %n to i64, !dbg !1115
currInst :  %5 = mul nsw i64 %indvars.iv3, %2, !dbg !1130
currInst :  %6 = add nsw i64 %5, %indvars.iv, !dbg !1131
currInst :  %arrayidx = getelementptr inbounds double, double* %B, i64 %6, !dbg !1132
currInst :  %7 = load double, double* %arrayidx, align 8, !dbg !1132
currInst :  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %4, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), double %7), !dbg !1133
currInst :  %3 = sext i32 %n to i64, !dbg !1115
currInst :  %8 = mul nsw i64 %indvars.iv3, %3, !dbg !1134
currInst :  %9 = add nsw i64 %8, %indvars.iv, !dbg !1136
currInst :  %10 = trunc i64 %9 to i32, !dbg !1137
currInst :  %rem = srem i32 %10, 20, !dbg !1137
currInst :  %cmp6 = icmp eq i32 %rem, 0, !dbg !1138
currInst :  br i1 %cmp6, label %if.then, label %if.end, !dbg !1139
currInst :  %cmp = icmp slt i64 %indvars.iv3, %1, !dbg !1118
currInst :  br i1 %cmp, label %for.body, label %for.end10, !dbg !1120
currInst :  %cmp2 = icmp slt i64 %indvars.iv, %0, !dbg !1125
currInst :  br i1 %cmp2, label %for.body3, label %for.end, !dbg !1127
currInst :  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !1128
currInst :  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %4, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), double %7), !dbg !1133
currInst :  %5 = mul nsw i64 %indvars.iv3, %2, !dbg !1130
currInst :  %6 = add nsw i64 %5, %indvars.iv, !dbg !1131
currInst :  %arrayidx = getelementptr inbounds double, double* %B, i64 %6, !dbg !1132
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124
SUSAN: add () to inst:   %5 = mul nsw i64 %indvars.iv3, %2, !dbg !1130
currInst :  %6 = add nsw i64 %5, %indvars.iv, !dbg !1131
currInst :  %arrayidx = getelementptr inbounds double, double* %B, i64 %6, !dbg !1132
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124
SUSAN: add () to inst:   %6 = add nsw i64 %5, %indvars.iv, !dbg !1131
currInst :  %arrayidx = getelementptr inbounds double, double* %B, i64 %6, !dbg !1132
currInst :  %7 = load double, double* %arrayidx, align 8, !dbg !1132
currInst :  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %4, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), double %7), !dbg !1133
currInst :  %7 = load double, double* %arrayidx, align 8, !dbg !1132
currInst :  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %4, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), double %7), !dbg !1133
currInst :  %8 = mul nsw i64 %indvars.iv3, %3, !dbg !1134
currInst :  %9 = add nsw i64 %8, %indvars.iv, !dbg !1136
currInst :  %10 = trunc i64 %9 to i32, !dbg !1137
currInst :  %rem = srem i32 %10, 20, !dbg !1137
currInst :  %cmp6 = icmp eq i32 %rem, 0, !dbg !1138
currInst :  br i1 %cmp6, label %if.then, label %if.end, !dbg !1139
currInst :  %9 = add nsw i64 %8, %indvars.iv, !dbg !1136
currInst :  %10 = trunc i64 %9 to i32, !dbg !1137
currInst :  %rem = srem i32 %10, 20, !dbg !1137
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124
SUSAN: add () to inst:   %9 = add nsw i64 %8, %indvars.iv, !dbg !1136
currInst :  %10 = trunc i64 %9 to i32, !dbg !1137
currInst :  %rem = srem i32 %10, 20, !dbg !1137
currInst :  %cmp6 = icmp eq i32 %rem, 0, !dbg !1138
currInst :  br i1 %cmp6, label %if.then, label %if.end, !dbg !1139
currInst :  %rem = srem i32 %10, 20, !dbg !1137
currInst :  %cmp6 = icmp eq i32 %rem, 0, !dbg !1138
currInst :  br i1 %cmp6, label %if.then, label %if.end, !dbg !1139
currInst :  %cmp6 = icmp eq i32 %rem, 0, !dbg !1138
currInst :  br i1 %cmp6, label %if.then, label %if.end, !dbg !1139
currInst :  %11 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !1140
currInst :  %call7 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %11, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !1141
currInst :  %12 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !1151
currInst :  %call11 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %12, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !1152
LP->LV 1694:   %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124
LP->L 1694: Loop at depth 2 containing: %for.cond1<header><exiting>,%for.body3,%if.then,%if.end,%for.inc<latch>

nestlevel: j
LP->LV 1694:   %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc8 ], [ 0, %entry ], !dbg !1117
LP->L 1694: Loop at depth 1 containing: %for.cond<header><exiting>,%for.body,%for.cond1,%for.end,%for.inc8<latch>,%for.body3,%if.then,%if.end,%for.inc
    Loop at depth 2 containing: %for.cond1<header><exiting>,%for.body3,%if.then,%if.end,%for.inc<latch>

nestlevel: i
SUSAN: getting value name for: 
; Function Attrs: noinline uwtable
define internal void @_ZL11print_arrayiiPd(i32 %m, i32 %n, double* %B) #7 !dbg !1297 {
entry:
  call void @llvm.dbg.value(metadata i32 %m, metadata !1300, metadata !DIExpression()), !dbg !1301
  call void @llvm.dbg.value(metadata i32 %n, metadata !1302, metadata !DIExpression()), !dbg !1301
  call void @llvm.dbg.value(metadata double* %B, metadata !1303, metadata !DIExpression()), !dbg !1301
  call void @llvm.dbg.value(metadata i32 0, metadata !1304, metadata !DIExpression()), !dbg !1301
  %0 = sext i32 %n to i64, !dbg !1305
  %1 = sext i32 %m to i64, !dbg !1305
  %2 = sext i32 %n to i64, !dbg !1305
  %3 = sext i32 %n to i64, !dbg !1305
  br label %for.cond, !dbg !1305

for.cond:                                         ; preds = %for.inc8, %entry
  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc8 ], [ 0, %entry ], !dbg !1307
  call void @llvm.dbg.value(metadata i64 %indvars.iv3, metadata !1304, metadata !DIExpression()), !dbg !1301
  %cmp = icmp slt i64 %indvars.iv3, %1, !dbg !1308
  br i1 %cmp, label %for.body, label %for.end10, !dbg !1310

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.value(metadata i32 0, metadata !1311, metadata !DIExpression()), !dbg !1301
  br label %for.cond1, !dbg !1312

for.cond1:                                        ; preds = %for.inc, %for.body
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1314
  call void @llvm.dbg.value(metadata i64 %indvars.iv, metadata !1311, metadata !DIExpression()), !dbg !1301
  %cmp2 = icmp slt i64 %indvars.iv, %0, !dbg !1315
  br i1 %cmp2, label %for.body3, label %for.end, !dbg !1317

for.body3:                                        ; preds = %for.cond1
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !1318
  %5 = mul nsw i64 %indvars.iv3, %2, !dbg !1320
  %6 = add nsw i64 %5, %indvars.iv, !dbg !1321
  %arrayidx = getelementptr inbounds double, double* %B, i64 %6, !dbg !1322
  %7 = load double, double* %arrayidx, align 8, !dbg !1322
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %4, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), double %7), !dbg !1323
  %8 = mul nsw i64 %indvars.iv3, %3, !dbg !1324
  %9 = add nsw i64 %8, %indvars.iv, !dbg !1326
  %10 = trunc i64 %9 to i32, !dbg !1327
  %rem = srem i32 %10, 20, !dbg !1327
  %cmp6 = icmp eq i32 %rem, 0, !dbg !1328
  br i1 %cmp6, label %if.then, label %if.end, !dbg !1329

if.then:                                          ; preds = %for.body3
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !1330
  %call7 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %11, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !1331
  br label %if.end, !dbg !1331

if.end:                                           ; preds = %if.then, %for.body3
  br label %for.inc, !dbg !1332

for.inc:                                          ; preds = %if.end
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !1333
  call void @llvm.dbg.value(metadata i32 undef, metadata !1311, metadata !DIExpression(DW_OP_plus_uconst, 1, DW_OP_stack_value)), !dbg !1301
  br label %for.cond1, !dbg !1334, !llvm.loop !1335

for.end:                                          ; preds = %for.cond1
  br label %for.inc8, !dbg !1336

for.inc8:                                         ; preds = %for.end
  %indvars.iv.next4 = add nuw nsw i64 %indvars.iv3, 1, !dbg !1337
  call void @llvm.dbg.value(metadata i32 undef, metadata !1304, metadata !DIExpression(DW_OP_plus_uconst, 1, DW_OP_stack_value)), !dbg !1301
  br label %for.cond, !dbg !1338, !llvm.loop !1339

for.end10:                                        ; preds = %for.cond
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !1341
  %call11 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %12, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !1342
  ret void, !dbg !1343
}

SUSAN: found argument 6346: i32 %m
CBackend: varname: m
  call void @llvm.dbg.value(metadata i32 %m, metadata !1300, metadata !DIExpression()), !dbg !1301
SUSAN: found argument 6346: i32 %n
CBackend: varname: n
  call void @llvm.dbg.value(metadata i32 %n, metadata !1302, metadata !DIExpression()), !dbg !1301
SUSAN: found argument 6346: double* %B
CBackend: varname: B
  call void @llvm.dbg.value(metadata double* %B, metadata !1303, metadata !DIExpression()), !dbg !1301
SUSAN: getting value name for:   %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc8 ], [ 0, %entry ], !dbg !1117
inst from IRNaming:   %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc8 ], [ 0, %entry ], !dbg !1117
original name : i
returning name: i
SUSAN: phi related name: i
SUSAN: getting value name for:   %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124
inst from IRNaming:   %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124
original name : j
returning name: j
SUSAN: phi related name: j
=========================SUSAN: IR NAMING BEFORE=====================
i32 %m -> m
i32 %n -> n
double* %B -> B
  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc8 ], [ 0, %entry ], !dbg !1117 -> i
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124 -> j
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !1143 -> j
  %indvars.iv.next4 = add nuw nsw i64 %indvars.iv3, 1, !dbg !1147 -> i
SUSAN: inst:  call void @llvm.dbg.value(metadata i32 %m, metadata !1300, metadata !DIExpression()), !dbg !1301
SUSAN: inst:  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc8 ], [ 0, %entry ], !dbg !1117
i:  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc8 ], [ 0, %entry ], !dbg !1117
j:  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124
SUSAN: inst:  call void @llvm.dbg.value(metadata i32 %n, metadata !1302, metadata !DIExpression()), !dbg !1301
SUSAN: inst:  call void @llvm.dbg.value(metadata double* %B, metadata !1303, metadata !DIExpression()), !dbg !1301
SUSAN: inst:  call void @llvm.dbg.value(metadata i32 0, metadata !1304, metadata !DIExpression()), !dbg !1301
SUSAN: inst:  %0 = sext i32 %n to i64, !dbg !1115
SUSAN: inst:  %1 = sext i32 %m to i64, !dbg !1115
SUSAN: inst:  %2 = sext i32 %n to i64, !dbg !1115
SUSAN: inst:  %3 = sext i32 %n to i64, !dbg !1115
SUSAN: inst:  br label %for.cond, !dbg !1115
SUSAN: inst:  call void @llvm.dbg.value(metadata i64 %indvars.iv3, metadata !1304, metadata !DIExpression()), !dbg !1301
i:  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc8 ], [ 0, %entry ], !dbg !1117
j:  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124
SUSAN: inst:  %cmp = icmp slt i64 %indvars.iv3, %1, !dbg !1118
i:  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc8 ], [ 0, %entry ], !dbg !1117
j:  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124
SUSAN: inst:  br i1 %cmp, label %for.body, label %for.end10, !dbg !1120
i:  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc8 ], [ 0, %entry ], !dbg !1117
j:  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124
SUSAN: inst:  call void @llvm.dbg.value(metadata i32 0, metadata !1311, metadata !DIExpression()), !dbg !1301
i:  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc8 ], [ 0, %entry ], !dbg !1117
j:  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124
SUSAN: inst:  br label %for.cond1, !dbg !1122
i:  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc8 ], [ 0, %entry ], !dbg !1117
j:  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124
SUSAN: inst:  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124
i:  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc8 ], [ 0, %entry ], !dbg !1117
j:  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124
SUSAN: inst:  call void @llvm.dbg.value(metadata i64 %indvars.iv, metadata !1311, metadata !DIExpression()), !dbg !1301
i:  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc8 ], [ 0, %entry ], !dbg !1117
j:  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124
SUSAN: inst:  %cmp2 = icmp slt i64 %indvars.iv, %0, !dbg !1125
i:  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc8 ], [ 0, %entry ], !dbg !1117
j:  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124
SUSAN: inst:  br i1 %cmp2, label %for.body3, label %for.end, !dbg !1127
i:  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc8 ], [ 0, %entry ], !dbg !1117
j:  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124
SUSAN: inst:  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !1128
i:  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc8 ], [ 0, %entry ], !dbg !1117
j:  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124
SUSAN: inst:  %5 = mul nsw i64 %indvars.iv3, %2, !dbg !1130
i:  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc8 ], [ 0, %entry ], !dbg !1117
j:  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124
SUSAN: inst:  %6 = add nsw i64 %5, %indvars.iv, !dbg !1131
i:  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc8 ], [ 0, %entry ], !dbg !1117
j:  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124
SUSAN: inst:  %arrayidx = getelementptr inbounds double, double* %B, i64 %6, !dbg !1132
i:  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc8 ], [ 0, %entry ], !dbg !1117
j:  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124
SUSAN: inst:  %7 = load double, double* %arrayidx, align 8, !dbg !1132
i:  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc8 ], [ 0, %entry ], !dbg !1117
j:  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124
SUSAN: inst:  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %4, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), double %7), !dbg !1133
i:  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc8 ], [ 0, %entry ], !dbg !1117
j:  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124
SUSAN: inst:  %8 = mul nsw i64 %indvars.iv3, %3, !dbg !1134
i:  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc8 ], [ 0, %entry ], !dbg !1117
j:  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124
SUSAN: inst:  %9 = add nsw i64 %8, %indvars.iv, !dbg !1136
i:  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc8 ], [ 0, %entry ], !dbg !1117
j:  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124
SUSAN: inst:  %10 = trunc i64 %9 to i32, !dbg !1137
i:  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc8 ], [ 0, %entry ], !dbg !1117
j:  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124
SUSAN: inst:  %rem = srem i32 %10, 20, !dbg !1137
i:  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc8 ], [ 0, %entry ], !dbg !1117
j:  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124
SUSAN: inst:  %cmp6 = icmp eq i32 %rem, 0, !dbg !1138
i:  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc8 ], [ 0, %entry ], !dbg !1117
j:  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124
SUSAN: inst:  br i1 %cmp6, label %if.then, label %if.end, !dbg !1139
i:  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc8 ], [ 0, %entry ], !dbg !1117
j:  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124
SUSAN: inst:  %11 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !1140
i:  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc8 ], [ 0, %entry ], !dbg !1117
j:  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124
SUSAN: inst:  %call7 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %11, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !1141
i:  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc8 ], [ 0, %entry ], !dbg !1117
j:  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124
SUSAN: inst:  br label %if.end, !dbg !1141
i:  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc8 ], [ 0, %entry ], !dbg !1117
j:  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124
SUSAN: inst:  br label %for.inc, !dbg !1142
i:  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc8 ], [ 0, %entry ], !dbg !1117
j:  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124
SUSAN: inst:  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !1143
i:  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc8 ], [ 0, %entry ], !dbg !1117
j:  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !1143
SUSAN: inst:  call void @llvm.dbg.value(metadata i32 undef, metadata !1311, metadata !DIExpression(DW_OP_plus_uconst, 1, DW_OP_stack_value)), !dbg !1301
i:  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc8 ], [ 0, %entry ], !dbg !1117
j:  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !1143
SUSAN: inst:  br label %for.cond1, !dbg !1144, !llvm.loop !1145
i:  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc8 ], [ 0, %entry ], !dbg !1117
j:  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !1143
SUSAN: inst:  br label %for.inc8, !dbg !1146
i:  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc8 ], [ 0, %entry ], !dbg !1117
j:  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124
SUSAN: inst:  %indvars.iv.next4 = add nuw nsw i64 %indvars.iv3, 1, !dbg !1147
i:  %indvars.iv.next4 = add nuw nsw i64 %indvars.iv3, 1, !dbg !1147
j:  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124
SUSAN: inst:  call void @llvm.dbg.value(metadata i32 undef, metadata !1304, metadata !DIExpression(DW_OP_plus_uconst, 1, DW_OP_stack_value)), !dbg !1301
i:  %indvars.iv.next4 = add nuw nsw i64 %indvars.iv3, 1, !dbg !1147
j:  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124
SUSAN: inst:  br label %for.cond, !dbg !1148, !llvm.loop !1149
i:  %indvars.iv.next4 = add nuw nsw i64 %indvars.iv3, 1, !dbg !1147
j:  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124
SUSAN: inst:  %12 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !1151
i:  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc8 ], [ 0, %entry ], !dbg !1117
j:  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124
SUSAN: inst:  %call11 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %12, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !1152
i:  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc8 ], [ 0, %entry ], !dbg !1117
j:  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124
SUSAN: inst:  ret void, !dbg !1153
i:  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc8 ], [ 0, %entry ], !dbg !1117
j:  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124
=========================SUSAN: IR NAMING=====================
i32 %m -> m
i32 %n -> n
double* %B -> B
  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc8 ], [ 0, %entry ], !dbg !1117 -> i
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124 -> j
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !1143 -> j
  %indvars.iv.next4 = add nuw nsw i64 %indvars.iv3, 1, !dbg !1147 -> i
SUSAN: getting value name for: i32 %m
inst from IRNaming: i32 %m
original name : m
returning name: m
SUSAN: getting value name for: i32 %n
inst from IRNaming: i32 %n
original name : n
returning name: n
SUSAN: getting value name for: double* %B
inst from IRNaming: double* %B
original name : B
returning name: B
SUSAN: getting value name for:   %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc8 ], [ 0, %entry ], !dbg !1117
inst from IRNaming:   %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc8 ], [ 0, %entry ], !dbg !1117
original name : i
returning name: i
SUSAN: declaring varName 5298: i
SUSAN: declared locals:
SUSAN: declaring 3252:   %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc8 ], [ 0, %entry ], !dbg !1117
SUSAN: getting value name for:   %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc8 ], [ 0, %entry ], !dbg !1117
inst from IRNaming:   %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc8 ], [ 0, %entry ], !dbg !1117
original name : i
returning name: i
SUSAN: declaring with reconstructed name 3286: i
SUSAN: inst at 5950:   %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc8 ], [ 0, %entry ], !dbg !1117
SUSAN: declaring   %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc8 ], [ 0, %entry ], !dbg !1117
SUSAN: printing type at 5937: i64
SUSAN: getting value name for:   %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124
inst from IRNaming:   %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124
original name : j
returning name: j
SUSAN: declaring varName 5298: j
SUSAN: declared locals:
i
SUSAN: declaring 3252:   %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124
SUSAN: getting value name for:   %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124
inst from IRNaming:   %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124
original name : j
returning name: j
SUSAN: declaring with reconstructed name 3286: j
SUSAN: inst at 5950:   %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124
SUSAN: declaring   %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124
SUSAN: printing type at 5937: i64
SUSAN: getting value name for:   %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !1143
inst from IRNaming:   %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !1143
original name : j
returning name: j
SUSAN: declaring varName 5298: j
SUSAN: getting value name for:   %indvars.iv.next4 = add nuw nsw i64 %indvars.iv3, 1, !dbg !1147
inst from IRNaming:   %indvars.iv.next4 = add nuw nsw i64 %indvars.iv3, 1, !dbg !1147
original name : i
returning name: i
SUSAN: declaring varName 5298: i
SUSAN: getting value name for:   %call11 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %12, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !1152
SUSAN: declaring varName 5298: call11
SUSAN: declared locals:
i
j
SUSAN: declaring 3252:   %call11 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %12, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !1152
SUSAN: getting value name for:   %call11 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %12, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !1152
SUSAN: inst at 5950:   %call11 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %12, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !1152
SUSAN: declaring   %call11 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %12, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !1152
SUSAN: printing type at 5937: i32
SUSAN: am I here 6807??
Linear Region with entry block: entry
SUSAN: printing bb:entry
CBEBackend: printing bb 7082 entry
printing unconditional branch   br label %for.cond, !dbg !1115
Loop Region with entry block: for.cond
term 6818:   br i1 %cmp, label %for.body, label %for.end10, !dbg !1120
SUSAN: condrelatedinst:  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc8 ], [ 0, %entry ], !dbg !1117
SUSAN: found IV 784  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc8 ], [ 0, %entry ], !dbg !1117
SUSAN: condrelatedinst:  %cmp = icmp slt i64 %indvars.iv3, %1, !dbg !1118
SUSAN: found IV 784  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc8 ], [ 0, %entry ], !dbg !1117
SUSAN: declaring 3252:   %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc8 ], [ 0, %entry ], !dbg !1117
SUSAN: getting value name for:   %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc8 ], [ 0, %entry ], !dbg !1117
inst from IRNaming:   %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc8 ], [ 0, %entry ], !dbg !1117
original name : i
returning name: i
SUSAN: declaring with reconstructed name 3286: i
CBackend: writeOperand 3595: i64 0
CBackend: writeoperand here 3674? 
SUSAN: getting value name for:   %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc8 ], [ 0, %entry ], !dbg !1117
inst from IRNaming:   %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc8 ], [ 0, %entry ], !dbg !1117
original name : i
returning name: i
SUSAN: visiting cast:   %1 = sext i32 %m to i64, !dbg !1115
CBackend: writeOperand 3595: i32 %m
SUSAN: getting value name for: i32 %m
inst from IRNaming: i32 %m
original name : m
returning name: m
CBackend: writeoperand here 3674? 
SUSAN: declaring 3252:   %indvars.iv.next4 = add nuw nsw i64 %indvars.iv3, 1, !dbg !1147
SUSAN: getting value name for:   %indvars.iv.next4 = add nuw nsw i64 %indvars.iv3, 1, !dbg !1147
inst from IRNaming:   %indvars.iv.next4 = add nuw nsw i64 %indvars.iv3, 1, !dbg !1147
original name : i
returning name: i
SUSAN: declaring with reconstructed name 3286: i
SUSAN: getting value name for:   %indvars.iv.next4 = add nuw nsw i64 %indvars.iv3, 1, !dbg !1147
inst from IRNaming:   %indvars.iv.next4 = add nuw nsw i64 %indvars.iv3, 1, !dbg !1147
original name : i
returning name: i
CBackend: writeOperand 3595:   %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc8 ], [ 0, %entry ], !dbg !1117
SUSAN: found IV 784  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc8 ], [ 0, %entry ], !dbg !1117
SUSAN: found IV 784  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc8 ], [ 0, %entry ], !dbg !1117
SUSAN: found IV 784  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc8 ], [ 0, %entry ], !dbg !1117
SUSAN: getting value name for:   %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc8 ], [ 0, %entry ], !dbg !1117
inst from IRNaming:   %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc8 ], [ 0, %entry ], !dbg !1117
original name : i
returning name: i
SUSAN: found IV 784  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc8 ], [ 0, %entry ], !dbg !1117
CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595: i64 1
CBackend: writeoperand here 3674? 
Linear Region with entry block: for.body
SUSAN: printing bb:for.body
CBEBackend: printing bb 7082 for.body
SUSAN: found IV 784  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc8 ], [ 0, %entry ], !dbg !1117
SUSAN: found IV 784  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc8 ], [ 0, %entry ], !dbg !1117
printing unconditional branch   br label %for.cond1, !dbg !1122
Loop Region with entry block: for.cond1
term 6818:   br i1 %cmp2, label %for.body3, label %for.end, !dbg !1127
SUSAN: condrelatedinst:  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124
SUSAN: condrelatedinst:  %cmp2 = icmp slt i64 %indvars.iv, %0, !dbg !1125
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124
SUSAN: declaring 3252:   %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124
SUSAN: getting value name for:   %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124
inst from IRNaming:   %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124
original name : j
returning name: j
SUSAN: declaring with reconstructed name 3286: j
CBackend: writeOperand 3595: i64 0
CBackend: writeoperand here 3674? 
SUSAN: getting value name for:   %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124
inst from IRNaming:   %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124
original name : j
returning name: j
SUSAN: visiting cast:   %0 = sext i32 %n to i64, !dbg !1115
CBackend: writeOperand 3595: i32 %n
SUSAN: getting value name for: i32 %n
inst from IRNaming: i32 %n
original name : n
returning name: n
CBackend: writeoperand here 3674? 
SUSAN: declaring 3252:   %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !1143
SUSAN: getting value name for:   %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !1143
inst from IRNaming:   %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !1143
original name : j
returning name: j
SUSAN: declaring with reconstructed name 3286: j
SUSAN: getting value name for:   %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !1143
inst from IRNaming:   %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !1143
original name : j
returning name: j
CBackend: writeOperand 3595:   %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124
SUSAN: getting value name for:   %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124
inst from IRNaming:   %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124
original name : j
returning name: j
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124
CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595: i64 1
CBackend: writeoperand here 3674? 
IfElse Region with entry block: for.body3
thenSubRegions : 
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124
SUSAN: declaring 3252:   %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %4, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), double %7), !dbg !1133
SUSAN: getting value name for:   %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %4, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), double %7), !dbg !1133
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124
SUSAN: printing type name for call at 6805
SUSAN: getting value name for:   %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %4, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), double %7), !dbg !1133
CBackend: writeOperand 3595: 
declare dso_local i32 @fprintf(%struct._IO_FILE*, i8*, ...) #6

SUSAN: getting value name for: 
declare dso_local i32 @fprintf(%struct._IO_FILE*, i8*, ...) #6

CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595:   %4 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !1128
CBackend: writeOperand 3595: i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0)
SUSAN: first index is struct or array type
SUSAN: printing Ptr 9975 @.str = private unnamed_addr constant [8 x i8] c"%0.2lf \00", align 1
SUSAN: getting value name for: @.str = private unnamed_addr constant [8 x i8] c"%0.2lf \00", align 1
CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595:   %7 = load double, double* %arrayidx, align 8, !dbg !1132
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124
SUSAN: loadInst:   %7 = load double, double* %arrayidx, align 8, !dbg !1132
SUSAN: GEPINST:   %arrayidx = getelementptr inbounds double, double* %B, i64 %6, !dbg !1132
SUSAN: dereferenceTimes = 1
SUSAN: printing GEP:   %arrayidx = getelementptr inbounds double, double* %B, i64 %6, !dbg !1132
SUSAN: accessMemory true
SUSAN: first index is integer/pointertype type
SUSAN: writing ptr 10000:double* %B
SUSAN: writing ptr 9994: double* %B
SUSAN: getting value name for: double* %B
inst from IRNaming: double* %B
original name : B
returning name: B
CBackend: writeOperand 3595:   %6 = add nsw i64 %5, %indvars.iv, !dbg !1131
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124
CBackend: writeOperand 3595:   %5 = mul nsw i64 %indvars.iv3, %2, !dbg !1130
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124
CBackend: writeOperand 3595:   %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc8 ], [ 0, %entry ], !dbg !1117
SUSAN: found IV 784  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc8 ], [ 0, %entry ], !dbg !1117
SUSAN: found IV 784  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc8 ], [ 0, %entry ], !dbg !1117
SUSAN: found IV 784  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc8 ], [ 0, %entry ], !dbg !1117
SUSAN: getting value name for:   %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc8 ], [ 0, %entry ], !dbg !1117
inst from IRNaming:   %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc8 ], [ 0, %entry ], !dbg !1117
original name : i
returning name: i
SUSAN: found IV 784  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc8 ], [ 0, %entry ], !dbg !1117
CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595:   %2 = sext i32 %n to i64, !dbg !1115
SUSAN: visiting cast:   %2 = sext i32 %n to i64, !dbg !1115
CBackend: writeOperand 3595: i32 %n
SUSAN: getting value name for: i32 %n
inst from IRNaming: i32 %n
original name : n
returning name: n
CBackend: writeoperand here 3674? 
CBackend: writeoperand here 3674? 
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124
CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595:   %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124
SUSAN: getting value name for:   %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124
inst from IRNaming:   %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124
original name : j
returning name: j
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124
CBackend: writeoperand here 3674? 
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124
CBackend: writeoperand here 3674? 
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124
CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595:   %cmp6 = icmp eq i32 %rem, 0, !dbg !1138
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124
CBackend: writeOperand 3595:   %rem = srem i32 %10, 20, !dbg !1137
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124
CBackend: writeOperand 3595:   %10 = trunc i64 %9 to i32, !dbg !1137
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124
SUSAN: visiting cast:   %10 = trunc i64 %9 to i32, !dbg !1137
CBackend: writeOperand 3595:   %9 = add nsw i64 %8, %indvars.iv, !dbg !1136
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124
CBackend: writeOperand 3595:   %8 = mul nsw i64 %indvars.iv3, %3, !dbg !1134
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124
CBackend: writeOperand 3595:   %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc8 ], [ 0, %entry ], !dbg !1117
SUSAN: found IV 784  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc8 ], [ 0, %entry ], !dbg !1117
SUSAN: found IV 784  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc8 ], [ 0, %entry ], !dbg !1117
SUSAN: found IV 784  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc8 ], [ 0, %entry ], !dbg !1117
SUSAN: getting value name for:   %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc8 ], [ 0, %entry ], !dbg !1117
inst from IRNaming:   %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc8 ], [ 0, %entry ], !dbg !1117
original name : i
returning name: i
SUSAN: found IV 784  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc8 ], [ 0, %entry ], !dbg !1117
CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595:   %3 = sext i32 %n to i64, !dbg !1115
SUSAN: visiting cast:   %3 = sext i32 %n to i64, !dbg !1115
CBackend: writeOperand 3595: i32 %n
SUSAN: getting value name for: i32 %n
inst from IRNaming: i32 %n
original name : n
returning name: n
CBackend: writeoperand here 3674? 
CBackend: writeoperand here 3674? 
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124
CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595:   %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124
SUSAN: getting value name for:   %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124
inst from IRNaming:   %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124
original name : j
returning name: j
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124
CBackend: writeoperand here 3674? 
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124
CBackend: writeoperand here 3674? 
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124
CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595: i32 20
CBackend: writeoperand here 3674? 
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124
CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595: i32 0
CBackend: writeoperand here 3674? 
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124
CBackend: writeoperand here 3674? 
Linear Region with entry block: if.then
SUSAN: printing bb:if.then
CBEBackend: printing bb 7082 if.then
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124
SUSAN: printing instruction   %call7 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %11, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !1141 at 6678
CBackend: writeOperand 3595: 
declare dso_local i32 @fprintf(%struct._IO_FILE*, i8*, ...) #6

SUSAN: getting value name for: 
declare dso_local i32 @fprintf(%struct._IO_FILE*, i8*, ...) #6

CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595:   %11 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !1140
CBackend: writeOperand 3595: i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)
SUSAN: first index is struct or array type
SUSAN: printing Ptr 9975 @.str.1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
SUSAN: getting value name for: @.str.1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
CBackend: writeoperand here 3674? 
printing unconditional branch   br label %if.end, !dbg !1141
SUSAN: printing bb:if.end
CBEBackend: printing bb 7082 if.end
printing unconditional branch   br label %for.inc, !dbg !1142
CBERegion: printing latchBB for.inc
CBERegion: I 316:   %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !1143
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124
CBERegion: I 316:   call void @llvm.dbg.value(metadata i32 undef, metadata !1311, metadata !DIExpression(DW_OP_plus_uconst, 1, DW_OP_stack_value)), !dbg !1301
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124
CBERegion: I 316:   br label %for.cond1, !dbg !1144, !llvm.loop !1145
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124
SUSAN: found IV 784  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1124
Linear Region with entry block: for.end
SUSAN: printing bb:for.end
CBEBackend: printing bb 7082 for.end
printing unconditional branch   br label %for.inc8, !dbg !1146
CBERegion: printing latchBB for.inc8
CBERegion: I 316:   %indvars.iv.next4 = add nuw nsw i64 %indvars.iv3, 1, !dbg !1147
SUSAN: found IV 784  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc8 ], [ 0, %entry ], !dbg !1117
CBERegion: I 316:   call void @llvm.dbg.value(metadata i32 undef, metadata !1304, metadata !DIExpression(DW_OP_plus_uconst, 1, DW_OP_stack_value)), !dbg !1301
SUSAN: found IV 784  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc8 ], [ 0, %entry ], !dbg !1117
SUSAN: found IV 784  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc8 ], [ 0, %entry ], !dbg !1117
CBERegion: I 316:   br label %for.cond, !dbg !1148, !llvm.loop !1149
SUSAN: found IV 784  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc8 ], [ 0, %entry ], !dbg !1117
SUSAN: found IV 784  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc8 ], [ 0, %entry ], !dbg !1117
Linear Region with entry block: for.end10
SUSAN: printing bb:for.end10
CBEBackend: printing bb 7082 for.end10
SUSAN: printing instruction   %call11 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %12, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !1152 at 6678
CBackend: writeOperand 3595: 
declare dso_local i32 @fprintf(%struct._IO_FILE*, i8*, ...) #6

SUSAN: getting value name for: 
declare dso_local i32 @fprintf(%struct._IO_FILE*, i8*, ...) #6

CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595:   %12 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !1151
CBackend: writeOperand 3595: i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)
SUSAN: first index is struct or array type
SUSAN: printing Ptr 9975 @.str.1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
SUSAN: getting value name for: @.str.1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
CBackend: writeoperand here 3674? 
CBackend: iterating function 1759: free
CBackend: iterating function 1759: fprintf
CBackend: iterating function 1759: _ZL10num_blocksii
CBackend: printing function 1770_ZL10num_blocksii
=========LOOP PROFILES=========
SUSAN: BB:
entry:
  call void @llvm.dbg.value(metadata i32 %num, metadata !1110, metadata !DIExpression()), !dbg !1111
  call void @llvm.dbg.value(metadata i32 %factor, metadata !1112, metadata !DIExpression()), !dbg !1111
  %add = add nsw i32 %num, %factor, !dbg !1113
  %sub = sub nsw i32 %add, 1, !dbg !1114
  %div = sdiv i32 %sub, %factor, !dbg !1115
  ret i32 %div, !dbg !1116

SUSAN: entry block is a linear region! entry
SUSAN: CI at 1400:   call void @llvm.dbg.value(metadata i32 %num, metadata !1347, metadata !DIExpression()), !dbg !1348
SUSAN: CI at 1400:   call void @llvm.dbg.value(metadata i32 %factor, metadata !1349, metadata !DIExpression()), !dbg !1348
========== IV MAP==========
SUSAN: headPHI:   %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
SUSAN: phi:   %j.1 = phi i32 [ 0, %for.body9 ], [ %inc30, %for.inc29 ], !dbg !1155
currInst :  %add = add nsw i32 %num, %factor, !dbg !1113
currInst :  %sub = sub nsw i32 %add, 1, !dbg !1114
currInst :  %div = sdiv i32 %sub, %factor, !dbg !1115
SUSAN: add () to inst:   %add = add nsw i32 %num, %factor, !dbg !1113
currInst :  %sub = sub nsw i32 %add, 1, !dbg !1114
currInst :  %div = sdiv i32 %sub, %factor, !dbg !1115
SUSAN: add () to inst:   %sub = sub nsw i32 %add, 1, !dbg !1114
currInst :  %div = sdiv i32 %sub, %factor, !dbg !1115
currInst :  ret i32 %div, !dbg !1116
SUSAN: getting value name for: 
; Function Attrs: noinline nounwind uwtable
define internal i32 @_ZL10num_blocksii(i32 %num, i32 %factor) #5 !dbg !1344 {
entry:
  call void @llvm.dbg.value(metadata i32 %num, metadata !1347, metadata !DIExpression()), !dbg !1348
  call void @llvm.dbg.value(metadata i32 %factor, metadata !1349, metadata !DIExpression()), !dbg !1348
  %add = add nsw i32 %num, %factor, !dbg !1350
  %sub = sub nsw i32 %add, 1, !dbg !1351
  %div = sdiv i32 %sub, %factor, !dbg !1352
  ret i32 %div, !dbg !1353
}

SUSAN: found argument 6346: i32 %num
CBackend: varname: num
  call void @llvm.dbg.value(metadata i32 %num, metadata !1347, metadata !DIExpression()), !dbg !1348
SUSAN: found argument 6346: i32 %factor
CBackend: varname: factor
  call void @llvm.dbg.value(metadata i32 %factor, metadata !1349, metadata !DIExpression()), !dbg !1348
=========================SUSAN: IR NAMING BEFORE=====================
i32 %num -> num
i32 %factor -> factor
SUSAN: inst:  call void @llvm.dbg.value(metadata i32 %num, metadata !1347, metadata !DIExpression()), !dbg !1348
SUSAN: inst:  call void @llvm.dbg.value(metadata i32 %factor, metadata !1349, metadata !DIExpression()), !dbg !1348
SUSAN: inst:  %add = add nsw i32 %num, %factor, !dbg !1113
SUSAN: inst:  %sub = sub nsw i32 %add, 1, !dbg !1114
SUSAN: inst:  %div = sdiv i32 %sub, %factor, !dbg !1115
SUSAN: inst:  ret i32 %div, !dbg !1116
=========================SUSAN: IR NAMING=====================
i32 %num -> num
i32 %factor -> factor
SUSAN: getting value name for: i32 %num
inst from IRNaming: i32 %num
original name : num
returning name: num
SUSAN: getting value name for: i32 %factor
inst from IRNaming: i32 %factor
original name : factor
returning name: factor
SUSAN: am I here 6807??
Linear Region with entry block: entry
SUSAN: printing bb:entry
CBEBackend: printing bb 7082 entry
CBackend: writeOperand 3595:   %div = sdiv i32 %sub, %factor, !dbg !1115
CBackend: writeOperand 3595:   %sub = sub nsw i32 %add, 1, !dbg !1114
CBackend: writeOperand 3595:   %add = add nsw i32 %num, %factor, !dbg !1113
CBackend: writeOperand 3595: i32 %num
SUSAN: getting value name for: i32 %num
inst from IRNaming: i32 %num
original name : num
returning name: num
CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595: i32 %factor
SUSAN: getting value name for: i32 %factor
inst from IRNaming: i32 %factor
original name : factor
returning name: factor
CBackend: writeoperand here 3674? 
CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595: i32 1
CBackend: writeoperand here 3674? 
CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595: i32 %factor
SUSAN: getting value name for: i32 %factor
inst from IRNaming: i32 %factor
original name : factor
returning name: factor
CBackend: writeoperand here 3674? 
CBackend: writeoperand here 3674? 
CBackend: iterating function 1759: llvm.memcpy.p0i8.p0i8.i64
CBackend: iterating function 1759: cudaConfigureCall
CBackend: iterating function 1759: cudaMalloc
CBackend: iterating function 1759: _Z15kernel_contractiidPdS_.1
CBackend: printing function 1770_Z15kernel_contractiidPdS_.1
CBackend: here? 1175
SUSAN: found IV 784  %indvars.iv7 = phi i64 [ %indvars.iv.next8, %for.inc20 ], [ 0, %if.then ], !dbg !1125
term 6818:   br i1 %cmp3, label %for.body, label %for.end22, !dbg !1129
none omp loop ub:   %3 = sext i32 %m to i64, !dbg !1126
CBackend: here? 1175
SUSAN: phi:   %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
SUSAN: find IV 809
term 6818:   br i1 %exitcond, label %for.body7, label %for.end, !dbg !1136
none omp loop ub:   %wide.trip.count = sext i32 %m to i64, !dbg !1133
=========LOOP PROFILES=========
Loop: Loop at depth 1 containing: %for.cond<header><exiting>,%for.body,%for.cond5,%for.end,%for.inc20<latch>,%for.body7,%for.inc
    Loop at depth 2 containing: %for.cond5<header><exiting>,%for.body7,%for.inc<latch>

isomp: 0
Loop: Loop at depth 2 containing: %for.cond5<header><exiting>,%for.body7,%for.inc<latch>

isomp: 0
SUSAN: opnd0  %add = add i32 %mul, %threadIdx.x, !dbg !1117
SUSAN: opnd1i32 %n
SUSAN: LP->ub:   %3 = sext i32 %m to i64, !dbg !1126
SUSAN: upperbound:   %3 = sext i32 %m to i64, !dbg !1126
SUSAN: LP->ub:   %wide.trip.count = sext i32 %m to i64, !dbg !1133
SUSAN: upperbound:   %wide.trip.count = sext i32 %m to i64, !dbg !1133
SUSAN: opnd0  %indvars.iv7 = phi i64 [ %indvars.iv.next8, %for.inc20 ], [ 0, %if.then ], !dbg !1125
SUSAN: opnd1  %3 = sext i32 %m to i64, !dbg !1126
SUSAN: found IV 784  %indvars.iv7 = phi i64 [ %indvars.iv.next8, %for.inc20 ], [ 0, %if.then ], !dbg !1125
SUSAN: opnd0  %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
SUSAN: opnd1  %wide.trip.count = sext i32 %m to i64, !dbg !1133
SUSAN: phi:   %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
SUSAN: find IV 809
SUSAN: BB:
entry:
  call void @llvm.dbg.value(metadata i32 %n, metadata !1107, metadata !DIExpression()), !dbg !1111
  call void @llvm.dbg.value(metadata i32 %m, metadata !1112, metadata !DIExpression()), !dbg !1111
  call void @llvm.dbg.value(metadata double %alpha, metadata !1113, metadata !DIExpression()), !dbg !1111
  call void @llvm.dbg.value(metadata double* %B, metadata !1114, metadata !DIExpression()), !dbg !1111
  call void @llvm.dbg.value(metadata double* %A, metadata !1115, metadata !DIExpression()), !dbg !1111
  %mul = mul i32 %blockDim.x, %blockIdx.x, !dbg !1116
  %add = add i32 %mul, %threadIdx.x, !dbg !1117
  call void @llvm.dbg.value(metadata i32 %add, metadata !1118, metadata !DIExpression()), !dbg !1111
  %cmp = icmp slt i32 %add, %n, !dbg !1119
  br i1 %cmp, label %if.then, label %if.end, !dbg !1121

SUSAN: BB:
if.then:                                          ; preds = %entry
  call void @llvm.dbg.value(metadata i32 0, metadata !1122, metadata !DIExpression()), !dbg !1125
  %0 = sext i32 %m to i64, !dbg !1126
  %1 = sext i32 %n to i64, !dbg !1126
  %2 = sext i32 %add to i64, !dbg !1126
  %3 = sext i32 %m to i64, !dbg !1126
  %4 = sext i32 %n to i64, !dbg !1126
  %5 = sext i32 %add to i64, !dbg !1126
  br label %for.cond, !dbg !1126

SUSAN: BB:
for.cond:                                         ; preds = %for.inc20, %if.then
  %indvars.iv7 = phi i64 [ %indvars.iv.next8, %for.inc20 ], [ 0, %if.then ], !dbg !1125
  %indvars.iv = phi i32 [ %indvars.iv.next, %for.inc20 ], [ 1, %if.then ], !dbg !1125
  call void @llvm.dbg.value(metadata i64 %indvars.iv7, metadata !1122, metadata !DIExpression()), !dbg !1125
  %6 = sext i32 %indvars.iv to i64, !dbg !1127
  %cmp3 = icmp slt i64 %indvars.iv7, %3, !dbg !1127
  br i1 %cmp3, label %for.body, label %for.end22, !dbg !1129

SUSAN: BB:
for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.value(metadata i64 %indvars.iv7, metadata !1130, metadata !DIExpression(DW_OP_plus_uconst, 1, DW_OP_stack_value)), !dbg !1132
  %wide.trip.count = sext i32 %m to i64, !dbg !1133
  br label %for.cond5, !dbg !1135

SUSAN: BB:
for.cond5:                                        ; preds = %for.inc, %for.body
  %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
  call void @llvm.dbg.value(metadata i64 %indvars.iv1, metadata !1130, metadata !DIExpression()), !dbg !1132
  %exitcond = icmp ne i64 %indvars.iv1, %wide.trip.count, !dbg !1133
  br i1 %exitcond, label %for.body7, label %for.end, !dbg !1136

SUSAN: BB:
for.body7:                                        ; preds = %for.cond5
  %7 = mul nsw i64 %indvars.iv1, %0, !dbg !1137
  %8 = add nsw i64 %7, %indvars.iv7, !dbg !1138
  %arrayidx = getelementptr inbounds double, double* %A, i64 %8, !dbg !1139
  %9 = load double, double* %arrayidx, align 8, !dbg !1139
  %10 = mul nsw i64 %indvars.iv1, %1, !dbg !1140
  %11 = add nsw i64 %10, %2, !dbg !1141
  %arrayidx13 = getelementptr inbounds double, double* %B, i64 %11, !dbg !1142
  %12 = load double, double* %arrayidx13, align 8, !dbg !1142
  %mul14 = fmul contract double %9, %12, !dbg !1143
  %13 = mul nsw i64 %indvars.iv7, %4, !dbg !1144
  %14 = add nsw i64 %13, %5, !dbg !1145
  %arrayidx18 = getelementptr inbounds double, double* %B, i64 %14, !dbg !1146
  %15 = load double, double* %arrayidx18, align 8, !dbg !1147
  %add19 = fadd contract double %15, %mul14, !dbg !1147
  store double %add19, double* %arrayidx18, align 8, !dbg !1147
  br label %for.inc, !dbg !1146

SUSAN: BB:
for.inc:                                          ; preds = %for.body7
  %indvars.iv.next2 = add nsw i64 %indvars.iv1, 1, !dbg !1148
  call void @llvm.dbg.value(metadata i32 undef, metadata !1130, metadata !DIExpression(DW_OP_plus_uconst, 1, DW_OP_stack_value)), !dbg !1132
  br label %for.cond5, !dbg !1149, !llvm.loop !1150

SUSAN: BB:
for.end:                                          ; preds = %for.cond5
  br label %for.inc20, !dbg !1151

SUSAN: BB:
for.inc20:                                        ; preds = %for.end
  %indvars.iv.next8 = add nuw nsw i64 %indvars.iv7, 1, !dbg !1152
  call void @llvm.dbg.value(metadata i32 undef, metadata !1122, metadata !DIExpression(DW_OP_plus_uconst, 1, DW_OP_stack_value)), !dbg !1125
  %indvars.iv.next = add nuw i32 %indvars.iv, 1, !dbg !1153
  br label %for.cond, !dbg !1153, !llvm.loop !1154

SUSAN: BB:
for.end22:                                        ; preds = %for.cond
  br label %if.end, !dbg !1156

SUSAN: BB:
if.end:                                           ; preds = %for.end22, %entry
  ret void, !dbg !1157

SUSAN: trying to get exit for loop: Loop at depth 1 containing: %for.cond<header><exiting>,%for.body,%for.cond5,%for.end,%for.inc20<latch>,%for.body7,%for.inc
    Loop at depth 2 containing: %for.cond5<header><exiting>,%for.body7,%for.inc<latch>

SUSAN exitBB: 
for.cond:                                         ; preds = %for.inc20, %if.then
  %indvars.iv7 = phi i64 [ %indvars.iv.next8, %for.inc20 ], [ 0, %if.then ], !dbg !1125
  %indvars.iv = phi i32 [ %indvars.iv.next, %for.inc20 ], [ 1, %if.then ], !dbg !1125
  call void @llvm.dbg.value(metadata i64 %indvars.iv7, metadata !1122, metadata !DIExpression()), !dbg !1125
  %6 = sext i32 %indvars.iv to i64, !dbg !1127
  %cmp3 = icmp slt i64 %indvars.iv7, %3, !dbg !1127
  br i1 %cmp3, label %for.body, label %for.end22, !dbg !1129

SUSAN: trying to get exit for loop: Loop at depth 2 containing: %for.cond5<header><exiting>,%for.body7,%for.inc<latch>

SUSAN exitBB: 
for.cond5:                                        ; preds = %for.inc, %for.body
  %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
  call void @llvm.dbg.value(metadata i64 %indvars.iv1, metadata !1130, metadata !DIExpression()), !dbg !1132
  %exitcond = icmp ne i64 %indvars.iv1, %wide.trip.count, !dbg !1133
  br i1 %exitcond, label %for.body7, label %for.end, !dbg !1136

SUSAN: entry block is an if-else region! entry
creating if-else region for entryBB: entry
1
1
SUSAN: marking only true branch
SUSAN: entry block is a linear region! if.then
CBERegion: including if.then in a linear region
CBERegion: nextBB 
if.then:                                          ; preds = %entry
  call void @llvm.dbg.value(metadata i32 0, metadata !1122, metadata !DIExpression()), !dbg !1125
  %0 = sext i32 %m to i64, !dbg !1126
  %1 = sext i32 %n to i64, !dbg !1126
  %2 = sext i32 %add to i64, !dbg !1126
  %3 = sext i32 %m to i64, !dbg !1126
  %4 = sext i32 %n to i64, !dbg !1126
  %5 = sext i32 %add to i64, !dbg !1126
  br label %for.cond, !dbg !1126

SUSAN: currbb 562: for.cond
CBackend: entryBB is a loop: for.cond
SUSAN: entry block is a loop region! for.cond
creating loop region for entryBB: for.cond
SUSAN: loop at 355 Loop at depth 1 containing: %for.cond<header><exiting>,%for.body,%for.cond5,%for.end,%for.inc20<latch>,%for.body7,%for.inc
    Loop at depth 2 containing: %for.cond5<header><exiting>,%for.body7,%for.inc<latch>

SUSAN: found IV 784  %indvars.iv7 = phi i64 [ %indvars.iv.next8, %for.inc20 ], [ 0, %if.then ], !dbg !1125
term 6818:   br i1 %cmp3, label %for.body, label %for.end22, !dbg !1129
CBERegion: startBB 393: 
for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.value(metadata i64 %indvars.iv7, metadata !1130, metadata !DIExpression(DW_OP_plus_uconst, 1, DW_OP_stack_value)), !dbg !1132
  %wide.trip.count = sext i32 %m to i64, !dbg !1133
  br label %for.cond5, !dbg !1135

CBERegion: here? 149
CBackend: entryBB is a loop: for.body
but not a header!
SUSAN: entry block is a linear region! for.body
CBERegion: including for.body in a linear region
CBERegion: nextBB 
for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.value(metadata i64 %indvars.iv7, metadata !1130, metadata !DIExpression(DW_OP_plus_uconst, 1, DW_OP_stack_value)), !dbg !1132
  %wide.trip.count = sext i32 %m to i64, !dbg !1133
  br label %for.cond5, !dbg !1135

SUSAN: nextRegionEntryBB for.cond5
for region: Loop at depth 1 containing: %for.cond<header><exiting>,%for.body,%for.cond5,%for.end,%for.inc20<latch>,%for.body7,%for.inc
    Loop at depth 2 containing: %for.cond5<header><exiting>,%for.body7,%for.inc<latch>

CBERegion: here? 149
CBackend: entryBB is a loop: for.cond5
SUSAN: entry block is a loop region! for.cond5
creating loop region for entryBB: for.cond5
SUSAN: loop at 355 Loop at depth 2 containing: %for.cond5<header><exiting>,%for.body7,%for.inc<latch>

SUSAN: phi:   %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
SUSAN: find IV 809
term 6818:   br i1 %exitcond, label %for.body7, label %for.end, !dbg !1136
CBERegion: startBB 393: 
for.body7:                                        ; preds = %for.cond5
  %7 = mul nsw i64 %indvars.iv1, %0, !dbg !1137
  %8 = add nsw i64 %7, %indvars.iv7, !dbg !1138
  %arrayidx = getelementptr inbounds double, double* %A, i64 %8, !dbg !1139
  %9 = load double, double* %arrayidx, align 8, !dbg !1139
  %10 = mul nsw i64 %indvars.iv1, %1, !dbg !1140
  %11 = add nsw i64 %10, %2, !dbg !1141
  %arrayidx13 = getelementptr inbounds double, double* %B, i64 %11, !dbg !1142
  %12 = load double, double* %arrayidx13, align 8, !dbg !1142
  %mul14 = fmul contract double %9, %12, !dbg !1143
  %13 = mul nsw i64 %indvars.iv7, %4, !dbg !1144
  %14 = add nsw i64 %13, %5, !dbg !1145
  %arrayidx18 = getelementptr inbounds double, double* %B, i64 %14, !dbg !1146
  %15 = load double, double* %arrayidx18, align 8, !dbg !1147
  %add19 = fadd contract double %15, %mul14, !dbg !1147
  store double %add19, double* %arrayidx18, align 8, !dbg !1147
  br label %for.inc, !dbg !1146

CBERegion: here? 149
CBackend: entryBB is a loop: for.body7
but not a header!
SUSAN: entry block is a linear region! for.body7
CBERegion: including for.body7 in a linear region
CBERegion: nextBB 
for.body7:                                        ; preds = %for.cond5
  %7 = mul nsw i64 %indvars.iv1, %0, !dbg !1137
  %8 = add nsw i64 %7, %indvars.iv7, !dbg !1138
  %arrayidx = getelementptr inbounds double, double* %A, i64 %8, !dbg !1139
  %9 = load double, double* %arrayidx, align 8, !dbg !1139
  %10 = mul nsw i64 %indvars.iv1, %1, !dbg !1140
  %11 = add nsw i64 %10, %2, !dbg !1141
  %arrayidx13 = getelementptr inbounds double, double* %B, i64 %11, !dbg !1142
  %12 = load double, double* %arrayidx13, align 8, !dbg !1142
  %mul14 = fmul contract double %9, %12, !dbg !1143
  %13 = mul nsw i64 %indvars.iv7, %4, !dbg !1144
  %14 = add nsw i64 %13, %5, !dbg !1145
  %arrayidx18 = getelementptr inbounds double, double* %B, i64 %14, !dbg !1146
  %15 = load double, double* %arrayidx18, align 8, !dbg !1147
  %add19 = fadd contract double %15, %mul14, !dbg !1147
  store double %add19, double* %arrayidx18, align 8, !dbg !1147
  br label %for.inc, !dbg !1146

SUSAN: nextRegionEntryBB for.inc
for region: Loop at depth 2 containing: %for.cond5<header><exiting>,%for.body7,%for.inc<latch>

SUSAN: nextRegionEntryBB for.end
for region: Loop at depth 1 containing: %for.cond<header><exiting>,%for.body,%for.cond5,%for.end,%for.inc20<latch>,%for.body7,%for.inc
    Loop at depth 2 containing: %for.cond5<header><exiting>,%for.body7,%for.inc<latch>

CBERegion: here? 149
CBackend: entryBB is a loop: for.end
but not a header!
SUSAN: entry block is a linear region! for.end
CBERegion: including for.end in a linear region
CBERegion: nextBB 
for.end:                                          ; preds = %for.cond5
  br label %for.inc20, !dbg !1151

SUSAN: nextRegionEntryBB for.inc20
for region: Loop at depth 1 containing: %for.cond<header><exiting>,%for.body,%for.cond5,%for.end,%for.inc20<latch>,%for.body7,%for.inc
    Loop at depth 2 containing: %for.cond5<header><exiting>,%for.body7,%for.inc<latch>

SUSAN: currbb 562: for.end22
SUSAN: entry block is a linear region! for.end22
CBERegion: including for.end22 in a linear region
CBERegion: nextBB 
for.end22:                                        ; preds = %for.cond
  br label %if.end, !dbg !1156

SUSAN: currbb 562: if.end
=================SUSAN: END OF marking region : entry==================
SUSAN: nextRegionEntryBB if.end
SUSAN: entry block is a linear region! if.end
SUSAN: found IV 784  %indvars.iv7 = phi i64 [ %indvars.iv.next8, %for.inc20 ], [ 0, %if.then ], !dbg !1125
SUSAN: phi:   %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
SUSAN: find IV 809
SUSAN: found IV 784  %indvars.iv7 = phi i64 [ %indvars.iv.next8, %for.inc20 ], [ 0, %if.then ], !dbg !1125
SUSAN: found IV 784  %indvars.iv7 = phi i64 [ %indvars.iv.next8, %for.inc20 ], [ 0, %if.then ], !dbg !1125
SUSAN: found IV 784  %indvars.iv7 = phi i64 [ %indvars.iv.next8, %for.inc20 ], [ 0, %if.then ], !dbg !1125
SUSAN: phi:   %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
SUSAN: find IV 809
SUSAN: found IV 784  %indvars.iv7 = phi i64 [ %indvars.iv.next8, %for.inc20 ], [ 0, %if.then ], !dbg !1125
SUSAN: found IV 784  %indvars.iv7 = phi i64 [ %indvars.iv.next8, %for.inc20 ], [ 0, %if.then ], !dbg !1125
SUSAN: found IV 784  %indvars.iv7 = phi i64 [ %indvars.iv.next8, %for.inc20 ], [ 0, %if.then ], !dbg !1125
SUSAN: found IV 784  %indvars.iv7 = phi i64 [ %indvars.iv.next8, %for.inc20 ], [ 0, %if.then ], !dbg !1125
SUSAN: found IV 784  %indvars.iv7 = phi i64 [ %indvars.iv.next8, %for.inc20 ], [ 0, %if.then ], !dbg !1125
SUSAN: found IV 784  %indvars.iv7 = phi i64 [ %indvars.iv.next8, %for.inc20 ], [ 0, %if.then ], !dbg !1125
SUSAN: found IV 784  %indvars.iv7 = phi i64 [ %indvars.iv.next8, %for.inc20 ], [ 0, %if.then ], !dbg !1125
SUSAN: found IV 784  %indvars.iv7 = phi i64 [ %indvars.iv.next8, %for.inc20 ], [ 0, %if.then ], !dbg !1125
SUSAN: phi:   %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
SUSAN: find IV 809
SUSAN: phi:   %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
SUSAN: find IV 809
SUSAN: phi:   %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
SUSAN: find IV 809
SUSAN: phi:   %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
SUSAN: find IV 809
SUSAN: found IV 784  %indvars.iv7 = phi i64 [ %indvars.iv.next8, %for.inc20 ], [ 0, %if.then ], !dbg !1125
SUSAN: found IV 784  %indvars.iv7 = phi i64 [ %indvars.iv.next8, %for.inc20 ], [ 0, %if.then ], !dbg !1125
SUSAN: found IV 784  %indvars.iv7 = phi i64 [ %indvars.iv.next8, %for.inc20 ], [ 0, %if.then ], !dbg !1125
SUSAN: found IV 784  %indvars.iv7 = phi i64 [ %indvars.iv.next8, %for.inc20 ], [ 0, %if.then ], !dbg !1125
SUSAN: found IV 784  %indvars.iv7 = phi i64 [ %indvars.iv.next8, %for.inc20 ], [ 0, %if.then ], !dbg !1125
SUSAN: found IV 784  %indvars.iv7 = phi i64 [ %indvars.iv.next8, %for.inc20 ], [ 0, %if.then ], !dbg !1125
SUSAN: found IV 784  %indvars.iv7 = phi i64 [ %indvars.iv.next8, %for.inc20 ], [ 0, %if.then ], !dbg !1125
SUSAN: found IV 784  %indvars.iv7 = phi i64 [ %indvars.iv.next8, %for.inc20 ], [ 0, %if.then ], !dbg !1125
SUSAN: found IV 784  %indvars.iv7 = phi i64 [ %indvars.iv.next8, %for.inc20 ], [ 0, %if.then ], !dbg !1125
SUSAN: phi:   %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
SUSAN: find IV 809
SUSAN: phi:   %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
SUSAN: find IV 809
SUSAN: phi:   %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
SUSAN: find IV 809
SUSAN: phi:   %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
SUSAN: find IV 809
SUSAN: phi:   %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
SUSAN: find IV 809
SUSAN: phi:   %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
SUSAN: find IV 809
SUSAN: phi:   %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
SUSAN: find IV 809
SUSAN: phi:   %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
SUSAN: find IV 809
SUSAN: phi:   %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
SUSAN: find IV 809
SUSAN: CI at 1400:   call void @llvm.dbg.value(metadata i32 %n, metadata !1354, metadata !DIExpression()), !dbg !1356
SUSAN: CI at 1400:   call void @llvm.dbg.value(metadata i32 %m, metadata !1357, metadata !DIExpression()), !dbg !1356
SUSAN: CI at 1400:   call void @llvm.dbg.value(metadata double %alpha, metadata !1358, metadata !DIExpression()), !dbg !1356
SUSAN: CI at 1400:   call void @llvm.dbg.value(metadata double* %B, metadata !1359, metadata !DIExpression()), !dbg !1356
SUSAN: CI at 1400:   call void @llvm.dbg.value(metadata double* %A, metadata !1360, metadata !DIExpression()), !dbg !1356
SUSAN: CI at 1400:   call void @llvm.dbg.value(metadata i32 %add, metadata !1363, metadata !DIExpression()), !dbg !1356
SUSAN: CI at 1400:   call void @llvm.dbg.value(metadata i32 0, metadata !1367, metadata !DIExpression()), !dbg !1370
SUSAN: CI at 1400:   call void @llvm.dbg.value(metadata i64 %indvars.iv7, metadata !1367, metadata !DIExpression()), !dbg !1370
SUSAN: CI at 1400:   call void @llvm.dbg.value(metadata i64 %indvars.iv7, metadata !1375, metadata !DIExpression(DW_OP_plus_uconst, 1, DW_OP_stack_value)), !dbg !1377
SUSAN: CI at 1400:   call void @llvm.dbg.value(metadata i64 %indvars.iv1, metadata !1375, metadata !DIExpression()), !dbg !1377
SUSAN: CI at 1400:   call void @llvm.dbg.value(metadata i32 undef, metadata !1375, metadata !DIExpression(DW_OP_plus_uconst, 1, DW_OP_stack_value)), !dbg !1377
SUSAN: CI at 1400:   call void @llvm.dbg.value(metadata i32 undef, metadata !1367, metadata !DIExpression(DW_OP_plus_uconst, 1, DW_OP_stack_value)), !dbg !1370
SUSAN: found IV 784  %indvars.iv7 = phi i64 [ %indvars.iv.next8, %for.inc20 ], [ 0, %if.then ], !dbg !1125
SUSAN: found IV 784  %indvars.iv7 = phi i64 [ %indvars.iv.next8, %for.inc20 ], [ 0, %if.then ], !dbg !1125
SUSAN: found IV 784  %indvars.iv7 = phi i64 [ %indvars.iv.next8, %for.inc20 ], [ 0, %if.then ], !dbg !1125
SUSAN: phi:   %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
SUSAN: find IV 809
SUSAN: phi:   %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
SUSAN: find IV 809
========== IV MAP==========
SUSAN: headPHI:   %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
SUSAN: phi:   %j.1 = phi i32 [ 0, %for.body9 ], [ %inc30, %for.inc29 ], !dbg !1155
SUSAN: headPHI:   %indvars.iv7 = phi i64 [ %indvars.iv.next8, %for.inc20 ], [ 0, %if.then ], !dbg !1125
SUSAN: phi:   %indvars.iv = phi i32 [ %indvars.iv.next, %for.inc20 ], [ 1, %if.then ], !dbg !1125
SUSAN: found LP for L:Loop at depth 1 containing: %for.cond<header><exiting>,%for.body,%for.cond5,%for.end,%for.inc20<latch>,%for.body7,%for.inc
    Loop at depth 2 containing: %for.cond5<header><exiting>,%for.body7,%for.inc<latch>

SUSAN: found LP for L:Loop at depth 2 containing: %for.cond5<header><exiting>,%for.body7,%for.inc<latch>

currInst :  %mul = mul i32 %blockDim.x, %blockIdx.x, !dbg !1116
currInst :  %add = add i32 %mul, %threadIdx.x, !dbg !1117
currInst :  %cmp = icmp slt i32 %add, %n, !dbg !1119
currInst :  br i1 %cmp, label %if.then, label %if.end, !dbg !1121
currInst :  %0 = sext i32 %m to i64, !dbg !1126
currInst :  %7 = mul nsw i64 %indvars.iv1, %0, !dbg !1137
currInst :  %8 = add nsw i64 %7, %indvars.iv7, !dbg !1138
currInst :  %arrayidx = getelementptr inbounds double, double* %A, i64 %8, !dbg !1139
currInst :  %9 = load double, double* %arrayidx, align 8, !dbg !1139
currInst :  %mul14 = fmul contract double %9, %12, !dbg !1143
currInst :  %add19 = fadd contract double %15, %mul14, !dbg !1147
currInst :  store double %add19, double* %arrayidx18, align 8, !dbg !1147
currInst :  %1 = sext i32 %n to i64, !dbg !1126
currInst :  %10 = mul nsw i64 %indvars.iv1, %1, !dbg !1140
currInst :  %11 = add nsw i64 %10, %2, !dbg !1141
currInst :  %arrayidx13 = getelementptr inbounds double, double* %B, i64 %11, !dbg !1142
currInst :  %12 = load double, double* %arrayidx13, align 8, !dbg !1142
currInst :  %mul14 = fmul contract double %9, %12, !dbg !1143
currInst :  %add19 = fadd contract double %15, %mul14, !dbg !1147
currInst :  store double %add19, double* %arrayidx18, align 8, !dbg !1147
currInst :  %2 = sext i32 %add to i64, !dbg !1126
currInst :  %11 = add nsw i64 %10, %2, !dbg !1141
currInst :  %arrayidx13 = getelementptr inbounds double, double* %B, i64 %11, !dbg !1142
currInst :  %12 = load double, double* %arrayidx13, align 8, !dbg !1142
currInst :  %mul14 = fmul contract double %9, %12, !dbg !1143
currInst :  %add19 = fadd contract double %15, %mul14, !dbg !1147
currInst :  store double %add19, double* %arrayidx18, align 8, !dbg !1147
currInst :  %3 = sext i32 %m to i64, !dbg !1126
currInst :  %cmp3 = icmp slt i64 %indvars.iv7, %3, !dbg !1127
currInst :  br i1 %cmp3, label %for.body, label %for.end22, !dbg !1129
currInst :  %4 = sext i32 %n to i64, !dbg !1126
currInst :  %13 = mul nsw i64 %indvars.iv7, %4, !dbg !1144
currInst :  %14 = add nsw i64 %13, %5, !dbg !1145
currInst :  %arrayidx18 = getelementptr inbounds double, double* %B, i64 %14, !dbg !1146
currInst :  store double %add19, double* %arrayidx18, align 8, !dbg !1147
currInst :  %5 = sext i32 %add to i64, !dbg !1126
currInst :  %14 = add nsw i64 %13, %5, !dbg !1145
currInst :  %arrayidx18 = getelementptr inbounds double, double* %B, i64 %14, !dbg !1146
currInst :  store double %add19, double* %arrayidx18, align 8, !dbg !1147
currInst :  %6 = sext i32 %indvars.iv to i64, !dbg !1127
currInst :  %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
currInst :  %cmp3 = icmp slt i64 %indvars.iv7, %3, !dbg !1127
currInst :  br i1 %cmp3, label %for.body, label %for.end22, !dbg !1129
currInst :  %wide.trip.count = sext i32 %m to i64, !dbg !1133
currInst :  %exitcond = icmp ne i64 %indvars.iv1, %wide.trip.count, !dbg !1133
currInst :  br i1 %exitcond, label %for.body7, label %for.end, !dbg !1136
currInst :  %exitcond = icmp ne i64 %indvars.iv1, %wide.trip.count, !dbg !1133
currInst :  br i1 %exitcond, label %for.body7, label %for.end, !dbg !1136
currInst :  %7 = mul nsw i64 %indvars.iv1, %0, !dbg !1137
currInst :  %8 = add nsw i64 %7, %indvars.iv7, !dbg !1138
currInst :  %arrayidx = getelementptr inbounds double, double* %A, i64 %8, !dbg !1139
SUSAN: phi:   %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
SUSAN: find IV 809
SUSAN: add () to inst:   %7 = mul nsw i64 %indvars.iv1, %0, !dbg !1137
currInst :  %8 = add nsw i64 %7, %indvars.iv7, !dbg !1138
currInst :  %arrayidx = getelementptr inbounds double, double* %A, i64 %8, !dbg !1139
SUSAN: phi:   %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
SUSAN: find IV 809
SUSAN: add () to inst:   %8 = add nsw i64 %7, %indvars.iv7, !dbg !1138
currInst :  %arrayidx = getelementptr inbounds double, double* %A, i64 %8, !dbg !1139
currInst :  %9 = load double, double* %arrayidx, align 8, !dbg !1139
currInst :  %mul14 = fmul contract double %9, %12, !dbg !1143
currInst :  %add19 = fadd contract double %15, %mul14, !dbg !1147
currInst :  store double %add19, double* %arrayidx18, align 8, !dbg !1147
currInst :  %9 = load double, double* %arrayidx, align 8, !dbg !1139
currInst :  %mul14 = fmul contract double %9, %12, !dbg !1143
currInst :  %add19 = fadd contract double %15, %mul14, !dbg !1147
currInst :  store double %add19, double* %arrayidx18, align 8, !dbg !1147
currInst :  %10 = mul nsw i64 %indvars.iv1, %1, !dbg !1140
currInst :  %11 = add nsw i64 %10, %2, !dbg !1141
currInst :  %arrayidx13 = getelementptr inbounds double, double* %B, i64 %11, !dbg !1142
SUSAN: phi:   %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
SUSAN: find IV 809
SUSAN: add () to inst:   %10 = mul nsw i64 %indvars.iv1, %1, !dbg !1140
currInst :  %11 = add nsw i64 %10, %2, !dbg !1141
currInst :  %arrayidx13 = getelementptr inbounds double, double* %B, i64 %11, !dbg !1142
SUSAN: phi:   %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
SUSAN: find IV 809
SUSAN: add () to inst:   %11 = add nsw i64 %10, %2, !dbg !1141
currInst :  %arrayidx13 = getelementptr inbounds double, double* %B, i64 %11, !dbg !1142
currInst :  %12 = load double, double* %arrayidx13, align 8, !dbg !1142
currInst :  %mul14 = fmul contract double %9, %12, !dbg !1143
currInst :  %add19 = fadd contract double %15, %mul14, !dbg !1147
currInst :  store double %add19, double* %arrayidx18, align 8, !dbg !1147
currInst :  %12 = load double, double* %arrayidx13, align 8, !dbg !1142
currInst :  %mul14 = fmul contract double %9, %12, !dbg !1143
currInst :  %add19 = fadd contract double %15, %mul14, !dbg !1147
currInst :  store double %add19, double* %arrayidx18, align 8, !dbg !1147
currInst :  %mul14 = fmul contract double %9, %12, !dbg !1143
currInst :  %add19 = fadd contract double %15, %mul14, !dbg !1147
currInst :  store double %add19, double* %arrayidx18, align 8, !dbg !1147
currInst :  %13 = mul nsw i64 %indvars.iv7, %4, !dbg !1144
currInst :  %14 = add nsw i64 %13, %5, !dbg !1145
currInst :  %arrayidx18 = getelementptr inbounds double, double* %B, i64 %14, !dbg !1146
SUSAN: phi:   %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
SUSAN: find IV 809
SUSAN: add () to inst:   %13 = mul nsw i64 %indvars.iv7, %4, !dbg !1144
currInst :  %14 = add nsw i64 %13, %5, !dbg !1145
currInst :  %arrayidx18 = getelementptr inbounds double, double* %B, i64 %14, !dbg !1146
SUSAN: phi:   %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
SUSAN: find IV 809
SUSAN: add () to inst:   %14 = add nsw i64 %13, %5, !dbg !1145
currInst :  %arrayidx18 = getelementptr inbounds double, double* %B, i64 %14, !dbg !1146
currInst :  store double %add19, double* %arrayidx18, align 8, !dbg !1147
currInst :  %15 = load double, double* %arrayidx18, align 8, !dbg !1147
currInst :  %add19 = fadd contract double %15, %mul14, !dbg !1147
currInst :  store double %add19, double* %arrayidx18, align 8, !dbg !1147
currInst :  %add19 = fadd contract double %15, %mul14, !dbg !1147
currInst :  store double %add19, double* %arrayidx18, align 8, !dbg !1147
LP->LV 1694:   %indvars.iv7 = phi i64 [ %indvars.iv.next8, %for.inc20 ], [ 0, %if.then ], !dbg !1125
LP->L 1694: Loop at depth 1 containing: %for.cond<header><exiting>,%for.body,%for.cond5,%for.end,%for.inc20<latch>,%for.body7,%for.inc
    Loop at depth 2 containing: %for.cond5<header><exiting>,%for.body7,%for.inc<latch>

nestlevel: i
LP->LV 1694:   %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
LP->L 1694: Loop at depth 2 containing: %for.cond5<header><exiting>,%for.body7,%for.inc<latch>

nestlevel: j
SUSAN: getting value name for: 
; Function Attrs: convergent noinline nounwind
define dso_local void @_Z15kernel_contractiidPdS_.1(i32 %n, i32 %m, double %alpha, double* %B, double* %A, i32 %gridDim.x, i32 %gridDim.y, i32 %gridDim.z, i32 %blockDim.x, i32 %blockDim.y, i32 %blockDim.z, i32 %blockIdx.x, i32 %blockIdx.y, i32 %blockIdx.z, i32 %threadIdx.x, i32 %threadIdx.y, i32 %threadIdx.z) #9 {
entry:
  call void @llvm.dbg.value(metadata i32 %n, metadata !1354, metadata !DIExpression()), !dbg !1356
  call void @llvm.dbg.value(metadata i32 %m, metadata !1357, metadata !DIExpression()), !dbg !1356
  call void @llvm.dbg.value(metadata double %alpha, metadata !1358, metadata !DIExpression()), !dbg !1356
  call void @llvm.dbg.value(metadata double* %B, metadata !1359, metadata !DIExpression()), !dbg !1356
  call void @llvm.dbg.value(metadata double* %A, metadata !1360, metadata !DIExpression()), !dbg !1356
  %mul = mul i32 %blockDim.x, %blockIdx.x, !dbg !1361
  %add = add i32 %mul, %threadIdx.x, !dbg !1362
  call void @llvm.dbg.value(metadata i32 %add, metadata !1363, metadata !DIExpression()), !dbg !1356
  %cmp = icmp slt i32 %add, %n, !dbg !1364
  br i1 %cmp, label %if.then, label %if.end, !dbg !1366

if.then:                                          ; preds = %entry
  call void @llvm.dbg.value(metadata i32 0, metadata !1367, metadata !DIExpression()), !dbg !1370
  %0 = sext i32 %m to i64, !dbg !1371
  %1 = sext i32 %n to i64, !dbg !1371
  %2 = sext i32 %add to i64, !dbg !1371
  %3 = sext i32 %m to i64, !dbg !1371
  %4 = sext i32 %n to i64, !dbg !1371
  %5 = sext i32 %add to i64, !dbg !1371
  br label %for.cond, !dbg !1371

for.cond:                                         ; preds = %for.inc20, %if.then
  %indvars.iv7 = phi i64 [ %indvars.iv.next8, %for.inc20 ], [ 0, %if.then ], !dbg !1370
  %indvars.iv = phi i32 [ %indvars.iv.next, %for.inc20 ], [ 1, %if.then ], !dbg !1370
  call void @llvm.dbg.value(metadata i64 %indvars.iv7, metadata !1367, metadata !DIExpression()), !dbg !1370
  %6 = sext i32 %indvars.iv to i64, !dbg !1372
  %cmp3 = icmp slt i64 %indvars.iv7, %3, !dbg !1372
  br i1 %cmp3, label %for.body, label %for.end22, !dbg !1374

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.value(metadata i64 %indvars.iv7, metadata !1375, metadata !DIExpression(DW_OP_plus_uconst, 1, DW_OP_stack_value)), !dbg !1377
  %wide.trip.count = sext i32 %m to i64, !dbg !1378
  br label %for.cond5, !dbg !1380

for.cond5:                                        ; preds = %for.inc, %for.body
  %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1377
  call void @llvm.dbg.value(metadata i64 %indvars.iv1, metadata !1375, metadata !DIExpression()), !dbg !1377
  %exitcond = icmp ne i64 %indvars.iv1, %wide.trip.count, !dbg !1378
  br i1 %exitcond, label %for.body7, label %for.end, !dbg !1381

for.body7:                                        ; preds = %for.cond5
  %7 = mul nsw i64 %indvars.iv1, %0, !dbg !1382
  %8 = add nsw i64 %7, %indvars.iv7, !dbg !1383
  %arrayidx = getelementptr inbounds double, double* %A, i64 %8, !dbg !1384
  %9 = load double, double* %arrayidx, align 8, !dbg !1384
  %10 = mul nsw i64 %indvars.iv1, %1, !dbg !1385
  %11 = add nsw i64 %10, %2, !dbg !1386
  %arrayidx13 = getelementptr inbounds double, double* %B, i64 %11, !dbg !1387
  %12 = load double, double* %arrayidx13, align 8, !dbg !1387
  %mul14 = fmul contract double %9, %12, !dbg !1388
  %13 = mul nsw i64 %indvars.iv7, %4, !dbg !1389
  %14 = add nsw i64 %13, %5, !dbg !1390
  %arrayidx18 = getelementptr inbounds double, double* %B, i64 %14, !dbg !1391
  %15 = load double, double* %arrayidx18, align 8, !dbg !1392
  %add19 = fadd contract double %15, %mul14, !dbg !1392
  store double %add19, double* %arrayidx18, align 8, !dbg !1392
  br label %for.inc, !dbg !1391

for.inc:                                          ; preds = %for.body7
  %indvars.iv.next2 = add nsw i64 %indvars.iv1, 1, !dbg !1393
  call void @llvm.dbg.value(metadata i32 undef, metadata !1375, metadata !DIExpression(DW_OP_plus_uconst, 1, DW_OP_stack_value)), !dbg !1377
  br label %for.cond5, !dbg !1394, !llvm.loop !1395

for.end:                                          ; preds = %for.cond5
  br label %for.inc20, !dbg !1396

for.inc20:                                        ; preds = %for.end
  %indvars.iv.next8 = add nuw nsw i64 %indvars.iv7, 1, !dbg !1397
  call void @llvm.dbg.value(metadata i32 undef, metadata !1367, metadata !DIExpression(DW_OP_plus_uconst, 1, DW_OP_stack_value)), !dbg !1370
  %indvars.iv.next = add nuw i32 %indvars.iv, 1, !dbg !1398
  br label %for.cond, !dbg !1398, !llvm.loop !1399

for.end22:                                        ; preds = %for.cond
  br label %if.end, !dbg !1401

if.end:                                           ; preds = %for.end22, %entry
  ret void, !dbg !1402
}

SUSAN: found argument 6346: i32 %n
CBackend: varname: n
  call void @llvm.dbg.value(metadata i32 %n, metadata !1354, metadata !DIExpression()), !dbg !1356
SUSAN: found argument 6346: i32 %m
CBackend: varname: m
  call void @llvm.dbg.value(metadata i32 %m, metadata !1357, metadata !DIExpression()), !dbg !1356
SUSAN: found argument 6346: double %alpha
CBackend: varname: alpha
  call void @llvm.dbg.value(metadata double %alpha, metadata !1358, metadata !DIExpression()), !dbg !1356
SUSAN: found argument 6346: double* %B
CBackend: varname: B
  call void @llvm.dbg.value(metadata double* %B, metadata !1359, metadata !DIExpression()), !dbg !1356
SUSAN: found argument 6346: double* %A
CBackend: varname: A
  call void @llvm.dbg.value(metadata double* %A, metadata !1360, metadata !DIExpression()), !dbg !1356
SUSAN: getting value name for:   %indvars.iv7 = phi i64 [ %indvars.iv.next8, %for.inc20 ], [ 0, %if.then ], !dbg !1125
inst from IRNaming:   %indvars.iv7 = phi i64 [ %indvars.iv.next8, %for.inc20 ], [ 0, %if.then ], !dbg !1125
original name : i
returning name: i
SUSAN: phi related name: i
SUSAN: getting value name for:   %indvars.iv = phi i32 [ %indvars.iv.next, %for.inc20 ], [ 1, %if.then ], !dbg !1125
SUSAN: phi related name: indvars_2e_iv
SUSAN: getting value name for:   %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
inst from IRNaming:   %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
original name : k
returning name: k
SUSAN: phi related name: k
=========================SUSAN: IR NAMING BEFORE=====================
i32 %n -> n
i32 %m -> m
double %alpha -> alpha
double* %B -> B
double* %A -> A
  %indvars.iv7 = phi i64 [ %indvars.iv.next8, %for.inc20 ], [ 0, %if.then ], !dbg !1125 -> i
  %add = add i32 %mul, %threadIdx.x, !dbg !1117 -> j
  %6 = sext i32 %indvars.iv to i64, !dbg !1127 -> k
  %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132 -> k
  %indvars.iv.next2 = add nsw i64 %indvars.iv1, 1, !dbg !1148 -> k
  %indvars.iv.next8 = add nuw nsw i64 %indvars.iv7, 1, !dbg !1152 -> i
  %indvars.iv.next = add nuw i32 %indvars.iv, 1, !dbg !1153 -> indvars_2e_iv
SUSAN: inst:  %indvars.iv7 = phi i64 [ %indvars.iv.next8, %for.inc20 ], [ 0, %if.then ], !dbg !1125
i:  %indvars.iv7 = phi i64 [ %indvars.iv.next8, %for.inc20 ], [ 0, %if.then ], !dbg !1125
indvars_2e_iv:  %indvars.iv.next = add nuw i32 %indvars.iv, 1, !dbg !1153
j:  %add = add i32 %mul, %threadIdx.x, !dbg !1117
k:  %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
SUSAN: inst:  call void @llvm.dbg.value(metadata i32 %n, metadata !1354, metadata !DIExpression()), !dbg !1356
SUSAN: inst:  call void @llvm.dbg.value(metadata i32 %m, metadata !1357, metadata !DIExpression()), !dbg !1356
SUSAN: inst:  call void @llvm.dbg.value(metadata double %alpha, metadata !1358, metadata !DIExpression()), !dbg !1356
SUSAN: inst:  call void @llvm.dbg.value(metadata double* %B, metadata !1359, metadata !DIExpression()), !dbg !1356
SUSAN: inst:  call void @llvm.dbg.value(metadata double* %A, metadata !1360, metadata !DIExpression()), !dbg !1356
SUSAN: inst:  %mul = mul i32 %blockDim.x, %blockIdx.x, !dbg !1116
SUSAN: inst:  %add = add i32 %mul, %threadIdx.x, !dbg !1117
j:  %add = add i32 %mul, %threadIdx.x, !dbg !1117
SUSAN: inst:  call void @llvm.dbg.value(metadata i32 %add, metadata !1363, metadata !DIExpression()), !dbg !1356
j:  %add = add i32 %mul, %threadIdx.x, !dbg !1117
SUSAN: inst:  %cmp = icmp slt i32 %add, %n, !dbg !1119
j:  %add = add i32 %mul, %threadIdx.x, !dbg !1117
SUSAN: inst:  br i1 %cmp, label %if.then, label %if.end, !dbg !1121
j:  %add = add i32 %mul, %threadIdx.x, !dbg !1117
SUSAN: inst:  call void @llvm.dbg.value(metadata i32 0, metadata !1367, metadata !DIExpression()), !dbg !1370
j:  %add = add i32 %mul, %threadIdx.x, !dbg !1117
SUSAN: inst:  %0 = sext i32 %m to i64, !dbg !1126
j:  %add = add i32 %mul, %threadIdx.x, !dbg !1117
SUSAN: inst:  %1 = sext i32 %n to i64, !dbg !1126
j:  %add = add i32 %mul, %threadIdx.x, !dbg !1117
SUSAN: inst:  %2 = sext i32 %add to i64, !dbg !1126
j:  %add = add i32 %mul, %threadIdx.x, !dbg !1117
SUSAN: inst:  %3 = sext i32 %m to i64, !dbg !1126
j:  %add = add i32 %mul, %threadIdx.x, !dbg !1117
SUSAN: inst:  %4 = sext i32 %n to i64, !dbg !1126
j:  %add = add i32 %mul, %threadIdx.x, !dbg !1117
SUSAN: inst:  %5 = sext i32 %add to i64, !dbg !1126
j:  %add = add i32 %mul, %threadIdx.x, !dbg !1117
SUSAN: inst:  br label %for.cond, !dbg !1126
j:  %add = add i32 %mul, %threadIdx.x, !dbg !1117
SUSAN: inst:  %indvars.iv = phi i32 [ %indvars.iv.next, %for.inc20 ], [ 1, %if.then ], !dbg !1125
i:  %indvars.iv7 = phi i64 [ %indvars.iv.next8, %for.inc20 ], [ 0, %if.then ], !dbg !1125
indvars_2e_iv:  %indvars.iv.next = add nuw i32 %indvars.iv, 1, !dbg !1153
j:  %add = add i32 %mul, %threadIdx.x, !dbg !1117
k:  %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
SUSAN: inst:  call void @llvm.dbg.value(metadata i64 %indvars.iv7, metadata !1367, metadata !DIExpression()), !dbg !1370
i:  %indvars.iv7 = phi i64 [ %indvars.iv.next8, %for.inc20 ], [ 0, %if.then ], !dbg !1125
indvars_2e_iv:  %indvars.iv.next = add nuw i32 %indvars.iv, 1, !dbg !1153
j:  %add = add i32 %mul, %threadIdx.x, !dbg !1117
k:  %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
SUSAN: inst:  %6 = sext i32 %indvars.iv to i64, !dbg !1127
i:  %indvars.iv7 = phi i64 [ %indvars.iv.next8, %for.inc20 ], [ 0, %if.then ], !dbg !1125
indvars_2e_iv:  %indvars.iv.next = add nuw i32 %indvars.iv, 1, !dbg !1153
j:  %add = add i32 %mul, %threadIdx.x, !dbg !1117
k:  %6 = sext i32 %indvars.iv to i64, !dbg !1127
SUSAN: inst:  %cmp3 = icmp slt i64 %indvars.iv7, %3, !dbg !1127
i:  %indvars.iv7 = phi i64 [ %indvars.iv.next8, %for.inc20 ], [ 0, %if.then ], !dbg !1125
indvars_2e_iv:  %indvars.iv.next = add nuw i32 %indvars.iv, 1, !dbg !1153
j:  %add = add i32 %mul, %threadIdx.x, !dbg !1117
k:  %6 = sext i32 %indvars.iv to i64, !dbg !1127
SUSAN: inst:  br i1 %cmp3, label %for.body, label %for.end22, !dbg !1129
i:  %indvars.iv7 = phi i64 [ %indvars.iv.next8, %for.inc20 ], [ 0, %if.then ], !dbg !1125
indvars_2e_iv:  %indvars.iv.next = add nuw i32 %indvars.iv, 1, !dbg !1153
j:  %add = add i32 %mul, %threadIdx.x, !dbg !1117
k:  %6 = sext i32 %indvars.iv to i64, !dbg !1127
SUSAN: inst:  call void @llvm.dbg.value(metadata i64 %indvars.iv7, metadata !1375, metadata !DIExpression(DW_OP_plus_uconst, 1, DW_OP_stack_value)), !dbg !1377
i:  %indvars.iv7 = phi i64 [ %indvars.iv.next8, %for.inc20 ], [ 0, %if.then ], !dbg !1125
indvars_2e_iv:  %indvars.iv.next = add nuw i32 %indvars.iv, 1, !dbg !1153
j:  %add = add i32 %mul, %threadIdx.x, !dbg !1117
k:  %6 = sext i32 %indvars.iv to i64, !dbg !1127
SUSAN: inst:  %wide.trip.count = sext i32 %m to i64, !dbg !1133
i:  %indvars.iv7 = phi i64 [ %indvars.iv.next8, %for.inc20 ], [ 0, %if.then ], !dbg !1125
indvars_2e_iv:  %indvars.iv.next = add nuw i32 %indvars.iv, 1, !dbg !1153
j:  %add = add i32 %mul, %threadIdx.x, !dbg !1117
k:  %6 = sext i32 %indvars.iv to i64, !dbg !1127
SUSAN: inst:  br label %for.cond5, !dbg !1135
i:  %indvars.iv7 = phi i64 [ %indvars.iv.next8, %for.inc20 ], [ 0, %if.then ], !dbg !1125
indvars_2e_iv:  %indvars.iv.next = add nuw i32 %indvars.iv, 1, !dbg !1153
j:  %add = add i32 %mul, %threadIdx.x, !dbg !1117
k:  %6 = sext i32 %indvars.iv to i64, !dbg !1127
SUSAN: inst:  %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
i:  %indvars.iv7 = phi i64 [ %indvars.iv.next8, %for.inc20 ], [ 0, %if.then ], !dbg !1125
indvars_2e_iv:  %indvars.iv.next = add nuw i32 %indvars.iv, 1, !dbg !1153
j:  %add = add i32 %mul, %threadIdx.x, !dbg !1117
k:  %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
SUSAN: inst:  call void @llvm.dbg.value(metadata i64 %indvars.iv1, metadata !1375, metadata !DIExpression()), !dbg !1377
i:  %indvars.iv7 = phi i64 [ %indvars.iv.next8, %for.inc20 ], [ 0, %if.then ], !dbg !1125
indvars_2e_iv:  %indvars.iv.next = add nuw i32 %indvars.iv, 1, !dbg !1153
j:  %add = add i32 %mul, %threadIdx.x, !dbg !1117
k:  %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
SUSAN: inst:  %exitcond = icmp ne i64 %indvars.iv1, %wide.trip.count, !dbg !1133
i:  %indvars.iv7 = phi i64 [ %indvars.iv.next8, %for.inc20 ], [ 0, %if.then ], !dbg !1125
indvars_2e_iv:  %indvars.iv.next = add nuw i32 %indvars.iv, 1, !dbg !1153
j:  %add = add i32 %mul, %threadIdx.x, !dbg !1117
k:  %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
SUSAN: inst:  br i1 %exitcond, label %for.body7, label %for.end, !dbg !1136
i:  %indvars.iv7 = phi i64 [ %indvars.iv.next8, %for.inc20 ], [ 0, %if.then ], !dbg !1125
indvars_2e_iv:  %indvars.iv.next = add nuw i32 %indvars.iv, 1, !dbg !1153
j:  %add = add i32 %mul, %threadIdx.x, !dbg !1117
k:  %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
SUSAN: inst:  %7 = mul nsw i64 %indvars.iv1, %0, !dbg !1137
i:  %indvars.iv7 = phi i64 [ %indvars.iv.next8, %for.inc20 ], [ 0, %if.then ], !dbg !1125
indvars_2e_iv:  %indvars.iv.next = add nuw i32 %indvars.iv, 1, !dbg !1153
j:  %add = add i32 %mul, %threadIdx.x, !dbg !1117
k:  %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
SUSAN: inst:  %8 = add nsw i64 %7, %indvars.iv7, !dbg !1138
i:  %indvars.iv7 = phi i64 [ %indvars.iv.next8, %for.inc20 ], [ 0, %if.then ], !dbg !1125
indvars_2e_iv:  %indvars.iv.next = add nuw i32 %indvars.iv, 1, !dbg !1153
j:  %add = add i32 %mul, %threadIdx.x, !dbg !1117
k:  %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
SUSAN: inst:  %arrayidx = getelementptr inbounds double, double* %A, i64 %8, !dbg !1139
i:  %indvars.iv7 = phi i64 [ %indvars.iv.next8, %for.inc20 ], [ 0, %if.then ], !dbg !1125
indvars_2e_iv:  %indvars.iv.next = add nuw i32 %indvars.iv, 1, !dbg !1153
j:  %add = add i32 %mul, %threadIdx.x, !dbg !1117
k:  %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
SUSAN: inst:  %9 = load double, double* %arrayidx, align 8, !dbg !1139
i:  %indvars.iv7 = phi i64 [ %indvars.iv.next8, %for.inc20 ], [ 0, %if.then ], !dbg !1125
indvars_2e_iv:  %indvars.iv.next = add nuw i32 %indvars.iv, 1, !dbg !1153
j:  %add = add i32 %mul, %threadIdx.x, !dbg !1117
k:  %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
SUSAN: inst:  %10 = mul nsw i64 %indvars.iv1, %1, !dbg !1140
i:  %indvars.iv7 = phi i64 [ %indvars.iv.next8, %for.inc20 ], [ 0, %if.then ], !dbg !1125
indvars_2e_iv:  %indvars.iv.next = add nuw i32 %indvars.iv, 1, !dbg !1153
j:  %add = add i32 %mul, %threadIdx.x, !dbg !1117
k:  %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
SUSAN: inst:  %11 = add nsw i64 %10, %2, !dbg !1141
i:  %indvars.iv7 = phi i64 [ %indvars.iv.next8, %for.inc20 ], [ 0, %if.then ], !dbg !1125
indvars_2e_iv:  %indvars.iv.next = add nuw i32 %indvars.iv, 1, !dbg !1153
j:  %add = add i32 %mul, %threadIdx.x, !dbg !1117
k:  %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
SUSAN: inst:  %arrayidx13 = getelementptr inbounds double, double* %B, i64 %11, !dbg !1142
i:  %indvars.iv7 = phi i64 [ %indvars.iv.next8, %for.inc20 ], [ 0, %if.then ], !dbg !1125
indvars_2e_iv:  %indvars.iv.next = add nuw i32 %indvars.iv, 1, !dbg !1153
j:  %add = add i32 %mul, %threadIdx.x, !dbg !1117
k:  %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
SUSAN: inst:  %12 = load double, double* %arrayidx13, align 8, !dbg !1142
i:  %indvars.iv7 = phi i64 [ %indvars.iv.next8, %for.inc20 ], [ 0, %if.then ], !dbg !1125
indvars_2e_iv:  %indvars.iv.next = add nuw i32 %indvars.iv, 1, !dbg !1153
j:  %add = add i32 %mul, %threadIdx.x, !dbg !1117
k:  %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
SUSAN: inst:  %mul14 = fmul contract double %9, %12, !dbg !1143
i:  %indvars.iv7 = phi i64 [ %indvars.iv.next8, %for.inc20 ], [ 0, %if.then ], !dbg !1125
indvars_2e_iv:  %indvars.iv.next = add nuw i32 %indvars.iv, 1, !dbg !1153
j:  %add = add i32 %mul, %threadIdx.x, !dbg !1117
k:  %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
SUSAN: inst:  %13 = mul nsw i64 %indvars.iv7, %4, !dbg !1144
i:  %indvars.iv7 = phi i64 [ %indvars.iv.next8, %for.inc20 ], [ 0, %if.then ], !dbg !1125
indvars_2e_iv:  %indvars.iv.next = add nuw i32 %indvars.iv, 1, !dbg !1153
j:  %add = add i32 %mul, %threadIdx.x, !dbg !1117
k:  %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
SUSAN: inst:  %14 = add nsw i64 %13, %5, !dbg !1145
i:  %indvars.iv7 = phi i64 [ %indvars.iv.next8, %for.inc20 ], [ 0, %if.then ], !dbg !1125
indvars_2e_iv:  %indvars.iv.next = add nuw i32 %indvars.iv, 1, !dbg !1153
j:  %add = add i32 %mul, %threadIdx.x, !dbg !1117
k:  %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
SUSAN: inst:  %arrayidx18 = getelementptr inbounds double, double* %B, i64 %14, !dbg !1146
i:  %indvars.iv7 = phi i64 [ %indvars.iv.next8, %for.inc20 ], [ 0, %if.then ], !dbg !1125
indvars_2e_iv:  %indvars.iv.next = add nuw i32 %indvars.iv, 1, !dbg !1153
j:  %add = add i32 %mul, %threadIdx.x, !dbg !1117
k:  %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
SUSAN: inst:  %15 = load double, double* %arrayidx18, align 8, !dbg !1147
i:  %indvars.iv7 = phi i64 [ %indvars.iv.next8, %for.inc20 ], [ 0, %if.then ], !dbg !1125
indvars_2e_iv:  %indvars.iv.next = add nuw i32 %indvars.iv, 1, !dbg !1153
j:  %add = add i32 %mul, %threadIdx.x, !dbg !1117
k:  %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
SUSAN: inst:  %add19 = fadd contract double %15, %mul14, !dbg !1147
i:  %indvars.iv7 = phi i64 [ %indvars.iv.next8, %for.inc20 ], [ 0, %if.then ], !dbg !1125
indvars_2e_iv:  %indvars.iv.next = add nuw i32 %indvars.iv, 1, !dbg !1153
j:  %add = add i32 %mul, %threadIdx.x, !dbg !1117
k:  %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
SUSAN: inst:  store double %add19, double* %arrayidx18, align 8, !dbg !1147
i:  %indvars.iv7 = phi i64 [ %indvars.iv.next8, %for.inc20 ], [ 0, %if.then ], !dbg !1125
indvars_2e_iv:  %indvars.iv.next = add nuw i32 %indvars.iv, 1, !dbg !1153
j:  %add = add i32 %mul, %threadIdx.x, !dbg !1117
k:  %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
SUSAN: inst:  br label %for.inc, !dbg !1146
i:  %indvars.iv7 = phi i64 [ %indvars.iv.next8, %for.inc20 ], [ 0, %if.then ], !dbg !1125
indvars_2e_iv:  %indvars.iv.next = add nuw i32 %indvars.iv, 1, !dbg !1153
j:  %add = add i32 %mul, %threadIdx.x, !dbg !1117
k:  %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
SUSAN: inst:  %indvars.iv.next2 = add nsw i64 %indvars.iv1, 1, !dbg !1148
i:  %indvars.iv7 = phi i64 [ %indvars.iv.next8, %for.inc20 ], [ 0, %if.then ], !dbg !1125
indvars_2e_iv:  %indvars.iv.next = add nuw i32 %indvars.iv, 1, !dbg !1153
j:  %add = add i32 %mul, %threadIdx.x, !dbg !1117
k:  %indvars.iv.next2 = add nsw i64 %indvars.iv1, 1, !dbg !1148
SUSAN: inst:  call void @llvm.dbg.value(metadata i32 undef, metadata !1375, metadata !DIExpression(DW_OP_plus_uconst, 1, DW_OP_stack_value)), !dbg !1377
i:  %indvars.iv7 = phi i64 [ %indvars.iv.next8, %for.inc20 ], [ 0, %if.then ], !dbg !1125
indvars_2e_iv:  %indvars.iv.next = add nuw i32 %indvars.iv, 1, !dbg !1153
j:  %add = add i32 %mul, %threadIdx.x, !dbg !1117
k:  %indvars.iv.next2 = add nsw i64 %indvars.iv1, 1, !dbg !1148
SUSAN: inst:  br label %for.cond5, !dbg !1149, !llvm.loop !1150
i:  %indvars.iv7 = phi i64 [ %indvars.iv.next8, %for.inc20 ], [ 0, %if.then ], !dbg !1125
indvars_2e_iv:  %indvars.iv.next = add nuw i32 %indvars.iv, 1, !dbg !1153
j:  %add = add i32 %mul, %threadIdx.x, !dbg !1117
k:  %indvars.iv.next2 = add nsw i64 %indvars.iv1, 1, !dbg !1148
SUSAN: inst:  br label %for.inc20, !dbg !1151
i:  %indvars.iv7 = phi i64 [ %indvars.iv.next8, %for.inc20 ], [ 0, %if.then ], !dbg !1125
indvars_2e_iv:  %indvars.iv.next = add nuw i32 %indvars.iv, 1, !dbg !1153
j:  %add = add i32 %mul, %threadIdx.x, !dbg !1117
k:  %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
SUSAN: inst:  %indvars.iv.next8 = add nuw nsw i64 %indvars.iv7, 1, !dbg !1152
i:  %indvars.iv.next8 = add nuw nsw i64 %indvars.iv7, 1, !dbg !1152
indvars_2e_iv:  %indvars.iv.next = add nuw i32 %indvars.iv, 1, !dbg !1153
j:  %add = add i32 %mul, %threadIdx.x, !dbg !1117
k:  %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
SUSAN: inst:  call void @llvm.dbg.value(metadata i32 undef, metadata !1367, metadata !DIExpression(DW_OP_plus_uconst, 1, DW_OP_stack_value)), !dbg !1370
i:  %indvars.iv.next8 = add nuw nsw i64 %indvars.iv7, 1, !dbg !1152
indvars_2e_iv:  %indvars.iv.next = add nuw i32 %indvars.iv, 1, !dbg !1153
j:  %add = add i32 %mul, %threadIdx.x, !dbg !1117
k:  %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
SUSAN: inst:  %indvars.iv.next = add nuw i32 %indvars.iv, 1, !dbg !1153
i:  %indvars.iv.next8 = add nuw nsw i64 %indvars.iv7, 1, !dbg !1152
indvars_2e_iv:  %indvars.iv.next = add nuw i32 %indvars.iv, 1, !dbg !1153
j:  %add = add i32 %mul, %threadIdx.x, !dbg !1117
k:  %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
SUSAN: inst:  br label %for.cond, !dbg !1153, !llvm.loop !1154
i:  %indvars.iv.next8 = add nuw nsw i64 %indvars.iv7, 1, !dbg !1152
indvars_2e_iv:  %indvars.iv.next = add nuw i32 %indvars.iv, 1, !dbg !1153
j:  %add = add i32 %mul, %threadIdx.x, !dbg !1117
k:  %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
SUSAN: inst:  br label %if.end, !dbg !1156
i:  %indvars.iv7 = phi i64 [ %indvars.iv.next8, %for.inc20 ], [ 0, %if.then ], !dbg !1125
indvars_2e_iv:  %indvars.iv.next = add nuw i32 %indvars.iv, 1, !dbg !1153
j:  %add = add i32 %mul, %threadIdx.x, !dbg !1117
k:  %6 = sext i32 %indvars.iv to i64, !dbg !1127
SUSAN: inst:  ret void, !dbg !1157
i:  %indvars.iv7 = phi i64 [ %indvars.iv.next8, %for.inc20 ], [ 0, %if.then ], !dbg !1125
indvars_2e_iv:  %indvars.iv.next = add nuw i32 %indvars.iv, 1, !dbg !1153
j:  %add = add i32 %mul, %threadIdx.x, !dbg !1117
k:  %6 = sext i32 %indvars.iv to i64, !dbg !1127
=========================SUSAN: IR NAMING=====================
i32 %n -> n
i32 %m -> m
double %alpha -> alpha
double* %B -> B
double* %A -> A
  %indvars.iv7 = phi i64 [ %indvars.iv.next8, %for.inc20 ], [ 0, %if.then ], !dbg !1125 -> i
  %add = add i32 %mul, %threadIdx.x, !dbg !1117 -> j
  %6 = sext i32 %indvars.iv to i64, !dbg !1127 -> k
  %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132 -> k
  %indvars.iv.next2 = add nsw i64 %indvars.iv1, 1, !dbg !1148 -> k
  %indvars.iv.next8 = add nuw nsw i64 %indvars.iv7, 1, !dbg !1152 -> i
  %indvars.iv.next = add nuw i32 %indvars.iv, 1, !dbg !1153 -> indvars_2e_iv
SUSAN: getting value name for: i32 %n
inst from IRNaming: i32 %n
original name : n
returning name: n
SUSAN: getting value name for: i32 %m
inst from IRNaming: i32 %m
original name : m
returning name: m
SUSAN: getting value name for: double %alpha
inst from IRNaming: double %alpha
original name : alpha
returning name: alpha
SUSAN: getting value name for: double* %B
inst from IRNaming: double* %B
original name : B
returning name: B
SUSAN: getting value name for: double* %A
inst from IRNaming: double* %A
original name : A
returning name: A
SUSAN: getting value name for: i32 %gridDim.x
SUSAN: getting value name for: i32 %gridDim.y
SUSAN: getting value name for: i32 %gridDim.z
SUSAN: getting value name for: i32 %blockDim.x
SUSAN: getting value name for: i32 %blockDim.y
SUSAN: getting value name for: i32 %blockDim.z
SUSAN: getting value name for: i32 %blockIdx.x
SUSAN: getting value name for: i32 %blockIdx.y
SUSAN: getting value name for: i32 %blockIdx.z
SUSAN: getting value name for: i32 %threadIdx.x
SUSAN: getting value name for: i32 %threadIdx.y
SUSAN: getting value name for: i32 %threadIdx.z
SUSAN: getting value name for:   %add = add i32 %mul, %threadIdx.x, !dbg !1117
inst from IRNaming:   %add = add i32 %mul, %threadIdx.x, !dbg !1117
original name : j
returning name: j
SUSAN: declaring varName 5298: j
SUSAN: declared locals:
SUSAN: declaring 3252:   %add = add i32 %mul, %threadIdx.x, !dbg !1117
SUSAN: getting value name for:   %add = add i32 %mul, %threadIdx.x, !dbg !1117
inst from IRNaming:   %add = add i32 %mul, %threadIdx.x, !dbg !1117
original name : j
returning name: j
SUSAN: declaring with reconstructed name 3286: j
SUSAN: inst at 5950:   %add = add i32 %mul, %threadIdx.x, !dbg !1117
SUSAN: declaring   %add = add i32 %mul, %threadIdx.x, !dbg !1117
SUSAN: printing type at 5937: i32
SUSAN: getting value name for:   %indvars.iv7 = phi i64 [ %indvars.iv.next8, %for.inc20 ], [ 0, %if.then ], !dbg !1125
inst from IRNaming:   %indvars.iv7 = phi i64 [ %indvars.iv.next8, %for.inc20 ], [ 0, %if.then ], !dbg !1125
original name : i
returning name: i
SUSAN: declaring varName 5298: i
SUSAN: declared locals:
j
SUSAN: declaring 3252:   %indvars.iv7 = phi i64 [ %indvars.iv.next8, %for.inc20 ], [ 0, %if.then ], !dbg !1125
SUSAN: getting value name for:   %indvars.iv7 = phi i64 [ %indvars.iv.next8, %for.inc20 ], [ 0, %if.then ], !dbg !1125
inst from IRNaming:   %indvars.iv7 = phi i64 [ %indvars.iv.next8, %for.inc20 ], [ 0, %if.then ], !dbg !1125
original name : i
returning name: i
SUSAN: declaring with reconstructed name 3286: i
SUSAN: inst at 5950:   %indvars.iv7 = phi i64 [ %indvars.iv.next8, %for.inc20 ], [ 0, %if.then ], !dbg !1125
SUSAN: declaring   %indvars.iv7 = phi i64 [ %indvars.iv.next8, %for.inc20 ], [ 0, %if.then ], !dbg !1125
SUSAN: printing type at 5937: i64
SUSAN: getting value name for:   %indvars.iv = phi i32 [ %indvars.iv.next, %for.inc20 ], [ 1, %if.then ], !dbg !1125
SUSAN: declaring varName 5298: indvars_2e_iv
SUSAN: declared locals:
i
j
SUSAN: declaring 3252:   %indvars.iv = phi i32 [ %indvars.iv.next, %for.inc20 ], [ 1, %if.then ], !dbg !1125
SUSAN: getting value name for:   %indvars.iv = phi i32 [ %indvars.iv.next, %for.inc20 ], [ 1, %if.then ], !dbg !1125
SUSAN: inst at 5950:   %indvars.iv = phi i32 [ %indvars.iv.next, %for.inc20 ], [ 1, %if.then ], !dbg !1125
SUSAN: declaring   %indvars.iv = phi i32 [ %indvars.iv.next, %for.inc20 ], [ 1, %if.then ], !dbg !1125
SUSAN: printing type at 5937: i32
SUSAN: getting value name for:   %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
inst from IRNaming:   %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
original name : k
returning name: k
SUSAN: declaring varName 5298: k
SUSAN: declared locals:
i
indvars_2e_iv
j
SUSAN: declaring 3252:   %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
SUSAN: getting value name for:   %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
inst from IRNaming:   %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
original name : k
returning name: k
SUSAN: declaring with reconstructed name 3286: k
SUSAN: inst at 5950:   %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
SUSAN: declaring   %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
SUSAN: printing type at 5937: i64
SUSAN: getting value name for:   %indvars.iv.next2 = add nsw i64 %indvars.iv1, 1, !dbg !1148
inst from IRNaming:   %indvars.iv.next2 = add nsw i64 %indvars.iv1, 1, !dbg !1148
original name : k
returning name: k
SUSAN: declaring varName 5298: k
SUSAN: getting value name for:   %indvars.iv.next8 = add nuw nsw i64 %indvars.iv7, 1, !dbg !1152
inst from IRNaming:   %indvars.iv.next8 = add nuw nsw i64 %indvars.iv7, 1, !dbg !1152
original name : i
returning name: i
SUSAN: declaring varName 5298: i
SUSAN: am I here 6807??
IfElse Region with entry block: entry
thenSubRegions : 
SUSAN: declaring 3252:   %add = add i32 %mul, %threadIdx.x, !dbg !1117
SUSAN: getting value name for:   %add = add i32 %mul, %threadIdx.x, !dbg !1117
inst from IRNaming:   %add = add i32 %mul, %threadIdx.x, !dbg !1117
original name : j
returning name: j
SUSAN: declaring with reconstructed name 3286: j
SUSAN: getting value name for:   %add = add i32 %mul, %threadIdx.x, !dbg !1117
inst from IRNaming:   %add = add i32 %mul, %threadIdx.x, !dbg !1117
original name : j
returning name: j
CBackend: writeOperand 3595:   %mul = mul i32 %blockDim.x, %blockIdx.x, !dbg !1116
CBackend: writeOperand 3595: i32 %blockDim.x
SUSAN: getting value name for: i32 %blockDim.x
CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595: i32 %blockIdx.x
SUSAN: getting value name for: i32 %blockIdx.x
CBackend: writeoperand here 3674? 
CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595: i32 %threadIdx.x
SUSAN: getting value name for: i32 %threadIdx.x
CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595:   %cmp = icmp slt i32 %add, %n, !dbg !1119
CBackend: writeOperand 3595:   %add = add i32 %mul, %threadIdx.x, !dbg !1117
SUSAN: getting value name for:   %add = add i32 %mul, %threadIdx.x, !dbg !1117
inst from IRNaming:   %add = add i32 %mul, %threadIdx.x, !dbg !1117
original name : j
returning name: j
CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595: i32 %n
SUSAN: getting value name for: i32 %n
inst from IRNaming: i32 %n
original name : n
returning name: n
CBackend: writeoperand here 3674? 
CBackend: writeoperand here 3674? 
Linear Region with entry block: if.then
SUSAN: printing bb:if.then
CBEBackend: printing bb 7082 if.then
printing unconditional branch   br label %for.cond, !dbg !1126
Loop Region with entry block: for.cond
term 6818:   br i1 %cmp3, label %for.body, label %for.end22, !dbg !1129
SUSAN: condrelatedinst:  %indvars.iv7 = phi i64 [ %indvars.iv.next8, %for.inc20 ], [ 0, %if.then ], !dbg !1125
SUSAN: found IV 784  %indvars.iv7 = phi i64 [ %indvars.iv.next8, %for.inc20 ], [ 0, %if.then ], !dbg !1125
SUSAN: condrelatedinst:  %cmp3 = icmp slt i64 %indvars.iv7, %3, !dbg !1127
SUSAN: found IV 784  %indvars.iv7 = phi i64 [ %indvars.iv.next8, %for.inc20 ], [ 0, %if.then ], !dbg !1125
SUSAN: declaring 3252:   %indvars.iv7 = phi i64 [ %indvars.iv.next8, %for.inc20 ], [ 0, %if.then ], !dbg !1125
SUSAN: getting value name for:   %indvars.iv7 = phi i64 [ %indvars.iv.next8, %for.inc20 ], [ 0, %if.then ], !dbg !1125
inst from IRNaming:   %indvars.iv7 = phi i64 [ %indvars.iv.next8, %for.inc20 ], [ 0, %if.then ], !dbg !1125
original name : i
returning name: i
SUSAN: declaring with reconstructed name 3286: i
CBackend: writeOperand 3595: i64 0
CBackend: writeoperand here 3674? 
SUSAN: getting value name for:   %indvars.iv7 = phi i64 [ %indvars.iv.next8, %for.inc20 ], [ 0, %if.then ], !dbg !1125
inst from IRNaming:   %indvars.iv7 = phi i64 [ %indvars.iv.next8, %for.inc20 ], [ 0, %if.then ], !dbg !1125
original name : i
returning name: i
SUSAN: visiting cast:   %3 = sext i32 %m to i64, !dbg !1126
CBackend: writeOperand 3595: i32 %m
SUSAN: getting value name for: i32 %m
inst from IRNaming: i32 %m
original name : m
returning name: m
CBackend: writeoperand here 3674? 
SUSAN: declaring 3252:   %indvars.iv.next8 = add nuw nsw i64 %indvars.iv7, 1, !dbg !1152
SUSAN: getting value name for:   %indvars.iv.next8 = add nuw nsw i64 %indvars.iv7, 1, !dbg !1152
inst from IRNaming:   %indvars.iv.next8 = add nuw nsw i64 %indvars.iv7, 1, !dbg !1152
original name : i
returning name: i
SUSAN: declaring with reconstructed name 3286: i
SUSAN: getting value name for:   %indvars.iv.next8 = add nuw nsw i64 %indvars.iv7, 1, !dbg !1152
inst from IRNaming:   %indvars.iv.next8 = add nuw nsw i64 %indvars.iv7, 1, !dbg !1152
original name : i
returning name: i
CBackend: writeOperand 3595:   %indvars.iv7 = phi i64 [ %indvars.iv.next8, %for.inc20 ], [ 0, %if.then ], !dbg !1125
SUSAN: found IV 784  %indvars.iv7 = phi i64 [ %indvars.iv.next8, %for.inc20 ], [ 0, %if.then ], !dbg !1125
SUSAN: found IV 784  %indvars.iv7 = phi i64 [ %indvars.iv.next8, %for.inc20 ], [ 0, %if.then ], !dbg !1125
SUSAN: found IV 784  %indvars.iv7 = phi i64 [ %indvars.iv.next8, %for.inc20 ], [ 0, %if.then ], !dbg !1125
SUSAN: getting value name for:   %indvars.iv7 = phi i64 [ %indvars.iv.next8, %for.inc20 ], [ 0, %if.then ], !dbg !1125
inst from IRNaming:   %indvars.iv7 = phi i64 [ %indvars.iv.next8, %for.inc20 ], [ 0, %if.then ], !dbg !1125
original name : i
returning name: i
SUSAN: found IV 784  %indvars.iv7 = phi i64 [ %indvars.iv.next8, %for.inc20 ], [ 0, %if.then ], !dbg !1125
CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595: i64 1
CBackend: writeoperand here 3674? 
Linear Region with entry block: for.body
SUSAN: printing bb:for.body
CBEBackend: printing bb 7082 for.body
SUSAN: found IV 784  %indvars.iv7 = phi i64 [ %indvars.iv.next8, %for.inc20 ], [ 0, %if.then ], !dbg !1125
SUSAN: found IV 784  %indvars.iv7 = phi i64 [ %indvars.iv.next8, %for.inc20 ], [ 0, %if.then ], !dbg !1125
printing unconditional branch   br label %for.cond5, !dbg !1135
Loop Region with entry block: for.cond5
term 6818:   br i1 %exitcond, label %for.body7, label %for.end, !dbg !1136
SUSAN: condrelatedinst:  %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
SUSAN: phi:   %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
SUSAN: find IV 809
SUSAN: condrelatedinst:  %exitcond = icmp ne i64 %indvars.iv1, %wide.trip.count, !dbg !1133
SUSAN: phi:   %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
SUSAN: find IV 809
SUSAN: declaring 3252:   %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
SUSAN: getting value name for:   %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
inst from IRNaming:   %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
original name : k
returning name: k
SUSAN: declaring with reconstructed name 3286: k
SUSAN: visiting cast:   %6 = sext i32 %indvars.iv to i64, !dbg !1127
CBackend: writeOperand 3595:   %indvars.iv = phi i32 [ %indvars.iv.next, %for.inc20 ], [ 1, %if.then ], !dbg !1125
SUSAN: found IV 784  %indvars.iv7 = phi i64 [ %indvars.iv.next8, %for.inc20 ], [ 0, %if.then ], !dbg !1125
SUSAN: found IV 784  %indvars.iv7 = phi i64 [ %indvars.iv.next8, %for.inc20 ], [ 0, %if.then ], !dbg !1125
SUSAN: found IV 784  %indvars.iv7 = phi i64 [ %indvars.iv.next8, %for.inc20 ], [ 0, %if.then ], !dbg !1125
SUSAN: found IV 784  %indvars.iv7 = phi i64 [ %indvars.iv.next8, %for.inc20 ], [ 0, %if.then ], !dbg !1125
SUSAN: getting value name for:   %indvars.iv7 = phi i64 [ %indvars.iv.next8, %for.inc20 ], [ 0, %if.then ], !dbg !1125
inst from IRNaming:   %indvars.iv7 = phi i64 [ %indvars.iv.next8, %for.inc20 ], [ 0, %if.then ], !dbg !1125
original name : i
returning name: i
SUSAN: found IV 784  %indvars.iv7 = phi i64 [ %indvars.iv.next8, %for.inc20 ], [ 0, %if.then ], !dbg !1125
CBackend: writeoperand here 3674? 
SUSAN: getting value name for:   %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
inst from IRNaming:   %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
original name : k
returning name: k
SUSAN: visiting cast:   %wide.trip.count = sext i32 %m to i64, !dbg !1133
CBackend: writeOperand 3595: i32 %m
SUSAN: getting value name for: i32 %m
inst from IRNaming: i32 %m
original name : m
returning name: m
CBackend: writeoperand here 3674? 
SUSAN: declaring 3252:   %indvars.iv.next2 = add nsw i64 %indvars.iv1, 1, !dbg !1148
SUSAN: getting value name for:   %indvars.iv.next2 = add nsw i64 %indvars.iv1, 1, !dbg !1148
inst from IRNaming:   %indvars.iv.next2 = add nsw i64 %indvars.iv1, 1, !dbg !1148
original name : k
returning name: k
SUSAN: declaring with reconstructed name 3286: k
SUSAN: getting value name for:   %indvars.iv.next2 = add nsw i64 %indvars.iv1, 1, !dbg !1148
inst from IRNaming:   %indvars.iv.next2 = add nsw i64 %indvars.iv1, 1, !dbg !1148
original name : k
returning name: k
CBackend: writeOperand 3595:   %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
SUSAN: phi:   %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
SUSAN: find IV 809
SUSAN: phi:   %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
SUSAN: find IV 809
SUSAN: phi:   %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
SUSAN: find IV 809
SUSAN: getting value name for:   %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
inst from IRNaming:   %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
original name : k
returning name: k
SUSAN: phi:   %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
SUSAN: find IV 809
CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595: i64 1
CBackend: writeoperand here 3674? 
Linear Region with entry block: for.body7
SUSAN: printing bb:for.body7
CBEBackend: printing bb 7082 for.body7
SUSAN: phi:   %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
SUSAN: find IV 809
SUSAN: phi:   %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
SUSAN: find IV 809
SUSAN: printing instruction   store double %add19, double* %arrayidx18, align 8, !dbg !1147 at 6678
CBEBackend: printing store Inst:   store double %add19, double* %arrayidx18, align 8, !dbg !1147
CBackend: here? 10442
SUSAN: GEPINST:   %arrayidx18 = getelementptr inbounds double, double* %B, i64 %14, !dbg !1146
SUSAN: dereferenceTimes = 1
SUSAN: printing GEP:   %arrayidx18 = getelementptr inbounds double, double* %B, i64 %14, !dbg !1146
SUSAN: accessMemory true
SUSAN: first index is integer/pointertype type
SUSAN: writing ptr 10000:double* %B
SUSAN: writing ptr 9994: double* %B
SUSAN: getting value name for: double* %B
inst from IRNaming: double* %B
original name : B
returning name: B
CBackend: writeOperand 3595:   %14 = add nsw i64 %13, %5, !dbg !1145
SUSAN: phi:   %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
SUSAN: find IV 809
SUSAN: phi:   %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
SUSAN: find IV 809
CBackend: writeOperand 3595:   %13 = mul nsw i64 %indvars.iv7, %4, !dbg !1144
SUSAN: phi:   %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
SUSAN: find IV 809
SUSAN: phi:   %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
SUSAN: find IV 809
CBackend: writeOperand 3595:   %indvars.iv7 = phi i64 [ %indvars.iv.next8, %for.inc20 ], [ 0, %if.then ], !dbg !1125
SUSAN: found IV 784  %indvars.iv7 = phi i64 [ %indvars.iv.next8, %for.inc20 ], [ 0, %if.then ], !dbg !1125
SUSAN: found IV 784  %indvars.iv7 = phi i64 [ %indvars.iv.next8, %for.inc20 ], [ 0, %if.then ], !dbg !1125
SUSAN: found IV 784  %indvars.iv7 = phi i64 [ %indvars.iv.next8, %for.inc20 ], [ 0, %if.then ], !dbg !1125
SUSAN: getting value name for:   %indvars.iv7 = phi i64 [ %indvars.iv.next8, %for.inc20 ], [ 0, %if.then ], !dbg !1125
inst from IRNaming:   %indvars.iv7 = phi i64 [ %indvars.iv.next8, %for.inc20 ], [ 0, %if.then ], !dbg !1125
original name : i
returning name: i
SUSAN: found IV 784  %indvars.iv7 = phi i64 [ %indvars.iv.next8, %for.inc20 ], [ 0, %if.then ], !dbg !1125
CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595:   %4 = sext i32 %n to i64, !dbg !1126
SUSAN: visiting cast:   %4 = sext i32 %n to i64, !dbg !1126
CBackend: writeOperand 3595: i32 %n
SUSAN: getting value name for: i32 %n
inst from IRNaming: i32 %n
original name : n
returning name: n
CBackend: writeoperand here 3674? 
CBackend: writeoperand here 3674? 
SUSAN: phi:   %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
SUSAN: find IV 809
CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595:   %5 = sext i32 %add to i64, !dbg !1126
SUSAN: visiting cast:   %5 = sext i32 %add to i64, !dbg !1126
CBackend: writeOperand 3595:   %add = add i32 %mul, %threadIdx.x, !dbg !1117
SUSAN: getting value name for:   %add = add i32 %mul, %threadIdx.x, !dbg !1117
inst from IRNaming:   %add = add i32 %mul, %threadIdx.x, !dbg !1117
original name : j
returning name: j
CBackend: writeoperand here 3674? 
CBackend: writeoperand here 3674? 
SUSAN: phi:   %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
SUSAN: find IV 809
CBackend: writeoperand here 3674? 
CBackend: here? 10445
CBackend: writeOperand 3595:   %add19 = fadd contract double %15, %mul14, !dbg !1147
SUSAN: phi:   %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
SUSAN: find IV 809
SUSAN: phi:   %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
SUSAN: find IV 809
CBackend: writeOperand 3595:   %15 = load double, double* %arrayidx18, align 8, !dbg !1147
SUSAN: phi:   %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
SUSAN: find IV 809
SUSAN: phi:   %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
SUSAN: find IV 809
SUSAN: loadInst:   %15 = load double, double* %arrayidx18, align 8, !dbg !1147
SUSAN: GEPINST:   %arrayidx18 = getelementptr inbounds double, double* %B, i64 %14, !dbg !1146
SUSAN: dereferenceTimes = 1
SUSAN: printing GEP:   %arrayidx18 = getelementptr inbounds double, double* %B, i64 %14, !dbg !1146
SUSAN: accessMemory true
SUSAN: first index is integer/pointertype type
SUSAN: writing ptr 10000:double* %B
SUSAN: writing ptr 9994: double* %B
SUSAN: getting value name for: double* %B
inst from IRNaming: double* %B
original name : B
returning name: B
CBackend: writeOperand 3595:   %14 = add nsw i64 %13, %5, !dbg !1145
SUSAN: phi:   %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
SUSAN: find IV 809
SUSAN: phi:   %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
SUSAN: find IV 809
CBackend: writeOperand 3595:   %13 = mul nsw i64 %indvars.iv7, %4, !dbg !1144
SUSAN: phi:   %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
SUSAN: find IV 809
SUSAN: phi:   %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
SUSAN: find IV 809
CBackend: writeOperand 3595:   %indvars.iv7 = phi i64 [ %indvars.iv.next8, %for.inc20 ], [ 0, %if.then ], !dbg !1125
SUSAN: found IV 784  %indvars.iv7 = phi i64 [ %indvars.iv.next8, %for.inc20 ], [ 0, %if.then ], !dbg !1125
SUSAN: found IV 784  %indvars.iv7 = phi i64 [ %indvars.iv.next8, %for.inc20 ], [ 0, %if.then ], !dbg !1125
SUSAN: found IV 784  %indvars.iv7 = phi i64 [ %indvars.iv.next8, %for.inc20 ], [ 0, %if.then ], !dbg !1125
SUSAN: getting value name for:   %indvars.iv7 = phi i64 [ %indvars.iv.next8, %for.inc20 ], [ 0, %if.then ], !dbg !1125
inst from IRNaming:   %indvars.iv7 = phi i64 [ %indvars.iv.next8, %for.inc20 ], [ 0, %if.then ], !dbg !1125
original name : i
returning name: i
SUSAN: found IV 784  %indvars.iv7 = phi i64 [ %indvars.iv.next8, %for.inc20 ], [ 0, %if.then ], !dbg !1125
CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595:   %4 = sext i32 %n to i64, !dbg !1126
SUSAN: visiting cast:   %4 = sext i32 %n to i64, !dbg !1126
CBackend: writeOperand 3595: i32 %n
SUSAN: getting value name for: i32 %n
inst from IRNaming: i32 %n
original name : n
returning name: n
CBackend: writeoperand here 3674? 
CBackend: writeoperand here 3674? 
SUSAN: phi:   %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
SUSAN: find IV 809
CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595:   %5 = sext i32 %add to i64, !dbg !1126
SUSAN: visiting cast:   %5 = sext i32 %add to i64, !dbg !1126
CBackend: writeOperand 3595:   %add = add i32 %mul, %threadIdx.x, !dbg !1117
SUSAN: getting value name for:   %add = add i32 %mul, %threadIdx.x, !dbg !1117
inst from IRNaming:   %add = add i32 %mul, %threadIdx.x, !dbg !1117
original name : j
returning name: j
CBackend: writeoperand here 3674? 
CBackend: writeoperand here 3674? 
SUSAN: phi:   %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
SUSAN: find IV 809
CBackend: writeoperand here 3674? 
SUSAN: phi:   %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
SUSAN: find IV 809
CBackend: writeoperand here 3674? 
SUSAN: am I here 8049?
CBackend: writeOperand 3595:   %mul14 = fmul contract double %9, %12, !dbg !1143
SUSAN: phi:   %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
SUSAN: find IV 809
SUSAN: phi:   %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
SUSAN: find IV 809
CBackend: writeOperand 3595:   %9 = load double, double* %arrayidx, align 8, !dbg !1139
SUSAN: phi:   %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
SUSAN: find IV 809
SUSAN: phi:   %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
SUSAN: find IV 809
SUSAN: loadInst:   %9 = load double, double* %arrayidx, align 8, !dbg !1139
SUSAN: GEPINST:   %arrayidx = getelementptr inbounds double, double* %A, i64 %8, !dbg !1139
SUSAN: dereferenceTimes = 1
SUSAN: printing GEP:   %arrayidx = getelementptr inbounds double, double* %A, i64 %8, !dbg !1139
SUSAN: accessMemory true
SUSAN: first index is integer/pointertype type
SUSAN: writing ptr 10000:double* %A
SUSAN: writing ptr 9994: double* %A
SUSAN: getting value name for: double* %A
inst from IRNaming: double* %A
original name : A
returning name: A
CBackend: writeOperand 3595:   %8 = add nsw i64 %7, %indvars.iv7, !dbg !1138
SUSAN: phi:   %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
SUSAN: find IV 809
SUSAN: phi:   %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
SUSAN: find IV 809
CBackend: writeOperand 3595:   %7 = mul nsw i64 %indvars.iv1, %0, !dbg !1137
SUSAN: phi:   %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
SUSAN: find IV 809
SUSAN: phi:   %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
SUSAN: find IV 809
CBackend: writeOperand 3595:   %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
SUSAN: phi:   %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
SUSAN: find IV 809
SUSAN: phi:   %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
SUSAN: find IV 809
SUSAN: phi:   %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
SUSAN: find IV 809
SUSAN: getting value name for:   %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
inst from IRNaming:   %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
original name : k
returning name: k
SUSAN: phi:   %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
SUSAN: find IV 809
CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595:   %0 = sext i32 %m to i64, !dbg !1126
SUSAN: visiting cast:   %0 = sext i32 %m to i64, !dbg !1126
CBackend: writeOperand 3595: i32 %m
SUSAN: getting value name for: i32 %m
inst from IRNaming: i32 %m
original name : m
returning name: m
CBackend: writeoperand here 3674? 
CBackend: writeoperand here 3674? 
SUSAN: phi:   %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
SUSAN: find IV 809
CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595:   %indvars.iv7 = phi i64 [ %indvars.iv.next8, %for.inc20 ], [ 0, %if.then ], !dbg !1125
SUSAN: found IV 784  %indvars.iv7 = phi i64 [ %indvars.iv.next8, %for.inc20 ], [ 0, %if.then ], !dbg !1125
SUSAN: found IV 784  %indvars.iv7 = phi i64 [ %indvars.iv.next8, %for.inc20 ], [ 0, %if.then ], !dbg !1125
SUSAN: found IV 784  %indvars.iv7 = phi i64 [ %indvars.iv.next8, %for.inc20 ], [ 0, %if.then ], !dbg !1125
SUSAN: getting value name for:   %indvars.iv7 = phi i64 [ %indvars.iv.next8, %for.inc20 ], [ 0, %if.then ], !dbg !1125
inst from IRNaming:   %indvars.iv7 = phi i64 [ %indvars.iv.next8, %for.inc20 ], [ 0, %if.then ], !dbg !1125
original name : i
returning name: i
SUSAN: found IV 784  %indvars.iv7 = phi i64 [ %indvars.iv.next8, %for.inc20 ], [ 0, %if.then ], !dbg !1125
CBackend: writeoperand here 3674? 
SUSAN: phi:   %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
SUSAN: find IV 809
CBackend: writeoperand here 3674? 
SUSAN: phi:   %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
SUSAN: find IV 809
CBackend: writeoperand here 3674? 
SUSAN: am I here 8049?
CBackend: writeOperand 3595:   %12 = load double, double* %arrayidx13, align 8, !dbg !1142
SUSAN: phi:   %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
SUSAN: find IV 809
SUSAN: phi:   %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
SUSAN: find IV 809
SUSAN: loadInst:   %12 = load double, double* %arrayidx13, align 8, !dbg !1142
SUSAN: GEPINST:   %arrayidx13 = getelementptr inbounds double, double* %B, i64 %11, !dbg !1142
SUSAN: dereferenceTimes = 1
SUSAN: printing GEP:   %arrayidx13 = getelementptr inbounds double, double* %B, i64 %11, !dbg !1142
SUSAN: accessMemory true
SUSAN: first index is integer/pointertype type
SUSAN: writing ptr 10000:double* %B
SUSAN: writing ptr 9994: double* %B
SUSAN: getting value name for: double* %B
inst from IRNaming: double* %B
original name : B
returning name: B
CBackend: writeOperand 3595:   %11 = add nsw i64 %10, %2, !dbg !1141
SUSAN: phi:   %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
SUSAN: find IV 809
SUSAN: phi:   %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
SUSAN: find IV 809
CBackend: writeOperand 3595:   %10 = mul nsw i64 %indvars.iv1, %1, !dbg !1140
SUSAN: phi:   %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
SUSAN: find IV 809
SUSAN: phi:   %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
SUSAN: find IV 809
CBackend: writeOperand 3595:   %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
SUSAN: phi:   %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
SUSAN: find IV 809
SUSAN: phi:   %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
SUSAN: find IV 809
SUSAN: phi:   %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
SUSAN: find IV 809
SUSAN: getting value name for:   %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
inst from IRNaming:   %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
original name : k
returning name: k
SUSAN: phi:   %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
SUSAN: find IV 809
CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595:   %1 = sext i32 %n to i64, !dbg !1126
SUSAN: visiting cast:   %1 = sext i32 %n to i64, !dbg !1126
CBackend: writeOperand 3595: i32 %n
SUSAN: getting value name for: i32 %n
inst from IRNaming: i32 %n
original name : n
returning name: n
CBackend: writeoperand here 3674? 
CBackend: writeoperand here 3674? 
SUSAN: phi:   %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
SUSAN: find IV 809
CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595:   %2 = sext i32 %add to i64, !dbg !1126
SUSAN: visiting cast:   %2 = sext i32 %add to i64, !dbg !1126
CBackend: writeOperand 3595:   %add = add i32 %mul, %threadIdx.x, !dbg !1117
SUSAN: getting value name for:   %add = add i32 %mul, %threadIdx.x, !dbg !1117
inst from IRNaming:   %add = add i32 %mul, %threadIdx.x, !dbg !1117
original name : j
returning name: j
CBackend: writeoperand here 3674? 
CBackend: writeoperand here 3674? 
SUSAN: phi:   %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
SUSAN: find IV 809
CBackend: writeoperand here 3674? 
SUSAN: phi:   %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
SUSAN: find IV 809
CBackend: writeoperand here 3674? 
SUSAN: phi:   %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
SUSAN: find IV 809
CBackend: writeoperand here 3674? 
SUSAN: phi:   %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
SUSAN: find IV 809
CBackend: writeoperand here 3674? 
CBackend: here? 10462
printing unconditional branch   br label %for.inc, !dbg !1146
CBERegion: printing latchBB for.inc
CBERegion: I 316:   %indvars.iv.next2 = add nsw i64 %indvars.iv1, 1, !dbg !1148
SUSAN: phi:   %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
SUSAN: find IV 809
CBERegion: I 316:   call void @llvm.dbg.value(metadata i32 undef, metadata !1375, metadata !DIExpression(DW_OP_plus_uconst, 1, DW_OP_stack_value)), !dbg !1377
SUSAN: phi:   %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
SUSAN: find IV 809
SUSAN: phi:   %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
SUSAN: find IV 809
CBERegion: I 316:   br label %for.cond5, !dbg !1149, !llvm.loop !1150
SUSAN: phi:   %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
SUSAN: find IV 809
SUSAN: phi:   %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1132
SUSAN: find IV 809
Linear Region with entry block: for.end
SUSAN: printing bb:for.end
CBEBackend: printing bb 7082 for.end
printing unconditional branch   br label %for.inc20, !dbg !1151
CBERegion: printing latchBB for.inc20
CBERegion: I 316:   %indvars.iv.next8 = add nuw nsw i64 %indvars.iv7, 1, !dbg !1152
SUSAN: found IV 784  %indvars.iv7 = phi i64 [ %indvars.iv.next8, %for.inc20 ], [ 0, %if.then ], !dbg !1125
CBERegion: I 316:   call void @llvm.dbg.value(metadata i32 undef, metadata !1367, metadata !DIExpression(DW_OP_plus_uconst, 1, DW_OP_stack_value)), !dbg !1370
SUSAN: found IV 784  %indvars.iv7 = phi i64 [ %indvars.iv.next8, %for.inc20 ], [ 0, %if.then ], !dbg !1125
SUSAN: found IV 784  %indvars.iv7 = phi i64 [ %indvars.iv.next8, %for.inc20 ], [ 0, %if.then ], !dbg !1125
CBERegion: I 316:   %indvars.iv.next = add nuw i32 %indvars.iv, 1, !dbg !1153
SUSAN: found IV 784  %indvars.iv7 = phi i64 [ %indvars.iv.next8, %for.inc20 ], [ 0, %if.then ], !dbg !1125
SUSAN: found IV 784  %indvars.iv7 = phi i64 [ %indvars.iv.next8, %for.inc20 ], [ 0, %if.then ], !dbg !1125
CBERegion: I 316:   br label %for.cond, !dbg !1153, !llvm.loop !1154
SUSAN: found IV 784  %indvars.iv7 = phi i64 [ %indvars.iv.next8, %for.inc20 ], [ 0, %if.then ], !dbg !1125
SUSAN: found IV 784  %indvars.iv7 = phi i64 [ %indvars.iv.next8, %for.inc20 ], [ 0, %if.then ], !dbg !1125
Linear Region with entry block: for.end22
SUSAN: printing bb:for.end22
CBEBackend: printing bb 7082 for.end22
printing unconditional branch   br label %if.end, !dbg !1156
Linear Region with entry block: if.end
SUSAN: printing bb:if.end
CBEBackend: printing bb 7082 if.end
CBackend: iterating function 1759: _Z12kernel_alphaiidPdS_.2
CBackend: printing function 1770_Z12kernel_alphaiidPdS_.2
=========LOOP PROFILES=========
SUSAN: opnd0  %add = add i32 %mul, %threadIdx.x, !dbg !1117
SUSAN: opnd1i32 %m
SUSAN: opnd0  %add7 = add i32 %mul5, %threadIdx.y, !dbg !1120
SUSAN: opnd1i32 %n
SUSAN: BB:
entry:
  call void @llvm.dbg.value(metadata i32 %n, metadata !1107, metadata !DIExpression()), !dbg !1111
  call void @llvm.dbg.value(metadata i32 %m, metadata !1112, metadata !DIExpression()), !dbg !1111
  call void @llvm.dbg.value(metadata double %alpha, metadata !1113, metadata !DIExpression()), !dbg !1111
  call void @llvm.dbg.value(metadata double* %B, metadata !1114, metadata !DIExpression()), !dbg !1111
  call void @llvm.dbg.value(metadata double* %A, metadata !1115, metadata !DIExpression()), !dbg !1111
  %mul = mul i32 %blockDim.x, %blockIdx.x, !dbg !1116
  %add = add i32 %mul, %threadIdx.x, !dbg !1117
  call void @llvm.dbg.value(metadata i32 %add, metadata !1118, metadata !DIExpression()), !dbg !1111
  %mul5 = mul i32 %blockDim.y, %blockIdx.y, !dbg !1119
  %add7 = add i32 %mul5, %threadIdx.y, !dbg !1120
  call void @llvm.dbg.value(metadata i32 %add7, metadata !1121, metadata !DIExpression()), !dbg !1111
  %cmp = icmp slt i32 %add, %m, !dbg !1122
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !1124

SUSAN: BB:
land.lhs.true:                                    ; preds = %entry
  %cmp8 = icmp slt i32 %add7, %n, !dbg !1125
  br i1 %cmp8, label %if.then, label %if.end, !dbg !1126

SUSAN: BB:
if.then:                                          ; preds = %land.lhs.true
  %mul9 = mul nsw i32 %add, %n, !dbg !1127
  %add10 = add nsw i32 %mul9, %add7, !dbg !1128
  %idxprom = sext i32 %add10 to i64, !dbg !1129
  %arrayidx = getelementptr inbounds double, double* %B, i64 %idxprom, !dbg !1129
  %0 = load double, double* %arrayidx, align 8, !dbg !1130
  %mul11 = fmul contract double %0, %alpha, !dbg !1130
  store double %mul11, double* %arrayidx, align 8, !dbg !1130
  br label %if.end, !dbg !1129

SUSAN: BB:
if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  ret void, !dbg !1131

SUSAN: entry block is an if-else region! entry
creating if-else region for entryBB: entry
1
1
SUSAN: marking only true branch
SUSAN: entry block is an if-else region! land.lhs.true
creating if-else region for entryBB: land.lhs.true
1
1
SUSAN: marking both branches
SUSAN: entry block is a linear region! if.then
CBERegion: including if.then in a linear region
CBERegion: nextBB 
if.then:                                          ; preds = %land.lhs.true
  %mul9 = mul nsw i32 %add, %n, !dbg !1127
  %add10 = add nsw i32 %mul9, %add7, !dbg !1128
  %idxprom = sext i32 %add10 to i64, !dbg !1129
  %arrayidx = getelementptr inbounds double, double* %B, i64 %idxprom, !dbg !1129
  %0 = load double, double* %arrayidx, align 8, !dbg !1130
  %mul11 = fmul contract double %0, %alpha, !dbg !1130
  store double %mul11, double* %arrayidx, align 8, !dbg !1130
  br label %if.end, !dbg !1129

SUSAN: currbb 562: if.end
CBERegion: nextEntryBB 121: if.end
=================SUSAN: END OF marking region : land.lhs.true==================
SUSAN: currbb 562: if.end
=================SUSAN: END OF marking region : entry==================
SUSAN: nextRegionEntryBB if.end
SUSAN: entry block is a linear region! if.end
SUSAN: CI at 1400:   call void @llvm.dbg.value(metadata i32 %n, metadata !1403, metadata !DIExpression()), !dbg !1405
SUSAN: CI at 1400:   call void @llvm.dbg.value(metadata i32 %m, metadata !1406, metadata !DIExpression()), !dbg !1405
SUSAN: CI at 1400:   call void @llvm.dbg.value(metadata double %alpha, metadata !1407, metadata !DIExpression()), !dbg !1405
SUSAN: CI at 1400:   call void @llvm.dbg.value(metadata double* %B, metadata !1408, metadata !DIExpression()), !dbg !1405
SUSAN: CI at 1400:   call void @llvm.dbg.value(metadata double* %A, metadata !1409, metadata !DIExpression()), !dbg !1405
SUSAN: CI at 1400:   call void @llvm.dbg.value(metadata i32 %add, metadata !1412, metadata !DIExpression()), !dbg !1405
SUSAN: CI at 1400:   call void @llvm.dbg.value(metadata i32 %add7, metadata !1415, metadata !DIExpression()), !dbg !1405
========== IV MAP==========
SUSAN: headPHI:   %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1155
SUSAN: phi:   %j.1 = phi i32 [ 0, %for.body9 ], [ %inc30, %for.inc29 ], !dbg !1155
SUSAN: headPHI:   %indvars.iv7 = phi i64 [ %indvars.iv.next8, %for.inc20 ], [ 0, %if.then ], !dbg !1125
SUSAN: phi:   %indvars.iv = phi i32 [ %indvars.iv.next, %for.inc20 ], [ 1, %if.then ], !dbg !1125
currInst :  %mul = mul i32 %blockDim.x, %blockIdx.x, !dbg !1116
currInst :  %add = add i32 %mul, %threadIdx.x, !dbg !1117
currInst :  %mul5 = mul i32 %blockDim.y, %blockIdx.y, !dbg !1119
currInst :  %add7 = add i32 %mul5, %threadIdx.y, !dbg !1120
currInst :  %cmp = icmp slt i32 %add, %m, !dbg !1122
currInst :  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !1124
currInst :  %cmp8 = icmp slt i32 %add7, %n, !dbg !1125
currInst :  br i1 %cmp8, label %if.then, label %if.end, !dbg !1126
currInst :  %mul9 = mul nsw i32 %add, %n, !dbg !1127
currInst :  %add10 = add nsw i32 %mul9, %add7, !dbg !1128
currInst :  %idxprom = sext i32 %add10 to i64, !dbg !1129
currInst :  %arrayidx = getelementptr inbounds double, double* %B, i64 %idxprom, !dbg !1129
SUSAN: add () to inst:   %mul9 = mul nsw i32 %add, %n, !dbg !1127
currInst :  %add10 = add nsw i32 %mul9, %add7, !dbg !1128
currInst :  %idxprom = sext i32 %add10 to i64, !dbg !1129
currInst :  %arrayidx = getelementptr inbounds double, double* %B, i64 %idxprom, !dbg !1129
SUSAN: add () to inst:   %add10 = add nsw i32 %mul9, %add7, !dbg !1128
currInst :  %idxprom = sext i32 %add10 to i64, !dbg !1129
currInst :  %arrayidx = getelementptr inbounds double, double* %B, i64 %idxprom, !dbg !1129
currInst :  store double %mul11, double* %arrayidx, align 8, !dbg !1130
currInst :  %arrayidx = getelementptr inbounds double, double* %B, i64 %idxprom, !dbg !1129
currInst :  store double %mul11, double* %arrayidx, align 8, !dbg !1130
currInst :  %0 = load double, double* %arrayidx, align 8, !dbg !1130
currInst :  %mul11 = fmul contract double %0, %alpha, !dbg !1130
currInst :  store double %mul11, double* %arrayidx, align 8, !dbg !1130
currInst :  %mul11 = fmul contract double %0, %alpha, !dbg !1130
currInst :  store double %mul11, double* %arrayidx, align 8, !dbg !1130
SUSAN: getting value name for: 
; Function Attrs: convergent noinline nounwind
define dso_local void @_Z12kernel_alphaiidPdS_.2(i32 %n, i32 %m, double %alpha, double* %B, double* %A, i32 %gridDim.x, i32 %gridDim.y, i32 %gridDim.z, i32 %blockDim.x, i32 %blockDim.y, i32 %blockDim.z, i32 %blockIdx.x, i32 %blockIdx.y, i32 %blockIdx.z, i32 %threadIdx.x, i32 %threadIdx.y, i32 %threadIdx.z) #9 {
entry:
  call void @llvm.dbg.value(metadata i32 %n, metadata !1403, metadata !DIExpression()), !dbg !1405
  call void @llvm.dbg.value(metadata i32 %m, metadata !1406, metadata !DIExpression()), !dbg !1405
  call void @llvm.dbg.value(metadata double %alpha, metadata !1407, metadata !DIExpression()), !dbg !1405
  call void @llvm.dbg.value(metadata double* %B, metadata !1408, metadata !DIExpression()), !dbg !1405
  call void @llvm.dbg.value(metadata double* %A, metadata !1409, metadata !DIExpression()), !dbg !1405
  %mul = mul i32 %blockDim.x, %blockIdx.x, !dbg !1410
  %add = add i32 %mul, %threadIdx.x, !dbg !1411
  call void @llvm.dbg.value(metadata i32 %add, metadata !1412, metadata !DIExpression()), !dbg !1405
  %mul5 = mul i32 %blockDim.y, %blockIdx.y, !dbg !1413
  %add7 = add i32 %mul5, %threadIdx.y, !dbg !1414
  call void @llvm.dbg.value(metadata i32 %add7, metadata !1415, metadata !DIExpression()), !dbg !1405
  %cmp = icmp slt i32 %add, %m, !dbg !1416
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !1418

land.lhs.true:                                    ; preds = %entry
  %cmp8 = icmp slt i32 %add7, %n, !dbg !1419
  br i1 %cmp8, label %if.then, label %if.end, !dbg !1420

if.then:                                          ; preds = %land.lhs.true
  %mul9 = mul nsw i32 %add, %n, !dbg !1421
  %add10 = add nsw i32 %mul9, %add7, !dbg !1422
  %idxprom = sext i32 %add10 to i64, !dbg !1423
  %arrayidx = getelementptr inbounds double, double* %B, i64 %idxprom, !dbg !1423
  %0 = load double, double* %arrayidx, align 8, !dbg !1424
  %mul11 = fmul contract double %0, %alpha, !dbg !1424
  store double %mul11, double* %arrayidx, align 8, !dbg !1424
  br label %if.end, !dbg !1423

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  ret void, !dbg !1425
}

SUSAN: found argument 6346: i32 %n
CBackend: varname: n
  call void @llvm.dbg.value(metadata i32 %n, metadata !1403, metadata !DIExpression()), !dbg !1405
SUSAN: found argument 6346: i32 %m
CBackend: varname: m
  call void @llvm.dbg.value(metadata i32 %m, metadata !1406, metadata !DIExpression()), !dbg !1405
SUSAN: found argument 6346: double %alpha
CBackend: varname: alpha
  call void @llvm.dbg.value(metadata double %alpha, metadata !1407, metadata !DIExpression()), !dbg !1405
SUSAN: found argument 6346: double* %B
CBackend: varname: B
  call void @llvm.dbg.value(metadata double* %B, metadata !1408, metadata !DIExpression()), !dbg !1405
SUSAN: found argument 6346: double* %A
CBackend: varname: A
  call void @llvm.dbg.value(metadata double* %A, metadata !1409, metadata !DIExpression()), !dbg !1405
=========================SUSAN: IR NAMING BEFORE=====================
i32 %n -> n
i32 %m -> m
double %alpha -> alpha
double* %B -> B
double* %A -> A
  %add = add i32 %mul, %threadIdx.x, !dbg !1117 -> i
  %add7 = add i32 %mul5, %threadIdx.y, !dbg !1120 -> j
SUSAN: inst:  %idxprom = sext i32 %add10 to i64, !dbg !1129
i:  %add = add i32 %mul, %threadIdx.x, !dbg !1117
j:  %add7 = add i32 %mul5, %threadIdx.y, !dbg !1120
SUSAN: inst:  call void @llvm.dbg.value(metadata i32 %add7, metadata !1415, metadata !DIExpression()), !dbg !1405
i:  %add = add i32 %mul, %threadIdx.x, !dbg !1117
j:  %add7 = add i32 %mul5, %threadIdx.y, !dbg !1120
SUSAN: inst:  %cmp = icmp slt i32 %add, %m, !dbg !1122
i:  %add = add i32 %mul, %threadIdx.x, !dbg !1117
j:  %add7 = add i32 %mul5, %threadIdx.y, !dbg !1120
SUSAN: inst:  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !1124
i:  %add = add i32 %mul, %threadIdx.x, !dbg !1117
j:  %add7 = add i32 %mul5, %threadIdx.y, !dbg !1120
SUSAN: inst:  %cmp8 = icmp slt i32 %add7, %n, !dbg !1125
i:  %add = add i32 %mul, %threadIdx.x, !dbg !1117
j:  %add7 = add i32 %mul5, %threadIdx.y, !dbg !1120
SUSAN: inst:  br i1 %cmp8, label %if.then, label %if.end, !dbg !1126
i:  %add = add i32 %mul, %threadIdx.x, !dbg !1117
j:  %add7 = add i32 %mul5, %threadIdx.y, !dbg !1120
SUSAN: inst:  %mul9 = mul nsw i32 %add, %n, !dbg !1127
i:  %add = add i32 %mul, %threadIdx.x, !dbg !1117
j:  %add7 = add i32 %mul5, %threadIdx.y, !dbg !1120
SUSAN: inst:  %add10 = add nsw i32 %mul9, %add7, !dbg !1128
i:  %add = add i32 %mul, %threadIdx.x, !dbg !1117
j:  %add7 = add i32 %mul5, %threadIdx.y, !dbg !1120
SUSAN: inst:  %arrayidx = getelementptr inbounds double, double* %B, i64 %idxprom, !dbg !1129
i:  %add = add i32 %mul, %threadIdx.x, !dbg !1117
j:  %add7 = add i32 %mul5, %threadIdx.y, !dbg !1120
SUSAN: inst:  %0 = load double, double* %arrayidx, align 8, !dbg !1130
i:  %add = add i32 %mul, %threadIdx.x, !dbg !1117
j:  %add7 = add i32 %mul5, %threadIdx.y, !dbg !1120
SUSAN: inst:  %mul11 = fmul contract double %0, %alpha, !dbg !1130
i:  %add = add i32 %mul, %threadIdx.x, !dbg !1117
j:  %add7 = add i32 %mul5, %threadIdx.y, !dbg !1120
SUSAN: inst:  store double %mul11, double* %arrayidx, align 8, !dbg !1130
i:  %add = add i32 %mul, %threadIdx.x, !dbg !1117
j:  %add7 = add i32 %mul5, %threadIdx.y, !dbg !1120
SUSAN: inst:  br label %if.end, !dbg !1129
i:  %add = add i32 %mul, %threadIdx.x, !dbg !1117
j:  %add7 = add i32 %mul5, %threadIdx.y, !dbg !1120
SUSAN: inst:  ret void, !dbg !1131
i:  %add = add i32 %mul, %threadIdx.x, !dbg !1117
j:  %add7 = add i32 %mul5, %threadIdx.y, !dbg !1120
SUSAN: inst:  call void @llvm.dbg.value(metadata i32 %n, metadata !1403, metadata !DIExpression()), !dbg !1405
SUSAN: inst:  call void @llvm.dbg.value(metadata i32 %m, metadata !1406, metadata !DIExpression()), !dbg !1405
SUSAN: inst:  call void @llvm.dbg.value(metadata double %alpha, metadata !1407, metadata !DIExpression()), !dbg !1405
SUSAN: inst:  call void @llvm.dbg.value(metadata double* %B, metadata !1408, metadata !DIExpression()), !dbg !1405
SUSAN: inst:  call void @llvm.dbg.value(metadata double* %A, metadata !1409, metadata !DIExpression()), !dbg !1405
SUSAN: inst:  %mul = mul i32 %blockDim.x, %blockIdx.x, !dbg !1116
SUSAN: inst:  %add = add i32 %mul, %threadIdx.x, !dbg !1117
i:  %add = add i32 %mul, %threadIdx.x, !dbg !1117
SUSAN: inst:  call void @llvm.dbg.value(metadata i32 %add, metadata !1412, metadata !DIExpression()), !dbg !1405
i:  %add = add i32 %mul, %threadIdx.x, !dbg !1117
SUSAN: inst:  %mul5 = mul i32 %blockDim.y, %blockIdx.y, !dbg !1119
i:  %add = add i32 %mul, %threadIdx.x, !dbg !1117
SUSAN: inst:  %add7 = add i32 %mul5, %threadIdx.y, !dbg !1120
i:  %add = add i32 %mul, %threadIdx.x, !dbg !1117
j:  %add7 = add i32 %mul5, %threadIdx.y, !dbg !1120
=========================SUSAN: IR NAMING=====================
i32 %n -> n
i32 %m -> m
double %alpha -> alpha
double* %B -> B
double* %A -> A
  %add = add i32 %mul, %threadIdx.x, !dbg !1117 -> i
  %add7 = add i32 %mul5, %threadIdx.y, !dbg !1120 -> j
SUSAN: getting value name for: i32 %n
inst from IRNaming: i32 %n
original name : n
returning name: n
SUSAN: getting value name for: i32 %m
inst from IRNaming: i32 %m
original name : m
returning name: m
SUSAN: getting value name for: double %alpha
inst from IRNaming: double %alpha
original name : alpha
returning name: alpha
SUSAN: getting value name for: double* %B
inst from IRNaming: double* %B
original name : B
returning name: B
SUSAN: getting value name for: double* %A
inst from IRNaming: double* %A
original name : A
returning name: A
SUSAN: getting value name for: i32 %gridDim.x
SUSAN: getting value name for: i32 %gridDim.y
SUSAN: getting value name for: i32 %gridDim.z
SUSAN: getting value name for: i32 %blockDim.x
SUSAN: getting value name for: i32 %blockDim.y
SUSAN: getting value name for: i32 %blockDim.z
SUSAN: getting value name for: i32 %blockIdx.x
SUSAN: getting value name for: i32 %blockIdx.y
SUSAN: getting value name for: i32 %blockIdx.z
SUSAN: getting value name for: i32 %threadIdx.x
SUSAN: getting value name for: i32 %threadIdx.y
SUSAN: getting value name for: i32 %threadIdx.z
SUSAN: getting value name for:   %add = add i32 %mul, %threadIdx.x, !dbg !1117
inst from IRNaming:   %add = add i32 %mul, %threadIdx.x, !dbg !1117
original name : i
returning name: i
SUSAN: declaring varName 5298: i
SUSAN: declared locals:
SUSAN: declaring 3252:   %add = add i32 %mul, %threadIdx.x, !dbg !1117
SUSAN: getting value name for:   %add = add i32 %mul, %threadIdx.x, !dbg !1117
inst from IRNaming:   %add = add i32 %mul, %threadIdx.x, !dbg !1117
original name : i
returning name: i
SUSAN: declaring with reconstructed name 3286: i
SUSAN: inst at 5950:   %add = add i32 %mul, %threadIdx.x, !dbg !1117
SUSAN: declaring   %add = add i32 %mul, %threadIdx.x, !dbg !1117
SUSAN: printing type at 5937: i32
SUSAN: getting value name for:   %add7 = add i32 %mul5, %threadIdx.y, !dbg !1120
inst from IRNaming:   %add7 = add i32 %mul5, %threadIdx.y, !dbg !1120
original name : j
returning name: j
SUSAN: declaring varName 5298: j
SUSAN: declared locals:
i
SUSAN: declaring 3252:   %add7 = add i32 %mul5, %threadIdx.y, !dbg !1120
SUSAN: getting value name for:   %add7 = add i32 %mul5, %threadIdx.y, !dbg !1120
inst from IRNaming:   %add7 = add i32 %mul5, %threadIdx.y, !dbg !1120
original name : j
returning name: j
SUSAN: declaring with reconstructed name 3286: j
SUSAN: inst at 5950:   %add7 = add i32 %mul5, %threadIdx.y, !dbg !1120
SUSAN: declaring   %add7 = add i32 %mul5, %threadIdx.y, !dbg !1120
SUSAN: printing type at 5937: i32
SUSAN: am I here 6807??
IfElse Region with entry block: entry
thenSubRegions : 
SUSAN: declaring 3252:   %add = add i32 %mul, %threadIdx.x, !dbg !1117
SUSAN: getting value name for:   %add = add i32 %mul, %threadIdx.x, !dbg !1117
inst from IRNaming:   %add = add i32 %mul, %threadIdx.x, !dbg !1117
original name : i
returning name: i
SUSAN: declaring with reconstructed name 3286: i
SUSAN: getting value name for:   %add = add i32 %mul, %threadIdx.x, !dbg !1117
inst from IRNaming:   %add = add i32 %mul, %threadIdx.x, !dbg !1117
original name : i
returning name: i
CBackend: writeOperand 3595:   %mul = mul i32 %blockDim.x, %blockIdx.x, !dbg !1116
CBackend: writeOperand 3595: i32 %blockDim.x
SUSAN: getting value name for: i32 %blockDim.x
CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595: i32 %blockIdx.x
SUSAN: getting value name for: i32 %blockIdx.x
CBackend: writeoperand here 3674? 
CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595: i32 %threadIdx.x
SUSAN: getting value name for: i32 %threadIdx.x
CBackend: writeoperand here 3674? 
SUSAN: declaring 3252:   %add7 = add i32 %mul5, %threadIdx.y, !dbg !1120
SUSAN: getting value name for:   %add7 = add i32 %mul5, %threadIdx.y, !dbg !1120
inst from IRNaming:   %add7 = add i32 %mul5, %threadIdx.y, !dbg !1120
original name : j
returning name: j
SUSAN: declaring with reconstructed name 3286: j
SUSAN: getting value name for:   %add7 = add i32 %mul5, %threadIdx.y, !dbg !1120
inst from IRNaming:   %add7 = add i32 %mul5, %threadIdx.y, !dbg !1120
original name : j
returning name: j
CBackend: writeOperand 3595:   %mul5 = mul i32 %blockDim.y, %blockIdx.y, !dbg !1119
CBackend: writeOperand 3595: i32 %blockDim.y
SUSAN: getting value name for: i32 %blockDim.y
CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595: i32 %blockIdx.y
SUSAN: getting value name for: i32 %blockIdx.y
CBackend: writeoperand here 3674? 
CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595: i32 %threadIdx.y
SUSAN: getting value name for: i32 %threadIdx.y
CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595:   %cmp = icmp slt i32 %add, %m, !dbg !1122
CBackend: writeOperand 3595:   %add = add i32 %mul, %threadIdx.x, !dbg !1117
SUSAN: getting value name for:   %add = add i32 %mul, %threadIdx.x, !dbg !1117
inst from IRNaming:   %add = add i32 %mul, %threadIdx.x, !dbg !1117
original name : i
returning name: i
CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595: i32 %m
SUSAN: getting value name for: i32 %m
inst from IRNaming: i32 %m
original name : m
returning name: m
CBackend: writeoperand here 3674? 
CBackend: writeoperand here 3674? 
IfElse Region with entry block: land.lhs.true
thenSubRegions : 
CBackend: writeOperand 3595:   %cmp8 = icmp slt i32 %add7, %n, !dbg !1125
CBackend: writeOperand 3595:   %add7 = add i32 %mul5, %threadIdx.y, !dbg !1120
SUSAN: getting value name for:   %add7 = add i32 %mul5, %threadIdx.y, !dbg !1120
inst from IRNaming:   %add7 = add i32 %mul5, %threadIdx.y, !dbg !1120
original name : j
returning name: j
CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595: i32 %n
SUSAN: getting value name for: i32 %n
inst from IRNaming: i32 %n
original name : n
returning name: n
CBackend: writeoperand here 3674? 
CBackend: writeoperand here 3674? 
Linear Region with entry block: if.then
SUSAN: printing bb:if.then
CBEBackend: printing bb 7082 if.then
SUSAN: printing instruction   store double %mul11, double* %arrayidx, align 8, !dbg !1130 at 6678
CBEBackend: printing store Inst:   store double %mul11, double* %arrayidx, align 8, !dbg !1130
CBackend: here? 10442
SUSAN: GEPINST:   %arrayidx = getelementptr inbounds double, double* %B, i64 %idxprom, !dbg !1129
SUSAN: dereferenceTimes = 1
SUSAN: printing GEP:   %arrayidx = getelementptr inbounds double, double* %B, i64 %idxprom, !dbg !1129
SUSAN: accessMemory true
SUSAN: first index is integer/pointertype type
SUSAN: writing ptr 10000:double* %B
SUSAN: writing ptr 9994: double* %B
SUSAN: getting value name for: double* %B
inst from IRNaming: double* %B
original name : B
returning name: B
CBackend: writeOperand 3595:   %idxprom = sext i32 %add10 to i64, !dbg !1129
SUSAN: visiting cast:   %idxprom = sext i32 %add10 to i64, !dbg !1129
CBackend: writeOperand 3595:   %add10 = add nsw i32 %mul9, %add7, !dbg !1128
CBackend: writeOperand 3595:   %mul9 = mul nsw i32 %add, %n, !dbg !1127
CBackend: writeOperand 3595:   %add = add i32 %mul, %threadIdx.x, !dbg !1117
SUSAN: getting value name for:   %add = add i32 %mul, %threadIdx.x, !dbg !1117
inst from IRNaming:   %add = add i32 %mul, %threadIdx.x, !dbg !1117
original name : i
returning name: i
CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595: i32 %n
SUSAN: getting value name for: i32 %n
inst from IRNaming: i32 %n
original name : n
returning name: n
CBackend: writeoperand here 3674? 
CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595:   %add7 = add i32 %mul5, %threadIdx.y, !dbg !1120
SUSAN: getting value name for:   %add7 = add i32 %mul5, %threadIdx.y, !dbg !1120
inst from IRNaming:   %add7 = add i32 %mul5, %threadIdx.y, !dbg !1120
original name : j
returning name: j
CBackend: writeoperand here 3674? 
CBackend: writeoperand here 3674? 
CBackend: writeoperand here 3674? 
CBackend: here? 10445
CBackend: writeOperand 3595:   %mul11 = fmul contract double %0, %alpha, !dbg !1130
CBackend: writeOperand 3595:   %0 = load double, double* %arrayidx, align 8, !dbg !1130
SUSAN: loadInst:   %0 = load double, double* %arrayidx, align 8, !dbg !1130
SUSAN: GEPINST:   %arrayidx = getelementptr inbounds double, double* %B, i64 %idxprom, !dbg !1129
SUSAN: dereferenceTimes = 1
SUSAN: printing GEP:   %arrayidx = getelementptr inbounds double, double* %B, i64 %idxprom, !dbg !1129
SUSAN: accessMemory true
SUSAN: first index is integer/pointertype type
SUSAN: writing ptr 10000:double* %B
SUSAN: writing ptr 9994: double* %B
SUSAN: getting value name for: double* %B
inst from IRNaming: double* %B
original name : B
returning name: B
CBackend: writeOperand 3595:   %idxprom = sext i32 %add10 to i64, !dbg !1129
SUSAN: visiting cast:   %idxprom = sext i32 %add10 to i64, !dbg !1129
CBackend: writeOperand 3595:   %add10 = add nsw i32 %mul9, %add7, !dbg !1128
CBackend: writeOperand 3595:   %mul9 = mul nsw i32 %add, %n, !dbg !1127
CBackend: writeOperand 3595:   %add = add i32 %mul, %threadIdx.x, !dbg !1117
SUSAN: getting value name for:   %add = add i32 %mul, %threadIdx.x, !dbg !1117
inst from IRNaming:   %add = add i32 %mul, %threadIdx.x, !dbg !1117
original name : i
returning name: i
CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595: i32 %n
SUSAN: getting value name for: i32 %n
inst from IRNaming: i32 %n
original name : n
returning name: n
CBackend: writeoperand here 3674? 
CBackend: writeoperand here 3674? 
CBackend: writeOperand 3595:   %add7 = add i32 %mul5, %threadIdx.y, !dbg !1120
SUSAN: getting value name for:   %add7 = add i32 %mul5, %threadIdx.y, !dbg !1120
inst from IRNaming:   %add7 = add i32 %mul5, %threadIdx.y, !dbg !1120
original name : j
returning name: j
CBackend: writeoperand here 3674? 
CBackend: writeoperand here 3674? 
CBackend: writeoperand here 3674? 
CBackend: writeoperand here 3674? 
SUSAN: am I here 8049?
CBackend: writeOperand 3595: double %alpha
SUSAN: getting value name for: double %alpha
inst from IRNaming: double %alpha
original name : alpha
returning name: alpha
CBackend: writeoperand here 3674? 
CBackend: writeoperand here 3674? 
CBackend: here? 10462
printing unconditional branch   br label %if.end, !dbg !1129
Linear Region with entry block: if.end
SUSAN: printing bb:if.end
CBEBackend: printing bb 7082 if.end
CBackend: iterating function 1759: llvm.dbg.value
CBackend: iterating function 1759: memcpy
TOTAL VARIABLES: 80
RECONSTRUCTED VARIABLES: 57
SUSAN: getting value name for: 
declare dso_local i32 @cudaSetupArgument(i8*, i64, i64)

SUSAN: getting value name for: 
declare dso_local i32 @cudaLaunch(i8*)

SUSAN: getting value name for: 
; Function Attrs: noinline norecurse uwtable
define dso_local i32 @main(i32 %argc, i8** %argv) #2 !dbg !1107 {
entry:
  %alpha = alloca double, align 8
  call void @llvm.dbg.value(metadata i32 %argc, metadata !1110, metadata !DIExpression()), !dbg !1111
  call void @llvm.dbg.value(metadata i8** %argv, metadata !1112, metadata !DIExpression()), !dbg !1111
  %arrayidx = getelementptr inbounds i8*, i8** %argv, i64 2, !dbg !1113
  %0 = load i8*, i8** %arrayidx, align 8, !dbg !1113
  %call = call i32 @atoi(i8* %0) #10, !dbg !1114
  call void @llvm.dbg.value(metadata i32 %call, metadata !1115, metadata !DIExpression()), !dbg !1111
  %arrayidx1 = getelementptr inbounds i8*, i8** %argv, i64 3, !dbg !1116
  %1 = load i8*, i8** %arrayidx1, align 8, !dbg !1116
  %call2 = call i32 @atoi(i8* %1) #10, !dbg !1117
  call void @llvm.dbg.value(metadata i32 %call2, metadata !1118, metadata !DIExpression()), !dbg !1111
  %arrayidx3 = getelementptr inbounds i8*, i8** %argv, i64 1, !dbg !1119
  %2 = load i8*, i8** %arrayidx3, align 8, !dbg !1119
  %call4 = call i32 @atoi(i8* %2) #10, !dbg !1120
  call void @llvm.dbg.value(metadata i32 %call4, metadata !1121, metadata !DIExpression()), !dbg !1111
  call void @llvm.dbg.declare(metadata double* %alpha, metadata !1122, metadata !DIExpression()), !dbg !1123
  %mul = mul nsw i32 %call, %call2, !dbg !1124
  %conv = sext i32 %mul to i64, !dbg !1125
  %mul5 = mul i64 %conv, 8, !dbg !1126, !tulip.target.datasize !1127
  %call6 = call noalias i8* @malloc(i64 %mul5) #11, !dbg !1128, !tulip.target.mapdata.to !1129
  %3 = bitcast i8* %call6 to double*, !dbg !1130
  call void @llvm.dbg.value(metadata double* %3, metadata !1131, metadata !DIExpression()), !dbg !1111
  %mul7 = mul nsw i32 %call2, %call, !dbg !1132
  %conv8 = sext i32 %mul7 to i64, !dbg !1133
  %mul9 = mul i64 %conv8, 8, !dbg !1134, !tulip.target.datasize !1135
  %call10 = call noalias i8* @malloc(i64 %mul9) #11, !dbg !1136, !tulip.target.mapdata.to !1137, !tulip.target.mapdata.from !1139
  %4 = bitcast i8* %call10 to double*, !dbg !1140
  call void @llvm.dbg.value(metadata double* %4, metadata !1141, metadata !DIExpression()), !dbg !1111
  call void @_ZL10init_arrayiiPdS_S_(i32 %call, i32 %call2, double* %alpha, double* %3, double* %4), !dbg !1142
  %5 = bitcast double* %3 to i8*, !dbg !1143
  %6 = bitcast double* %3 to i8*, !dbg !1144
  %mul19 = mul nsw i32 %call, %call2, !dbg !1145
  %conv20 = sext i32 %mul19 to i64, !dbg !1146
  %mul21 = mul i64 %conv20, 8, !dbg !1147
  %call22 = call i32 @cudaMemcpy(i8* %5, i8* %6, i64 %mul21, i32 1), !dbg !1148, !tulip.target.start.of.map !1149
  %7 = load double, double* %alpha, align 8, !dbg !1150
  call void @_ZL6kerneliidPdS_(i32 %call, i32 %call2, double %7, double* %4, double* %3), !dbg !1151
  %8 = bitcast double* %4 to i8*, !dbg !1152
  %9 = bitcast double* %4 to i8*, !dbg !1153
  %mul27 = mul nsw i32 %call2, %call, !dbg !1154
  %conv28 = sext i32 %mul27 to i64, !dbg !1155
  %mul29 = mul i64 %conv28, 8, !dbg !1156
  %call30 = call i32 @cudaMemcpy(i8* %8, i8* %9, i64 %mul29, i32 2), !dbg !1157, !tulip.target.end.of.map !1149
  %cmp = icmp eq i32 %call4, 1, !dbg !1158
  br i1 %cmp, label %if.then, label %if.end, !dbg !1160

if.then:                                          ; preds = %entry
  call void @_ZL11print_arrayiiPd(i32 %call2, i32 %call, double* %4), !dbg !1161
  br label %if.end, !dbg !1161

if.end:                                           ; preds = %if.then, %entry
  %10 = bitcast double* %3 to i8*, !dbg !1162
  call void @free(i8* %10) #11, !dbg !1163
  %11 = bitcast double* %4 to i8*, !dbg !1164
  call void @free(i8* %11) #11, !dbg !1165
  ret i32 0, !dbg !1166
}

SUSAN: getting value name for: 
; Function Attrs: noinline nounwind uwtable
define internal void @_ZL10init_arrayiiPdS_S_(i32 %n, i32 %m, double* %alpha, double* %A, double* %B) #5 !dbg !1167 {
entry:
  call void @llvm.dbg.value(metadata i32 %n, metadata !1170, metadata !DIExpression()), !dbg !1171
  call void @llvm.dbg.value(metadata i32 %m, metadata !1172, metadata !DIExpression()), !dbg !1171
  call void @llvm.dbg.value(metadata double* %alpha, metadata !1173, metadata !DIExpression()), !dbg !1171
  call void @llvm.dbg.value(metadata double* %A, metadata !1174, metadata !DIExpression()), !dbg !1171
  call void @llvm.dbg.value(metadata double* %B, metadata !1175, metadata !DIExpression()), !dbg !1171
  store double 3.241200e+04, double* %alpha, align 8, !dbg !1176
  call void @llvm.dbg.value(metadata i32 0, metadata !1177, metadata !DIExpression()), !dbg !1171
  %0 = sext i32 %n to i64, !dbg !1178
  %1 = sext i32 %m to i64, !dbg !1178
  %2 = sext i32 %n to i64, !dbg !1178
  br label %for.cond, !dbg !1178

for.cond:                                         ; preds = %for.inc4, %entry
  %indvars.iv9 = phi i64 [ %indvars.iv.next10, %for.inc4 ], [ 0, %entry ], !dbg !1180
  call void @llvm.dbg.value(metadata i64 %indvars.iv9, metadata !1177, metadata !DIExpression()), !dbg !1171
  %cmp = icmp slt i64 %indvars.iv9, %1, !dbg !1181
  br i1 %cmp, label %for.body, label %for.end6, !dbg !1183

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.value(metadata i32 0, metadata !1184, metadata !DIExpression()), !dbg !1171
  br label %for.cond1, !dbg !1185

for.cond1:                                        ; preds = %for.inc, %for.body
  %indvars.iv6 = phi i64 [ %indvars.iv.next7, %for.inc ], [ 0, %for.body ], !dbg !1188
  call void @llvm.dbg.value(metadata i64 %indvars.iv6, metadata !1184, metadata !DIExpression()), !dbg !1171
  %cmp2 = icmp slt i64 %indvars.iv6, %0, !dbg !1189
  br i1 %cmp2, label %for.body3, label %for.end, !dbg !1191

for.body3:                                        ; preds = %for.cond1
  %3 = mul nsw i64 %indvars.iv9, %2, !dbg !1192
  %4 = add nsw i64 %3, %indvars.iv6, !dbg !1194
  %arrayidx = getelementptr inbounds double, double* %B, i64 %4, !dbg !1195
  store double 0.000000e+00, double* %arrayidx, align 8, !dbg !1196
  br label %for.inc, !dbg !1197

for.inc:                                          ; preds = %for.body3
  %indvars.iv.next7 = add nuw nsw i64 %indvars.iv6, 1, !dbg !1198
  call void @llvm.dbg.value(metadata i32 undef, metadata !1184, metadata !DIExpression(DW_OP_plus_uconst, 1, DW_OP_stack_value)), !dbg !1171
  br label %for.cond1, !dbg !1199, !llvm.loop !1200

for.end:                                          ; preds = %for.cond1
  br label %for.inc4, !dbg !1202

for.inc4:                                         ; preds = %for.end
  %indvars.iv.next10 = add nuw nsw i64 %indvars.iv9, 1, !dbg !1203
  call void @llvm.dbg.value(metadata i32 undef, metadata !1177, metadata !DIExpression(DW_OP_plus_uconst, 1, DW_OP_stack_value)), !dbg !1171
  br label %for.cond, !dbg !1204, !llvm.loop !1205

for.end6:                                         ; preds = %for.cond
  call void @llvm.dbg.value(metadata i32 0, metadata !1177, metadata !DIExpression()), !dbg !1171
  %5 = sext i32 %m to i64, !dbg !1207
  %6 = sext i32 %n to i64, !dbg !1207
  %7 = sext i32 %m to i64, !dbg !1207
  br label %for.cond7, !dbg !1207

for.cond7:                                        ; preds = %for.inc32, %for.end6
  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc32 ], [ 0, %for.end6 ], !dbg !1209
  call void @llvm.dbg.value(metadata i64 %indvars.iv3, metadata !1177, metadata !DIExpression()), !dbg !1171
  %cmp8 = icmp slt i64 %indvars.iv3, %6, !dbg !1210
  br i1 %cmp8, label %for.body9, label %for.end34, !dbg !1212

for.body9:                                        ; preds = %for.cond7
  call void @llvm.dbg.value(metadata i32 0, metadata !1184, metadata !DIExpression()), !dbg !1171
  br label %for.cond10, !dbg !1213

for.cond10:                                       ; preds = %for.inc29, %for.body9
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc29 ], [ 0, %for.body9 ], !dbg !1215
  %j.1 = phi i32 [ 0, %for.body9 ], [ %inc30, %for.inc29 ], !dbg !1215
  call void @llvm.dbg.value(metadata i64 %indvars.iv, metadata !1184, metadata !DIExpression()), !dbg !1171
  %cmp11 = icmp slt i64 %indvars.iv, %5, !dbg !1216
  br i1 %cmp11, label %for.body12, label %for.end31, !dbg !1218

for.body12:                                       ; preds = %for.cond10
  %8 = trunc i64 %indvars.iv3 to i32, !dbg !1219
  %conv = sitofp i32 %8 to double, !dbg !1219
  %9 = trunc i64 %indvars.iv to i32, !dbg !1221
  %conv13 = sitofp i32 %9 to double, !dbg !1221
  %mul14 = fmul contract double %conv, %conv13, !dbg !1222
  %conv15 = sitofp i32 %m to double, !dbg !1223
  %div = fdiv double %mul14, %conv15, !dbg !1224
  %10 = mul nsw i64 %indvars.iv3, %7, !dbg !1225
  %11 = add nsw i64 %10, %indvars.iv, !dbg !1226
  %arrayidx19 = getelementptr inbounds double, double* %A, i64 %11, !dbg !1227
  store double %div, double* %arrayidx19, align 8, !dbg !1228
  %12 = trunc i64 %indvars.iv3 to i32, !dbg !1229
  %conv20 = sitofp i32 %12 to double, !dbg !1229
  %13 = trunc i64 %indvars.iv to i32, !dbg !1230
  %conv21 = sitofp i32 %13 to double, !dbg !1230
  %mul22 = fmul contract double %conv20, %conv21, !dbg !1231
  %conv23 = sitofp i32 %n to double, !dbg !1232
  %div24 = fdiv double %mul22, %conv23, !dbg !1233
  %mul25 = mul nsw i32 %j.1, %n, !dbg !1234
  %14 = trunc i64 %indvars.iv to i32, !dbg !1235
  %add26 = add nsw i32 %mul25, %14, !dbg !1235
  %idxprom27 = sext i32 %add26 to i64, !dbg !1236
  %arrayidx28 = getelementptr inbounds double, double* %B, i64 %idxprom27, !dbg !1236
  store double %div24, double* %arrayidx28, align 8, !dbg !1237
  br label %for.inc29, !dbg !1238

for.inc29:                                        ; preds = %for.body12
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !1239
  %inc30 = add nuw nsw i32 %j.1, 1, !dbg !1239
  call void @llvm.dbg.value(metadata i32 %inc30, metadata !1184, metadata !DIExpression()), !dbg !1171
  br label %for.cond10, !dbg !1240, !llvm.loop !1241

for.end31:                                        ; preds = %for.cond10
  br label %for.inc32, !dbg !1242

for.inc32:                                        ; preds = %for.end31
  %indvars.iv.next4 = add nuw nsw i64 %indvars.iv3, 1, !dbg !1243
  call void @llvm.dbg.value(metadata i32 undef, metadata !1177, metadata !DIExpression(DW_OP_plus_uconst, 1, DW_OP_stack_value)), !dbg !1171
  br label %for.cond7, !dbg !1244, !llvm.loop !1245

for.end34:                                        ; preds = %for.cond7
  ret void, !dbg !1247
}

SUSAN: getting value name for: 
declare dso_local i32 @cudaMemcpy(i8*, i8*, i64, i32) #6

SUSAN: getting value name for: 
; Function Attrs: noinline uwtable
define internal void @_ZL6kerneliidPdS_(i32 %n, i32 %m, double %alpha, double* %B, double* %A) #7 !dbg !1248 {
entry:
  %agg.tmp = alloca %struct.dim3, align 4
  %agg.tmp1 = alloca %struct.dim3, align 4
  %agg.tmp.coerce = alloca { i64, i32 }, align 4
  %agg.tmp1.coerce = alloca { i64, i32 }, align 4
  %block = alloca %struct.dim3, align 4
  %grid = alloca %struct.dim3, align 4
  %agg.tmp5 = alloca %struct.dim3, align 4
  %agg.tmp6 = alloca %struct.dim3, align 4
  %agg.tmp5.coerce = alloca { i64, i32 }, align 4
  %agg.tmp6.coerce = alloca { i64, i32 }, align 4
  call void @llvm.dbg.value(metadata i32 %n, metadata !1251, metadata !DIExpression()), !dbg !1252
  call void @llvm.dbg.value(metadata i32 %m, metadata !1253, metadata !DIExpression()), !dbg !1252
  call void @llvm.dbg.value(metadata double %alpha, metadata !1254, metadata !DIExpression()), !dbg !1252
  call void @llvm.dbg.value(metadata double* %B, metadata !1255, metadata !DIExpression()), !dbg !1252
  call void @llvm.dbg.value(metadata double* %A, metadata !1256, metadata !DIExpression()), !dbg !1252
  call void @llvm.dbg.value(metadata i32 256, metadata !1257, metadata !DIExpression()), !dbg !1252
  %call = call i32 @_ZL10num_blocksii(i32 %n, i32 256), !dbg !1259
  %dim3gep.0 = getelementptr %struct.dim3, %struct.dim3* %agg.tmp, i32 0, i32 0
  store i32 %call, i32* %dim3gep.0
  %dim3gep.1 = getelementptr %struct.dim3, %struct.dim3* %agg.tmp, i32 0, i32 1
  store i32 1, i32* %dim3gep.1
  %dim3gep.2 = getelementptr %struct.dim3, %struct.dim3* %agg.tmp, i32 0, i32 2
  store i32 1, i32* %dim3gep.2
  %dim3gep.01 = getelementptr %struct.dim3, %struct.dim3* %agg.tmp1, i32 0, i32 0
  store i32 256, i32* %dim3gep.01
  %dim3gep.12 = getelementptr %struct.dim3, %struct.dim3* %agg.tmp1, i32 0, i32 1
  store i32 1, i32* %dim3gep.12
  %dim3gep.23 = getelementptr %struct.dim3, %struct.dim3* %agg.tmp1, i32 0, i32 2
  store i32 1, i32* %dim3gep.23
  %0 = bitcast { i64, i32 }* %agg.tmp.coerce to i8*, !dbg !1260
  %1 = bitcast %struct.dim3* %agg.tmp to i8*, !dbg !1260
  %2 = call i8* @memcpy(i8* %0, i8* %1, i64 12), !dbg !1260
  %3 = bitcast { i64, i32 }* %agg.tmp1.coerce to i8*, !dbg !1260
  %4 = bitcast %struct.dim3* %agg.tmp1 to i8*, !dbg !1260
  %5 = call i8* @memcpy(i8* %3, i8* %4, i64 12), !dbg !1260
  br label %header.0

header.0:                                         ; preds = %latch.0, %entry
  %indvar.0 = phi i32 [ 0, %entry ], [ %indvar.next.0, %latch.0 ]
  %exitcond24 = icmp ne i32 %indvar.0, %call
  br i1 %exitcond24, label %header.1.preheader, label %kcall.end, !tulip.doall.loop.grid !1149

header.1.preheader:                               ; preds = %header.0
  br label %header.1

header.1:                                         ; preds = %header.1.preheader, %latch.1
  %indvar.1 = phi i32 [ %indvar.next.1, %latch.1 ], [ 0, %header.1.preheader ]
  %exitcond23 = icmp ne i32 %indvar.1, 256
  br i1 %exitcond23, label %kcall.configok, label %latch.0, !tulip.doall.loop.block !1149

latch.1:                                          ; preds = %kcall.configok
  %indvar.next.1 = add nuw nsw i32 %indvar.1, 1
  br label %header.1

latch.0:                                          ; preds = %header.1
  %indvar.next.0 = add i32 %indvar.0, 1
  br label %header.0

kcall.configok:                                   ; preds = %header.1
  call void @_Z15kernel_contractiidPdS_.1(i32 %n, i32 %m, double %alpha, double* %B, double* %A, i32 %call, i32 1, i32 1, i32 256, i32 1, i32 1, i32 %indvar.0, i32 0, i32 0, i32 %indvar.1, i32 0, i32 0)
  br label %latch.1

kcall.end:                                        ; preds = %header.0
  call void @llvm.dbg.declare(metadata %struct.dim3* %block, metadata !1261, metadata !DIExpression()), !dbg !1286
  %dim3gep.04 = getelementptr %struct.dim3, %struct.dim3* %block, i32 0, i32 0
  store i32 8, i32* %dim3gep.04
  %dim3gep.15 = getelementptr %struct.dim3, %struct.dim3* %block, i32 0, i32 1
  store i32 32, i32* %dim3gep.15
  %dim3gep.26 = getelementptr %struct.dim3, %struct.dim3* %block, i32 0, i32 2
  store i32 1, i32* %dim3gep.26
  call void @llvm.dbg.declare(metadata %struct.dim3* %grid, metadata !1287, metadata !DIExpression()), !dbg !1288
  %x = getelementptr inbounds %struct.dim3, %struct.dim3* %block, i32 0, i32 0, !dbg !1289
  %6 = load i32, i32* %x, align 4, !dbg !1289
  %call3 = call i32 @_ZL10num_blocksii(i32 %m, i32 %6), !dbg !1290
  %y = getelementptr inbounds %struct.dim3, %struct.dim3* %block, i32 0, i32 1, !dbg !1291
  %7 = load i32, i32* %y, align 4, !dbg !1291
  %call4 = call i32 @_ZL10num_blocksii(i32 %n, i32 %7), !dbg !1292
  %dim3gep.07 = getelementptr %struct.dim3, %struct.dim3* %grid, i32 0, i32 0
  store i32 %call3, i32* %dim3gep.07
  %dim3gep.18 = getelementptr %struct.dim3, %struct.dim3* %grid, i32 0, i32 1
  store i32 %call4, i32* %dim3gep.18
  %dim3gep.29 = getelementptr %struct.dim3, %struct.dim3* %grid, i32 0, i32 2
  store i32 1, i32* %dim3gep.29
  %8 = bitcast %struct.dim3* %agg.tmp5 to i8*, !dbg !1293
  %9 = bitcast %struct.dim3* %grid to i8*, !dbg !1293
  %10 = call i8* @memcpy(i8* %8, i8* %9, i64 12), !dbg !1293
  %11 = bitcast %struct.dim3* %agg.tmp6 to i8*, !dbg !1294
  %12 = bitcast %struct.dim3* %block to i8*, !dbg !1294
  %13 = call i8* @memcpy(i8* %11, i8* %12, i64 12), !dbg !1294
  %14 = bitcast { i64, i32 }* %agg.tmp5.coerce to i8*, !dbg !1295
  %15 = bitcast %struct.dim3* %agg.tmp5 to i8*, !dbg !1295
  %16 = call i8* @memcpy(i8* %14, i8* %15, i64 12), !dbg !1295
  %17 = bitcast { i64, i32 }* %agg.tmp6.coerce to i8*, !dbg !1295
  %18 = bitcast %struct.dim3* %agg.tmp6 to i8*, !dbg !1295
  %19 = call i8* @memcpy(i8* %17, i8* %18, i64 12), !dbg !1295
  br label %header.010

header.010:                                       ; preds = %latch.013, %kcall.end
  %indvar.017 = phi i32 [ 0, %kcall.end ], [ %indvar.next.019, %latch.013 ]
  %exitcond22 = icmp ne i32 %indvar.017, %call3
  br i1 %exitcond22, label %header.111.preheader, label %kcall.end10, !tulip.doall.loop.grid.collapse !1149

header.111.preheader:                             ; preds = %header.010
  br label %header.111

header.111:                                       ; preds = %header.111.preheader, %latch.112
  %indvar.114 = phi i32 [ %indvar.next.116, %latch.112 ], [ 0, %header.111.preheader ]
  %exitcond21 = icmp ne i32 %indvar.114, %call4
  br i1 %exitcond21, label %header.2.preheader, label %latch.013

header.2.preheader:                               ; preds = %header.111
  br label %header.2

header.2:                                         ; preds = %header.2.preheader, %latch.2
  %indvar.2 = phi i32 [ %indvar.next.2, %latch.2 ], [ 0, %header.2.preheader ]
  %exitcond20 = icmp ne i32 %indvar.2, 8
  br i1 %exitcond20, label %header.3.preheader, label %latch.112, !tulip.doall.loop.block.collapse !1149

header.3.preheader:                               ; preds = %header.2
  br label %header.3

header.3:                                         ; preds = %header.3.preheader, %latch.3
  %indvar.3 = phi i32 [ %indvar.next.3, %latch.3 ], [ 0, %header.3.preheader ]
  %exitcond = icmp ne i32 %indvar.3, 32
  br i1 %exitcond, label %kcall.configok9, label %latch.2

latch.3:                                          ; preds = %kcall.configok9
  %indvar.next.3 = add nuw nsw i32 %indvar.3, 1
  br label %header.3

latch.2:                                          ; preds = %header.3
  %indvar.next.2 = add nuw nsw i32 %indvar.2, 1
  br label %header.2

latch.112:                                        ; preds = %header.2
  %indvar.next.116 = add i32 %indvar.114, 1
  br label %header.111

latch.013:                                        ; preds = %header.111
  %indvar.next.019 = add i32 %indvar.017, 1
  br label %header.010

kcall.configok9:                                  ; preds = %header.3
  call void @_Z12kernel_alphaiidPdS_.2(i32 %n, i32 %m, double %alpha, double* %B, double* %A, i32 %call3, i32 %call4, i32 1, i32 8, i32 32, i32 1, i32 %indvar.017, i32 %indvar.114, i32 0, i32 %indvar.2, i32 %indvar.3, i32 0)
  br label %latch.3

kcall.end10:                                      ; preds = %header.010
  ret void, !dbg !1296
}

SUSAN: getting value name for: 
; Function Attrs: noinline uwtable
define internal void @_ZL11print_arrayiiPd(i32 %m, i32 %n, double* %B) #7 !dbg !1297 {
entry:
  call void @llvm.dbg.value(metadata i32 %m, metadata !1300, metadata !DIExpression()), !dbg !1301
  call void @llvm.dbg.value(metadata i32 %n, metadata !1302, metadata !DIExpression()), !dbg !1301
  call void @llvm.dbg.value(metadata double* %B, metadata !1303, metadata !DIExpression()), !dbg !1301
  call void @llvm.dbg.value(metadata i32 0, metadata !1304, metadata !DIExpression()), !dbg !1301
  %0 = sext i32 %n to i64, !dbg !1305
  %1 = sext i32 %m to i64, !dbg !1305
  %2 = sext i32 %n to i64, !dbg !1305
  %3 = sext i32 %n to i64, !dbg !1305
  br label %for.cond, !dbg !1305

for.cond:                                         ; preds = %for.inc8, %entry
  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %for.inc8 ], [ 0, %entry ], !dbg !1307
  call void @llvm.dbg.value(metadata i64 %indvars.iv3, metadata !1304, metadata !DIExpression()), !dbg !1301
  %cmp = icmp slt i64 %indvars.iv3, %1, !dbg !1308
  br i1 %cmp, label %for.body, label %for.end10, !dbg !1310

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.value(metadata i32 0, metadata !1311, metadata !DIExpression()), !dbg !1301
  br label %for.cond1, !dbg !1312

for.cond1:                                        ; preds = %for.inc, %for.body
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body ], !dbg !1314
  call void @llvm.dbg.value(metadata i64 %indvars.iv, metadata !1311, metadata !DIExpression()), !dbg !1301
  %cmp2 = icmp slt i64 %indvars.iv, %0, !dbg !1315
  br i1 %cmp2, label %for.body3, label %for.end, !dbg !1317

for.body3:                                        ; preds = %for.cond1
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !1318
  %5 = mul nsw i64 %indvars.iv3, %2, !dbg !1320
  %6 = add nsw i64 %5, %indvars.iv, !dbg !1321
  %arrayidx = getelementptr inbounds double, double* %B, i64 %6, !dbg !1322
  %7 = load double, double* %arrayidx, align 8, !dbg !1322
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %4, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), double %7), !dbg !1323
  %8 = mul nsw i64 %indvars.iv3, %3, !dbg !1324
  %9 = add nsw i64 %8, %indvars.iv, !dbg !1326
  %10 = trunc i64 %9 to i32, !dbg !1327
  %rem = srem i32 %10, 20, !dbg !1327
  %cmp6 = icmp eq i32 %rem, 0, !dbg !1328
  br i1 %cmp6, label %if.then, label %if.end, !dbg !1329

if.then:                                          ; preds = %for.body3
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !1330
  %call7 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %11, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !1331
  br label %if.end, !dbg !1331

if.end:                                           ; preds = %if.then, %for.body3
  br label %for.inc, !dbg !1332

for.inc:                                          ; preds = %if.end
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !1333
  call void @llvm.dbg.value(metadata i32 undef, metadata !1311, metadata !DIExpression(DW_OP_plus_uconst, 1, DW_OP_stack_value)), !dbg !1301
  br label %for.cond1, !dbg !1334, !llvm.loop !1335

for.end:                                          ; preds = %for.cond1
  br label %for.inc8, !dbg !1336

for.inc8:                                         ; preds = %for.end
  %indvars.iv.next4 = add nuw nsw i64 %indvars.iv3, 1, !dbg !1337
  call void @llvm.dbg.value(metadata i32 undef, metadata !1304, metadata !DIExpression(DW_OP_plus_uconst, 1, DW_OP_stack_value)), !dbg !1301
  br label %for.cond, !dbg !1338, !llvm.loop !1339

for.end10:                                        ; preds = %for.cond
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !1341
  %call11 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %12, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !1342
  ret void, !dbg !1343
}

SUSAN: getting value name for: 
; Function Attrs: noinline nounwind uwtable
define internal i32 @_ZL10num_blocksii(i32 %num, i32 %factor) #5 !dbg !1344 {
entry:
  call void @llvm.dbg.value(metadata i32 %num, metadata !1347, metadata !DIExpression()), !dbg !1348
  call void @llvm.dbg.value(metadata i32 %factor, metadata !1349, metadata !DIExpression()), !dbg !1348
  %add = add nsw i32 %num, %factor, !dbg !1350
  %sub = sub nsw i32 %add, 1, !dbg !1351
  %div = sdiv i32 %sub, %factor, !dbg !1352
  ret i32 %div, !dbg !1353
}

SUSAN: getting value name for: 
declare dso_local i32 @cudaConfigureCall(i64, i32, i64, i32, i64, %struct.CUstream_st*) #6

SUSAN: getting value name for: 
declare dso_local i32 @cudaMalloc(i8**, i64) #6

SUSAN: getting value name for: 
; Function Attrs: convergent noinline nounwind
define dso_local void @_Z15kernel_contractiidPdS_.1(i32 %n, i32 %m, double %alpha, double* %B, double* %A, i32 %gridDim.x, i32 %gridDim.y, i32 %gridDim.z, i32 %blockDim.x, i32 %blockDim.y, i32 %blockDim.z, i32 %blockIdx.x, i32 %blockIdx.y, i32 %blockIdx.z, i32 %threadIdx.x, i32 %threadIdx.y, i32 %threadIdx.z) #9 {
entry:
  call void @llvm.dbg.value(metadata i32 %n, metadata !1354, metadata !DIExpression()), !dbg !1356
  call void @llvm.dbg.value(metadata i32 %m, metadata !1357, metadata !DIExpression()), !dbg !1356
  call void @llvm.dbg.value(metadata double %alpha, metadata !1358, metadata !DIExpression()), !dbg !1356
  call void @llvm.dbg.value(metadata double* %B, metadata !1359, metadata !DIExpression()), !dbg !1356
  call void @llvm.dbg.value(metadata double* %A, metadata !1360, metadata !DIExpression()), !dbg !1356
  %mul = mul i32 %blockDim.x, %blockIdx.x, !dbg !1361
  %add = add i32 %mul, %threadIdx.x, !dbg !1362
  call void @llvm.dbg.value(metadata i32 %add, metadata !1363, metadata !DIExpression()), !dbg !1356
  %cmp = icmp slt i32 %add, %n, !dbg !1364
  br i1 %cmp, label %if.then, label %if.end, !dbg !1366

if.then:                                          ; preds = %entry
  call void @llvm.dbg.value(metadata i32 0, metadata !1367, metadata !DIExpression()), !dbg !1370
  %0 = sext i32 %m to i64, !dbg !1371
  %1 = sext i32 %n to i64, !dbg !1371
  %2 = sext i32 %add to i64, !dbg !1371
  %3 = sext i32 %m to i64, !dbg !1371
  %4 = sext i32 %n to i64, !dbg !1371
  %5 = sext i32 %add to i64, !dbg !1371
  br label %for.cond, !dbg !1371

for.cond:                                         ; preds = %for.inc20, %if.then
  %indvars.iv7 = phi i64 [ %indvars.iv.next8, %for.inc20 ], [ 0, %if.then ], !dbg !1370
  %indvars.iv = phi i32 [ %indvars.iv.next, %for.inc20 ], [ 1, %if.then ], !dbg !1370
  call void @llvm.dbg.value(metadata i64 %indvars.iv7, metadata !1367, metadata !DIExpression()), !dbg !1370
  %6 = sext i32 %indvars.iv to i64, !dbg !1372
  %cmp3 = icmp slt i64 %indvars.iv7, %3, !dbg !1372
  br i1 %cmp3, label %for.body, label %for.end22, !dbg !1374

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.value(metadata i64 %indvars.iv7, metadata !1375, metadata !DIExpression(DW_OP_plus_uconst, 1, DW_OP_stack_value)), !dbg !1377
  %wide.trip.count = sext i32 %m to i64, !dbg !1378
  br label %for.cond5, !dbg !1380

for.cond5:                                        ; preds = %for.inc, %for.body
  %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ %6, %for.body ], !dbg !1377
  call void @llvm.dbg.value(metadata i64 %indvars.iv1, metadata !1375, metadata !DIExpression()), !dbg !1377
  %exitcond = icmp ne i64 %indvars.iv1, %wide.trip.count, !dbg !1378
  br i1 %exitcond, label %for.body7, label %for.end, !dbg !1381

for.body7:                                        ; preds = %for.cond5
  %7 = mul nsw i64 %indvars.iv1, %0, !dbg !1382
  %8 = add nsw i64 %7, %indvars.iv7, !dbg !1383
  %arrayidx = getelementptr inbounds double, double* %A, i64 %8, !dbg !1384
  %9 = load double, double* %arrayidx, align 8, !dbg !1384
  %10 = mul nsw i64 %indvars.iv1, %1, !dbg !1385
  %11 = add nsw i64 %10, %2, !dbg !1386
  %arrayidx13 = getelementptr inbounds double, double* %B, i64 %11, !dbg !1387
  %12 = load double, double* %arrayidx13, align 8, !dbg !1387
  %mul14 = fmul contract double %9, %12, !dbg !1388
  %13 = mul nsw i64 %indvars.iv7, %4, !dbg !1389
  %14 = add nsw i64 %13, %5, !dbg !1390
  %arrayidx18 = getelementptr inbounds double, double* %B, i64 %14, !dbg !1391
  %15 = load double, double* %arrayidx18, align 8, !dbg !1392
  %add19 = fadd contract double %15, %mul14, !dbg !1392
  store double %add19, double* %arrayidx18, align 8, !dbg !1392
  br label %for.inc, !dbg !1391

for.inc:                                          ; preds = %for.body7
  %indvars.iv.next2 = add nsw i64 %indvars.iv1, 1, !dbg !1393
  call void @llvm.dbg.value(metadata i32 undef, metadata !1375, metadata !DIExpression(DW_OP_plus_uconst, 1, DW_OP_stack_value)), !dbg !1377
  br label %for.cond5, !dbg !1394, !llvm.loop !1395

for.end:                                          ; preds = %for.cond5
  br label %for.inc20, !dbg !1396

for.inc20:                                        ; preds = %for.end
  %indvars.iv.next8 = add nuw nsw i64 %indvars.iv7, 1, !dbg !1397
  call void @llvm.dbg.value(metadata i32 undef, metadata !1367, metadata !DIExpression(DW_OP_plus_uconst, 1, DW_OP_stack_value)), !dbg !1370
  %indvars.iv.next = add nuw i32 %indvars.iv, 1, !dbg !1398
  br label %for.cond, !dbg !1398, !llvm.loop !1399

for.end22:                                        ; preds = %for.cond
  br label %if.end, !dbg !1401

if.end:                                           ; preds = %for.end22, %entry
  ret void, !dbg !1402
}

SUSAN: getting value name for: 
; Function Attrs: convergent noinline nounwind
define dso_local void @_Z12kernel_alphaiidPdS_.2(i32 %n, i32 %m, double %alpha, double* %B, double* %A, i32 %gridDim.x, i32 %gridDim.y, i32 %gridDim.z, i32 %blockDim.x, i32 %blockDim.y, i32 %blockDim.z, i32 %blockIdx.x, i32 %blockIdx.y, i32 %blockIdx.z, i32 %threadIdx.x, i32 %threadIdx.y, i32 %threadIdx.z) #9 {
entry:
  call void @llvm.dbg.value(metadata i32 %n, metadata !1403, metadata !DIExpression()), !dbg !1405
  call void @llvm.dbg.value(metadata i32 %m, metadata !1406, metadata !DIExpression()), !dbg !1405
  call void @llvm.dbg.value(metadata double %alpha, metadata !1407, metadata !DIExpression()), !dbg !1405
  call void @llvm.dbg.value(metadata double* %B, metadata !1408, metadata !DIExpression()), !dbg !1405
  call void @llvm.dbg.value(metadata double* %A, metadata !1409, metadata !DIExpression()), !dbg !1405
  %mul = mul i32 %blockDim.x, %blockIdx.x, !dbg !1410
  %add = add i32 %mul, %threadIdx.x, !dbg !1411
  call void @llvm.dbg.value(metadata i32 %add, metadata !1412, metadata !DIExpression()), !dbg !1405
  %mul5 = mul i32 %blockDim.y, %blockIdx.y, !dbg !1413
  %add7 = add i32 %mul5, %threadIdx.y, !dbg !1414
  call void @llvm.dbg.value(metadata i32 %add7, metadata !1415, metadata !DIExpression()), !dbg !1405
  %cmp = icmp slt i32 %add, %m, !dbg !1416
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !1418

land.lhs.true:                                    ; preds = %entry
  %cmp8 = icmp slt i32 %add7, %n, !dbg !1419
  br i1 %cmp8, label %if.then, label %if.end, !dbg !1420

if.then:                                          ; preds = %land.lhs.true
  %mul9 = mul nsw i32 %add, %n, !dbg !1421
  %add10 = add nsw i32 %mul9, %add7, !dbg !1422
  %idxprom = sext i32 %add10 to i64, !dbg !1423
  %arrayidx = getelementptr inbounds double, double* %B, i64 %idxprom, !dbg !1423
  %0 = load double, double* %arrayidx, align 8, !dbg !1424
  %mul11 = fmul contract double %0, %alpha, !dbg !1424
  store double %mul11, double* %arrayidx, align 8, !dbg !1424
  br label %if.end, !dbg !1423

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  ret void, !dbg !1425
}

SUSAN: currGlob: @stderr = external dso_local global %struct._IO_FILE*, align 8
SUSAN: currGlob: @.str = private unnamed_addr constant [8 x i8] c"%0.2lf \00", align 1
SUSAN: getting value name for: @.str = private unnamed_addr constant [8 x i8] c"%0.2lf \00", align 1
CBackend: writeOperand 3595: [8 x i8] c"%0.2lf \00"
CBackend: writeoperand here 3674? 
SUSAN: currGlob: @.str.1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
SUSAN: getting value name for: @.str.1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
CBackend: writeOperand 3595: [2 x i8] c"\0A\00"
CBackend: writeoperand here 3674? 
